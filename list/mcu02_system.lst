C51 COMPILER V9.59.0.0   MCU02_SYSTEM                                                      04/27/2021 12:00:44 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCU02_SYSTEM
OBJECT MODULE PLACED IN .\output\mcu02_system.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Library\byd_standard_peripheral\source\mcu02_system.c LARGE OMF2 OPTIMIZ
                    -E(8,SPEED) BROWSE INCDIR(.\include;.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mif
                    -are\include;.\byd_tool_comm;.\byd_rfid;.\mmi_inc) DEBUG PRINT(.\list\mcu02_system.lst) TABS(2) OBJECT(.\output\mcu02_sys
                    -tem.obj)

line level    source

   1          /*!
   2              \file  mcu02_system.c
   3              \brief system driver
   4          */
   5          
   6          /*
   7              Copyright (C) 2020 BYD
   8          
   9              2020-05-10, V1.0.0, firmware for mcu02
  10          */
  11          
  12          #include "mcu02_system.h"
  13          
  14          /*!
  15              \brief      apb sfr write 
  16              \param[in]  apb_sfr_addr: write apb sfr addr
  17                          apb_sfr_data: write apb sfr data
  18              \param[out] none
  19              \retval     none
  20          */
  21          void apb_sfr_write(uint8_t apb_sfr_addr,uint8_t apb_sfr_data)
  22          {
  23   1        REG_ADDR = apb_sfr_addr;
  24   1        REG_DATA = apb_sfr_data;
  25   1      }
  26          
  27          /*!
  28              \brief      apb sfr read 
  29              \param[in]  apb_sfr_addr: apb sfr addr to read
  30              \param[out] none
  31              \retval     data read from apb sfr
  32          */
  33          uint8_t apb_sfr_read(uint8_t apb_sfr_addr)
  34          {
  35   1        REG_ADDR = apb_sfr_addr;
  36   1        return REG_DATA;
  37   1      }
  38          
  39          /*!
  40              \brief      interrupt cofig 
  41              \param[in]  IRQn_Type: 
  42                      INT_EXTI_0    :  intterrupt vector of exti_0       
  43                      INT_TIMER0      :  intterrupt vector of timer0       
  44                      INT_EXTI_1      :  intterrupt vector of exti_1       
  45                      INT_TIMER1      :  intterrupt vector of timer1       
  46                      INT_EXTI_2      :  intterrupt vector of exti_2       
  47                      INT_IIC         :  intterrupt vector of iic          
  48                      INT_ADC         :  intterrupt vector of adc          
  49                      INT_CSD         :  intterrupt vector of csd          
  50                      INT_LED_LCD_RFID:  intterrupt vector of led/lcd/rfid 
  51                      INT_WDT_TIMER2  :  intterrupt vector of wdt/timer2   
  52                      INT_SCI         :  intterrupt vector of sci         
C51 COMPILER V9.59.0.0   MCU02_SYSTEM                                                      04/27/2021 12:00:44 PAGE 2   

  53                      INT_LVDT        :  intterrupt vector of lvdt         
  54                      INT_UART0       :  intterrupt vector of uart0        
  55                      INT_UART1       :  intterrupt vector of uart1        
  56                      INT_TIMER3_SM4  :  intterrupt vector of timer3/sm4       
  57                      INT_SPI1        :  intterrupt vector of spi1         
  58                      INT_EXTI_3      :  intterrupt vector of exti_3   
  59                    PrioStatus: interrupt priority
  60                      HIGH :high priority
  61                      LOW :low priority
  62              \param[out] none
  63              \retval     none
  64          */
  65          //void interrupt_enable(IRQn_Type irq,IntPrioStatus PrioStatus)
  66          //{ 
  67          //  if(irq <= INT_TIMER1){
  68          //    IEN0 |= (0x01 << irq);
  69          //    if(PrioStatus == HIGH){
  70          //      IPL0 |= (0x01 << irq);
  71          //    }
  72          //  }else if(irq <= INT_WDT_TIMER2){
  73          //    irq -= 7;
  74          //    IEN1 |= (0x01 << irq);
  75          //    if(PrioStatus == HIGH){
  76          //      IPL1 |= (0x01 << irq);
  77          //    }
  78          //  }else{
  79          //    irq -= INT_SCI;
  80          //    IEN2 |= (0x01 << irq);
  81          //    if(PrioStatus == HIGH){
  82          //      IPL2 |= (0x01 << irq);
  83          //    }
  84          //  } 
  85          //}
  86          /*!
  87              \brief      interrup_disable 
  88              \param[in]  IRQn_Type:
  89                      INT_EXTI_0    :  intterrupt of exti_0       
  90                      INT_TIMER0      :  intterrupt of timer0       
  91                      INT_EXTI_1      :  intterrupt of exti_1       
  92                      INT_TIMER1      :  intterrupt of timer1       
  93                      INT_EXTI_2      :  intterrupt of exti_2       
  94                      INT_IIC         :  intterrupt of iic          
  95                      INT_ADC         :  intterrupt of adc          
  96                      INT_CSD         :  intterrupt of csd          
  97                      INT_LED_LCD_RFID:  intterrupt of led/lcd/rfid 
  98                      INT_WDT_TIMER2  :  intterrupt of wdt/timer2   
  99                      INT_SCI         :  intterrupt of sci        
 100                      INT_LVDT        :  intterrupt of lvdt         
 101                      INT_UART0       :  intterrupt of uart0        
 102                      INT_UART1       :  intterrupt of uart1        
 103                      INT_TIMER3_SM4  :  intterrupt of timer3/sm4       
 104                      INT_SPI1        :  intterrupt of spi1         
 105                      INT_EXTI_3      :  intterrupt of exti_3
 106              \param[out] none
 107              \retval     none
 108          */
 109          //void interrupt_disable(IRQn_Type irq)
 110          //{
 111          //  if(irq <= INT_TIMER1)
 112          //  {
 113          //    IEN0 &= ~(0x01 << irq); 
 114          //  }
C51 COMPILER V9.59.0.0   MCU02_SYSTEM                                                      04/27/2021 12:00:44 PAGE 3   

 115          //  else if(irq <= INT_WDT_TIMER2)
 116          //  {
 117          //    irq -= 7;
 118          //    IEN1 &= ~(0x01 << irq);   
 119          //  }
 120          //  else
 121          //  {
 122          //    irq -= INT_SCI;
 123          //    IEN2 &= ~(0x01 << irq);   
 124          //  } 
 125          //}
 126          
 127          /*!
 128              \brief      get system rst state
 129              \param[in]  none 
 130              \param[out] none
 131              \retval     reset state
 132                          bit0:WDTRST_STAT     
 133                          bit1:POR_STAT      
 134                          bit2:BOR_STAT 
 135                          bit3:ADDROF_STAT
 136                          bit4:PROG_STAT  
 137                          bit5:SOFT_STAT
 138                          bit6:DEBUG_STAT
 139                  bit7:BOOT_STAT
 140          */
 141          uint8_t get_system_rst_state(void)
 142          {
 143   1           REG_ADDR = RST_STAT;
 144   1         return REG_DATA;
 145   1      }
 146          
 147          /*!
 148              \brief      clear system rst state
 149              \param[in]  rst_flag:
 150                    WDTRST_STAT     
 151                          POR_STAT      
 152                          BOR_STAT 
 153                          ADDROF_STAT
 154                          PROG_STAT  
 155                          SOFT_STAT
 156                          DEBUG_STAT
 157                  BOOT_STAT
 158                  CLR_ALL_STAT    
 159              \param[out] none
 160              \retval     none
 161          */
 162          void system_rst_state_clear(uint8_t rst_flag)
 163          {
 164   1         REG_ADDR = RST_STAT;
 165   1         REG_DATA &= ~rst_flag;
 166   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     26    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.59.0.0   MCU02_SYSTEM                                                      04/27/2021 12:00:44 PAGE 4   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
