C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_WIFI_SUPPORT__
   6          #include "dqiot_drv_wifi.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_ms.h"
   9          #include "mmi_audio.h"
  10          #include "mmi_fs.h"
  11          #include "delay.h"
  12          #include "mmi_wifi.h"
  13          // #include <stdio.h>
  14          
  15          static unsigned int wifi_check_times = 0;
  16          /*
  17          parameter: 
  18            none
  19          return :
  20            none
  21          */
  22          unsigned char mmi_dq_wifi_check(void)
  23          {
  24   1        return wifi_wake_up(); //1:false  0: true
  25   1      }
  26          
  27          /**
  28            * @brief  智能配网（发送）
  29            * @param  none
  30            * @return none
  31            * @note   none
  32            * @see    none
  33            */
  34          unsigned char mmi_dq_wifi_setting(void)
  35          {
  36   1        unsigned char ret = 1;
  37   1        if (wifi_check_times > 0)
  38   1          return 0;
  39   1        wifi_wake_up();
  40   1        delay_ms(100);
  41   1        if (wifi_net_connect_send() == 0)
  42   1        {
  43   2          delay_ms(250);
  44   2          ret = wifi_net_connect_send();
  45   2        }
  46   1        if (ret == 1)
  47   1        {
  48   2          wifi_check_times = 1;
  49   2          mmi_dq_sys_set_wifi_check(0);
  50   2        }
  51   1        return ret;
  52   1      }
  53          
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 2   

  54          /**
  55            * @brief  Airkiss配网（发送）
  56            * @param  none
  57            * @return none
  58            * @note   none
  59            * @see    none
  60            */
  61          unsigned char mmi_dq_wifi_arikiss_con(void)
  62          {
  63   1        unsigned char ret = 1;
  64   1        if (wifi_check_times > 0)
  65   1          return 0;
  66   1        wifi_wake_up();
  67   1        delay_ms(100);
  68   1        if (wifi_net_airkiss_connect_send() == 0)
  69   1        {
  70   2          delay_ms(250);
  71   2          ret = wifi_net_airkiss_connect_send();
  72   2        }
  73   1        if (ret == 1)
  74   1        {
  75   2          wifi_check_times = 1;
  76   2          mmi_dq_sys_set_wifi_check(0);
  77   2        }
  78   1        return ret;
  79   1      }
  80          
  81          /**
  82            * @brief  二维码配网（发送）
  83            * @param  none
  84            * @return none
  85            * @note   none
  86            * @see    none
  87            */
  88          unsigned char mmi_dq_wifi_code_con(void)
  89          {
  90   1        unsigned char ret = 1;
  91   1        if (wifi_check_times > 0)
  92   1          return 0;
  93   1        wifi_wake_up();
  94   1        delay_ms(100);
  95   1        if (wifi_net_code_connect_send() == 0)
  96   1        {
  97   2          delay_ms(250);
  98   2          ret = wifi_net_code_connect_send();
  99   2        }
 100   1        if (ret == 1)
 101   1        {
 102   2          wifi_check_times = 1;
 103   2          mmi_dq_sys_set_wifi_check(0);
 104   2        }
 105   1        return ret;
 106   1      }
 107          
 108          /**
 109            * @brief  连网失败
 110            * @param  none
 111            * @return none
 112            * @note   none
 113            * @see    none
 114            */
 115          void mmi_dq_wifi_connected_fail(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 3   

 116          {
 117   1        //mmi_dq_fs_set_wifi_setting(0);
 118   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 119   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 120   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 121   1          mmi_dq_sys_wake_up();
 122   1      #ifdef __LOCK_AUDIO_SUPPORT__
 123   1        mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 124   1      #endif
 125   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 126   1        return;
 127   1      }
 128          
 129          /**
 130            * @brief  连网成功
 131            * @param  none
 132            * @return none
 133            * @note   none
 134            * @see    none
 135            */
 136          void mmi_dq_wifi_connected_suc(void)
 137          {
 138   1        //mmi_dq_fs_set_wifi_setting(1);
 139   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 140   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 141   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 142   1          mmi_dq_sys_wake_up();
 143   1      #ifdef __LOCK_AUDIO_SUPPORT__
 144   1        mmi_dq_aud_play_with_id(AUD_ID_SET_SUCESS);
 145   1      #endif
 146   1        return;
 147   1      }
 148          
 149          /**
 150            * @brief  配网状态（接收）
 151            * @param  none
 152            * @return none
 153            * @note   none
 154            * @see    none
 155            */
 156          void mmi_dq_wifi_check_connect(void)
 157          {
 158   1        static unsigned char wifi_check_connect_flag = 0;
 159   1        uint8_t retval = 0;
 160   1        wifi_check_times++;
 161   1        retval = wifi_net_connect_state();
 162   1        if (retval == 1)
 163   1        {
 164   2          wifi_check_connect_flag++;
 165   2          if (wifi_check_connect_flag >= 2)
 166   2          {
 167   3            mmi_dq_wifi_connected_suc();
 168   3            wifi_check_connect_flag = 0;
 169   3            wifi_check_times = 0;
 170   3            return;
 171   3          }
 172   2        }
 173   1        else
 174   1        {
 175   2          wifi_check_connect_flag = 0;
 176   2        }
 177   1      
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 4   

 178   1        if (wifi_check_times > 60 || retval == 2)
 179   1        {
 180   2          mmi_dq_wifi_connected_fail();
 181   2          wifi_check_times = 0;
 182   2        }
 183   1        else
 184   1          mmi_dq_sys_set_wifi_check(0);
 185   1      }
 186          
 187          /**
 188            * @brief  远程开门（发送）
 189            * @param  none
 190            * @return none
 191            * @note   none
 192            * @see    none
 193            */
 194          unsigned char mmi_dq_wifi_open_ask(void)
 195          {
 196   1        unsigned char ret = 1;
 197   1        if (wifi_check_times > 0)
 198   1          return 0;
 199   1        mmi_dq_wifi_wakeup();
 200   1        delay_ms(100);
 201   1        if (wifi_open_ask() == 0)
 202   1        {
 203   2          delay_ms(250);
 204   2          ret = wifi_open_ask();
 205   2        }
 206   1        if (ret == 1)
 207   1        {
 208   2          wifi_check_times = 1;
 209   2          mmi_dq_sys_set_wifi_check(1);
 210   2        }
 211   1        return ret;
 212   1      }
 213          
 214          /**
 215            * @brief  远程开门（接收）
 216            * @param  none
 217            * @return none
 218            * @note   none
 219            * @see    none
 220            */
 221          void mmi_dq_wifi_check_open(void)
 222          {
 223   1        unsigned char state = wifi_open_reply_get();
 224   1        wifi_check_times++;
 225   1        if (state == 1)
 226   1        {
 227   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 228   2            mmi_dq_sys_wake_up();
 229   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 230   2          wifi_check_times = 0;
 231   2        }
 232   1        else if (state == 2 || wifi_check_times > 30)
 233   1        {
 234   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 235   2            mmi_dq_sys_wake_up();
 236   2          if (state == 2)
 237   2      #ifdef __LOCK_AUDIO_SUPPORT__
 238   2            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
 239   2      #endif
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 5   

 240   2                ;
 241   2          else if (mmi_dq_ms_get_sys_state() == SYS_STATUS_IDLE)
 242   2          {
 243   3      #ifdef __LOCK_AUDIO_SUPPORT__
 244   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 245   3      #endif
 246   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 247   3          }
 248   2          wifi_check_times = 0;
 249   2        }
 250   1        else
 251   1          mmi_dq_sys_set_wifi_check(1);
 252   1      }
 253          
 254          /**
 255            * @brief  添加删除密码/指纹/RF卡
 256            * @param  none
 257            * @return none
 258            * @note   none
 259            * @see    none
 260            */
 261          void mmi_dq_wifi_cmd_add_del(void)
 262          {
 263   1        uint8_t retval = 0xff;
 264   1        uint16_t waittime = 75;
 265   1      
 266   1        while (--waittime)
 267   1        {
 268   2          delay_ms(1);
 269   2          retval = wifi_cmd_add_del();
 270   2          if (retval == 0)
 271   2            break;
 272   2          // if (retval == 1)
 273   2          //   mmi_dq_aud_play_with_id(AUD_BASE_ID_PRO_AUDIO);
 274   2        }
 275   1      
 276   1        if (retval == 0xff)
 277   1        {
 278   2      #ifdef __LOCK_AUDIO_SUPPORT__
 279   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 280   2      #endif
 281   2        }
 282   1      }
 283          
 284          /**
 285            * @brief  密码添加成功
 286            * @param  index
 287            * @return none
 288            * @note   none
 289            * @see    none
 290            */
 291          void mmi_dq_wifi_add_password(uint8_t index)
 292          {
 293   1        mmi_dq_wifi_wakeup();
 294   1      
 295   1        wifi_add_password(index);
 296   1      }
 297          
 298          /**
 299            * @brief  密码删除成功
 300            * @param  index
 301            * @return none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 6   

 302            * @note   none
 303            * @see    none
 304            */
 305          void mmi_dq_wifi_del_password(uint8_t index)
 306          {
 307   1        mmi_dq_wifi_wakeup();
 308   1      
 309   1        wifi_del_password(index);
 310   1      }
 311          
 312          /**
 313            * @brief  指纹添加成功
 314            * @param  index
 315            * @return none
 316            * @note   none
 317            * @see    none
 318            */
 319          void mmi_dq_wifi_add_fp(uint8_t index)
 320          {
 321   1        mmi_dq_wifi_wakeup();
 322   1      
 323   1        wifi_add_fp(index);
 324   1      }
 325          
 326          /**
 327            * @brief  指纹删除成功
 328            * @param  none
 329            * @return none
 330            * @note   none
 331            * @see    none
 332            */
 333          void mmi_dq_wifi_del_fp(uint8_t index)
 334          {
 335   1        mmi_dq_wifi_wakeup();
 336   1      
 337   1        wifi_del_fp(index);
 338   1      }
 339          
 340          /**
 341            * @brief  RF卡添加成功
 342            * @param  index
 343            * @return none
 344            * @note   none
 345            * @see    none
 346            */
 347          void mmi_dq_wifi_add_rfid_suc(uint8_t index)
 348          {
 349   1        mmi_dq_wifi_wakeup();
 350   1      
 351   1        wifi_add_rf(index);
 352   1      }
 353          
 354          /**
 355            * @brief  RF卡删除成功
 356            * @param  index
 357            * @return none
 358            * @note   none
 359            * @see    none
 360            */
 361          void mmi_dq_wifi_del_rfid_suc(uint8_t index)
 362          {
 363   1        mmi_dq_wifi_wakeup();
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 7   

 364   1      
 365   1        wifi_del_rf(index);
 366   1      }
 367          
 368          /**
 369            * @brief  密码全部清除
 370            * @param  none
 371            * @return none
 372            * @note   none
 373            * @see    none
 374            */
 375          void mmi_dq_wifi_clr_pwd_suc(void)
 376          {
 377   1        mmi_dq_wifi_wakeup();
 378   1      
 379   1        wifi_clr_pwd();
 380   1      }
 381          
 382          /**
 383            * @brief  指纹全部清除
 384            * @param  none
 385            * @return none
 386            * @note   none
 387            * @see    none
 388            */
 389          void mmi_dq_wifi_clr_fps_suc(void)
 390          {
 391   1        mmi_dq_wifi_wakeup();
 392   1      
 393   1        wifi_clr_fp();
 394   1      }
 395          
 396          /**
 397            * @brief  RF卡全部清除
 398            * @param  none
 399            * @return none
 400            * @note   none
 401            * @see    none
 402            */
 403          void mmi_dq_wifi_clr_rfid_suc(void)
 404          {
 405   1        mmi_dq_wifi_wakeup();
 406   1      
 407   1        wifi_clr_rf();
 408   1      }
 409          
 410          /**
 411            * @brief  密码开门
 412            * @param  index
 413            * @return none
 414            * @note   none
 415            * @see    none
 416            */
 417          void mmi_dq_wifi_open_by_password(uint8_t index)
 418          {
 419   1        mmi_dq_wifi_wakeup();
 420   1      
 421   1        wifi_open_by_password(index);
 422   1      }
 423          
 424          /**
 425            * @brief  指纹开门
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 8   

 426            * @param  index
 427            * @return none
 428            * @note   none
 429            * @see    none
 430            */
 431          void mmi_dq_wifi_open_by_fp(uint8_t index)
 432          {
 433   1        mmi_dq_wifi_wakeup();
 434   1      
 435   1        wifi_open_by_fp(index);
 436   1      }
 437          
 438          /**
 439            * @brief  RF卡开门
 440            * @param  index
 441            * @return none
 442            * @note   none
 443            * @see    none
 444            */
 445          void mmi_dq_wifi_open_by_rfid(uint8_t index)
 446          {
 447   1        mmi_dq_wifi_wakeup();
 448   1      
 449   1        wifi_open_by_rfid(index);
 450   1      }
 451          
 452          /**
 453            * @brief  远程开门成功
 454            * @param  none
 455            * @return none
 456            * @note   none
 457            * @see    none
 458            */
 459          void mmi_dq_wifi_open_by_wifi(void)
 460          {
 461   1        mmi_dq_wifi_wakeup();
 462   1      
 463   1        wifi_open_by_wifi();
 464   1      }
 465          
 466          /**
 467            * @brief  应急钥匙开门成功
 468            * @param  none
 469            * @return none
 470            * @note   none
 471            * @see    none
 472            */
 473          void mmi_dq_wifi_open_by_key(void)
 474          {
 475   1        mmi_dq_wifi_wakeup();
 476   1      
 477   1        wifi_open_by_key();
 478   1      }
 479          
 480          /**
 481            * @brief  门未关
 482            * @param  none
 483            * @return none
 484            * @note   none
 485            * @see    none
 486            */
 487          void mmi_dq_wifi_close_over_time(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 9   

 488          {
 489   1        wifi_close_over_time();
 490   1      }
 491          
 492          /*
 493          parameter: 
 494            none
 495          return :
 496            none
 497          */
 498          void mmi_dq_wifi_door_close(void)
 499          {
 500   1        wifi_door_close();
 501   1      }
 502          
 503          /**
 504            * @brief  震动报警
 505            * @param  none
 506            * @return none
 507            * @note   none
 508            * @see    none
 509            */
 510          void mmi_dq_wifi_via_alarm(void)
 511          {
 512   1        mmi_dq_wifi_wakeup();
 513   1      
 514   1        wifi_via_alarm();
 515   1      }
 516          
 517          /**
 518            * @brief  多次密码错误
 519            * @param  none
 520            * @return none
 521            * @note   none
 522            * @see    none
 523            */
 524          void mmi_dq_wifi_pw_alarm(void)
 525          {
 526   1        mmi_dq_wifi_wakeup();
 527   1      
 528   1        wifi_pw_alarm();
 529   1      }
 530          
 531          /**
 532            * @brief  多次指纹错误
 533            * @param  none
 534            * @return none
 535            * @note   none
 536            * @see    none
 537            */
 538          void mmi_dq_wifi_fp_alarm(void)
 539          {
 540   1        mmi_dq_wifi_wakeup();
 541   1      
 542   1        wifi_fp_alarm();
 543   1      }
 544          
 545          /**
 546            * @brief  多次RF卡错误
 547            * @param  none
 548            * @return none
 549            * @note   none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 10  

 550            * @see    none
 551            */
 552          void mmi_dq_wifi_rfid_alarm(void)
 553          {
 554   1        mmi_dq_wifi_wakeup();
 555   1      
 556   1        wifi_rf_alarm();
 557   1      }
 558          
 559          /**
 560            * @brief  低电量
 561            * @param  none
 562            * @return none
 563            * @note   none
 564            * @see    none
 565            */
 566          void mmi_dq_wifi_lowpower_alarm(void)
 567          {
 568   1        static uint8_t wifi_lowpower_flag = 0;
 569   1        if (wifi_lowpower_flag == 0)
 570   1        {
 571   2          wifi_lowpower_flag = 1;
 572   2          mmi_dq_wifi_wakeup();
 573   2      
 574   2          wifi_lowpower_alarm();
 575   2        }
 576   1      }
 577          
 578          /**
 579            * @brief  睡眠
 580            * @param  none
 581            * @return none
 582            * @note   none
 583            * @see    none
 584            */
 585          void mmi_dq_wifi_sleep(void)
 586          {
 587   1        wifi_sleep_mode();
 588   1      }
 589          
 590          /**
 591            * @brief  唤醒
 592            * @param  none
 593            * @return none
 594            * @note   none
 595            * @see    none
 596            */
 597          void mmi_dq_wifi_wakeup(void)
 598          {
 599   1        wifi_wake_up();
 600   1      
 601   1        delay_ms(150);
 602   1      }
 603          
 604          /**
 605            * @brief  拍照
 606            * @param  none
 607            * @return none
 608            * @note   none
 609            * @see    none
 610            */
 611          void mmi_dq_wifi_take_photos(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 11  

 612          {
 613   1        mmi_dq_wifi_wakeup();
 614   1      
 615   1        if (wifi_take_photos() == 1)
 616   1      #ifdef __LOCK_AUDIO_SUPPORT__
 617   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 618   1      #endif
 619   1              ;
 620   1      }
 621          
 622          /**
 623            * @brief  录像
 624            * @param  none
 625            * @return none
 626            * @note   none
 627            * @see    none
 628            */
 629          void mmi_dq_wifi_take_videos(void)
 630          {
 631   1        mmi_dq_wifi_wakeup();
 632   1      
 633   1        if (wifi_take_videos() == 1)
 634   1      #ifdef __LOCK_AUDIO_SUPPORT__
 635   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 636   1      #endif
 637   1              ;
 638   1      }
 639          
 640          /**
 641            * @brief  拍照录像开关
 642            * @param  none
 643            * @return none
 644            * @note   none
 645            * @see    none
 646            */
 647          void mmi_dq_wifi_pv_switch(void)
 648          {
 649   1        uint8_t retval = 0xff;
 650   1        uint16_t waittime = 75;
 651   1      
 652   1        mmi_dq_wifi_wakeup();
 653   1        wifi_pv_switch_send();
 654   1      
 655   1        while (--waittime)
 656   1        {
 657   2          delay_ms(1);
 658   2          retval = wifi_pv_switch_get();
 659   2          if (retval != 0xff)
 660   2          {
 661   3      #ifdef __LOCK_AUDIO_SUPPORT__
 662   3            mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
 663   3      #endif
 664   3            break;
 665   3          }
 666   2        }
 667   1      
 668   1        if (retval == 0xff)
 669   1        {
 670   2      #ifdef __LOCK_AUDIO_SUPPORT__
 671   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 672   2      #endif
 673   2        }
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 12  

 674   1      }
 675          
 676          /**
 677            * @brief  检查网络状态
 678            * @param  none
 679            * @return none
 680            * @note   none
 681            * @see    none
 682            */
 683          void mmi_dq_wifi_check_net(void)
 684          {
 685   1        if (wifi_check_net() == 1)
 686   1      #ifdef __LOCK_AUDIO_SUPPORT__
 687   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 688   1      #endif
 689   1              ;
 690   1        else
 691   1      #ifdef __LOCK_AUDIO_SUPPORT__
 692   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL)
 693   1      #endif
 694   1              ;
 695   1      }
 696          
 697          /**
 698            * @brief  协迫密码开门
 699            * @param  index
 700            * @return none
 701            * @note   none
 702            * @see    none
 703            */
 704          void mmi_dq_wifi_send_pwd_110(uint8_t index)
 705          {
 706   1        mmi_dq_wifi_wakeup();
 707   1        wifi_send_pwd_110();
 708   1        delay_ms(20);
 709   1        wifi_open_by_password(index);
 710   1      }
 711          
 712          /**
 713            * @brief  协迫密码开门
 714            * @param  index
 715            * @return none
 716            * @note   none
 717            * @see    none
 718            */
 719          void mmi_dq_wifi_send_fp_110(uint8_t index)
 720          {
 721   1        mmi_dq_wifi_wakeup();
 722   1        wifi_send_fp_110();
 723   1        delay_ms(20);
 724   1        wifi_open_by_fp(index);
 725   1      }
 726          
 727          /*
 728          parameter: 
 729            none
 730          return :
 731            none
 732          */
 733          void mmi_dq_wifi_set_110(void)
 734          {
 735   1        mmi_dq_wifi_wakeup();
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/20/2021 16:21:06 PAGE 13  

 736   1        wifi_set_110();
 737   1      }
 738          
 739          /*
 740          parameter: 
 741            none
 742          return :
 743            none
 744          */
 745          unsigned char mmi_dq_wifi_get_running_flag(void)
 746          {
 747   1        if (wifi_check_times > 0)
 748   1          return 1;
 749   1        return 0;
 750   1      }
 751          #endif
 752          #endif //__MMI_WIFI_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1096    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
