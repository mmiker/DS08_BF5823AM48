C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_WIFI_SUPPORT__
   6          #include "dqiot_drv_wifi.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_ms.h"
   9          #include "mmi_audio.h"
  10          #include "mmi_fs.h"
  11          #include "delay.h"
  12          #include "mmi_wifi.h"
  13          // #include <stdio.h>
  14          
  15          static unsigned int wifi_check_times = 0;
  16          /*
  17          parameter: 
  18            none
  19          return :
  20            none
  21          */
  22          unsigned char mmi_dq_wifi_check(void)
  23          {
  24   1        return wifi_wake_up(); //1:false  0: true
  25   1      }
  26          
  27          /**
  28            * @brief  智能配网（发送）
  29            * @param  none
  30            * @return none
  31            * @note   none
  32            * @see    none
  33            */
  34          unsigned char mmi_dq_wifi_setting(void)
  35          {
  36   1        unsigned char ret = 1;
  37   1        if (wifi_check_times > 0)
  38   1          return 0;
  39   1        wifi_wake_up();
  40   1        delay_ms(100);
  41   1        if (wifi_net_connect_send() == 0)
  42   1        {
  43   2          delay_ms(250);
  44   2          ret = wifi_net_connect_send();
  45   2        }
  46   1        if (ret == 1)
  47   1        {
  48   2          wifi_check_times = 1;
  49   2          mmi_dq_sys_set_wifi_check(0);
  50   2        }
  51   1        return ret;
  52   1      }
  53          
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 2   

  54          /**
  55            * @brief  Airkiss配网（发送）
  56            * @param  none
  57            * @return none
  58            * @note   none
  59            * @see    none
  60            */
  61          unsigned char mmi_dq_wifi_arikiss_con(void)
  62          {
  63   1        unsigned char ret = 1;
  64   1        if (wifi_check_times > 0)
  65   1          return 0;
  66   1        wifi_wake_up();
  67   1        delay_ms(100);
  68   1        if (wifi_net_airkiss_connect_send() == 0)
  69   1        {
  70   2          delay_ms(250);
  71   2          ret = wifi_net_airkiss_connect_send();
  72   2        }
  73   1        if (ret == 1)
  74   1        {
  75   2          wifi_check_times = 1;
  76   2          mmi_dq_sys_set_wifi_check(0);
  77   2        }
  78   1        return ret;
  79   1      }
  80          
  81          /**
  82            * @brief  二维码配网（发送）
  83            * @param  none
  84            * @return none
  85            * @note   none
  86            * @see    none
  87            */
  88          unsigned char mmi_dq_wifi_code_con(void)
  89          {
  90   1        unsigned char ret = 1;
  91   1        if (wifi_check_times > 0)
  92   1          return 0;
  93   1        wifi_wake_up();
  94   1        delay_ms(100);
  95   1        if (wifi_net_code_connect_send() == 0)
  96   1        {
  97   2          delay_ms(250);
  98   2          ret = wifi_net_code_connect_send();
  99   2        }
 100   1        if (ret == 1)
 101   1        {
 102   2          wifi_check_times = 1;
 103   2          mmi_dq_sys_set_wifi_check(0);
 104   2        }
 105   1        return ret;
 106   1      }
 107          
 108          /**
 109            * @brief  连网失败
 110            * @param  none
 111            * @return none
 112            * @note   none
 113            * @see    none
 114            */
 115          void mmi_dq_wifi_connected_fail(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 3   

 116          {
 117   1        //mmi_dq_fs_set_wifi_setting(0);
 118   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 119   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 120   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 121   1          mmi_dq_sys_wake_up();
 122   1        mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 123   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 124   1        return;
 125   1      }
 126          
 127          /**
 128            * @brief  连网成功
 129            * @param  none
 130            * @return none
 131            * @note   none
 132            * @see    none
 133            */
 134          void mmi_dq_wifi_connected_suc(void)
 135          {
 136   1        //mmi_dq_fs_set_wifi_setting(1);
 137   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 138   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 139   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 140   1          mmi_dq_sys_wake_up();
 141   1        mmi_dq_aud_play_with_id(AUD_ID_SET_SUCESS);
 142   1        return;
 143   1      }
 144          
 145          /**
 146            * @brief  配网状态（接收）
 147            * @param  none
 148            * @return none
 149            * @note   none
 150            * @see    none
 151            */
 152          void mmi_dq_wifi_check_connect(void)
 153          {
 154   1        static unsigned char wifi_check_connect_flag = 0;
 155   1        uint8_t retval = 0;
 156   1        wifi_check_times++;
 157   1        retval = wifi_net_connect_state();
 158   1        if (retval == 1)
 159   1        {
 160   2          wifi_check_connect_flag++;
 161   2          if (wifi_check_connect_flag >= 2)
 162   2          {
 163   3            mmi_dq_wifi_connected_suc();
 164   3            wifi_check_connect_flag = 0;
 165   3            wifi_check_times = 0;
 166   3            return;
 167   3          }
 168   2        }
 169   1        else
 170   1        {
 171   2          wifi_check_connect_flag = 0;
 172   2        }
 173   1      
 174   1        if (wifi_check_times > 60 || retval == 2)
 175   1        {
 176   2          mmi_dq_wifi_connected_fail();
 177   2          wifi_check_times = 0;
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 4   

 178   2        }
 179   1        else
 180   1          mmi_dq_sys_set_wifi_check(0);
 181   1      }
 182          
 183          /**
 184            * @brief  远程开门（发送）
 185            * @param  none
 186            * @return none
 187            * @note   none
 188            * @see    none
 189            */
 190          unsigned char mmi_dq_wifi_open_ask(void)
 191          {
 192   1        unsigned char ret = 1;
 193   1        if (wifi_check_times > 0)
 194   1          return 0;
 195   1        mmi_dq_wifi_wakeup();
 196   1        delay_ms(100);
 197   1        if (wifi_open_ask() == 0)
 198   1        {
 199   2          delay_ms(250);
 200   2          ret = wifi_open_ask();
 201   2        }
 202   1        if (ret == 1)
 203   1        {
 204   2          wifi_check_times = 1;
 205   2          mmi_dq_sys_set_wifi_check(1);
 206   2        }
 207   1        return ret;
 208   1      }
 209          
 210          /**
 211            * @brief  远程开门（接收）
 212            * @param  none
 213            * @return none
 214            * @note   none
 215            * @see    none
 216            */
 217          void mmi_dq_wifi_check_open(void)
 218          {
 219   1        unsigned char state = wifi_open_reply_get();
 220   1        wifi_check_times++;
 221   1        if (state == 1)
 222   1        {
 223   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 224   2            mmi_dq_sys_wake_up();
 225   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 226   2          wifi_check_times = 0;
 227   2        }
 228   1        else if (state == 2 || wifi_check_times > 30)
 229   1        {
 230   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 231   2            mmi_dq_sys_wake_up();
 232   2          if (state == 2)
 233   2            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
 234   2          else if (mmi_dq_ms_get_sys_state() == SYS_STATUS_IDLE)
 235   2          {
 236   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 237   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 238   3          }
 239   2          wifi_check_times = 0;
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 5   

 240   2        }
 241   1        else
 242   1          mmi_dq_sys_set_wifi_check(1);
 243   1      }
 244          
 245          /**
 246            * @brief  添加删除密码/指纹/RF卡
 247            * @param  none
 248            * @return none
 249            * @note   none
 250            * @see    none
 251            */
 252          void mmi_dq_wifi_cmd_add_del(void)
 253          {
 254   1        uint16_t waittime = 100;
 255   1      
 256   1        while (--waittime)
 257   1        {
 258   2          delay_ms(1);
 259   2          if (wifi_cmd_add_del() != 0)
 260   2            break;
 261   2        }
 262   1      }
 263          
 264          /**
 265            * @brief  密码添加成功
 266            * @param  index
 267            * @return none
 268            * @note   none
 269            * @see    none
 270            */
 271          void mmi_dq_wifi_add_password(uint8_t index)
 272          {
 273   1        mmi_dq_wifi_wakeup();
 274   1      
 275   1        wifi_add_password(index);
 276   1      }
 277          
 278          /**
 279            * @brief  密码删除成功
 280            * @param  index
 281            * @return none
 282            * @note   none
 283            * @see    none
 284            */
 285          void mmi_dq_wifi_del_password(uint8_t index)
 286          {
 287   1        mmi_dq_wifi_wakeup();
 288   1      
 289   1        wifi_del_password(index);
 290   1      }
 291          
 292          /**
 293            * @brief  指纹添加成功
 294            * @param  index
 295            * @return none
 296            * @note   none
 297            * @see    none
 298            */
 299          void mmi_dq_wifi_add_fp(uint8_t index)
 300          {
 301   1        mmi_dq_wifi_wakeup();
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 6   

 302   1      
 303   1        wifi_add_fp(index);
 304   1      }
 305          
 306          /**
 307            * @brief  指纹删除成功
 308            * @param  none
 309            * @return none
 310            * @note   none
 311            * @see    none
 312            */
 313          void mmi_dq_wifi_del_fp(uint8_t index)
 314          {
 315   1        mmi_dq_wifi_wakeup();
 316   1      
 317   1        wifi_del_fp(index);
 318   1      }
 319          
 320          /**
 321            * @brief  RF卡添加成功
 322            * @param  index
 323            * @return none
 324            * @note   none
 325            * @see    none
 326            */
 327          void mmi_dq_wifi_add_rfid_suc(uint8_t index)
 328          {
 329   1        mmi_dq_wifi_wakeup();
 330   1      
 331   1        wifi_add_rf(index);
 332   1      }
 333          
 334          /**
 335            * @brief  RF卡删除成功
 336            * @param  index
 337            * @return none
 338            * @note   none
 339            * @see    none
 340            */
 341          void mmi_dq_wifi_del_rfid_suc(uint8_t index)
 342          {
 343   1        mmi_dq_wifi_wakeup();
 344   1      
 345   1        wifi_del_rf(index);
 346   1      }
 347          
 348          /**
 349            * @brief  密码全部清除
 350            * @param  none
 351            * @return none
 352            * @note   none
 353            * @see    none
 354            */
 355          void mmi_dq_wifi_clr_pwd_suc(void)
 356          {
 357   1        mmi_dq_wifi_wakeup();
 358   1      
 359   1        wifi_clr_pwd();
 360   1      }
 361          
 362          /**
 363            * @brief  指纹全部清除
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 7   

 364            * @param  none
 365            * @return none
 366            * @note   none
 367            * @see    none
 368            */
 369          void mmi_dq_wifi_clr_fps_suc(void)
 370          {
 371   1        mmi_dq_wifi_wakeup();
 372   1      
 373   1        wifi_clr_fp();
 374   1      }
 375          
 376          /**
 377            * @brief  RF卡全部清除
 378            * @param  none
 379            * @return none
 380            * @note   none
 381            * @see    none
 382            */
 383          void mmi_dq_wifi_clr_rfid_suc(void)
 384          {
 385   1        mmi_dq_wifi_wakeup();
 386   1      
 387   1        wifi_clr_rf();
 388   1      }
 389          
 390          /**
 391            * @brief  密码开门
 392            * @param  index
 393            * @return none
 394            * @note   none
 395            * @see    none
 396            */
 397          void mmi_dq_wifi_open_by_password(uint8_t index)
 398          {
 399   1        mmi_dq_wifi_wakeup();
 400   1      
 401   1        wifi_open_by_password(index);
 402   1      }
 403          
 404          /**
 405            * @brief  指纹开门
 406            * @param  index
 407            * @return none
 408            * @note   none
 409            * @see    none
 410            */
 411          void mmi_dq_wifi_open_by_fp(uint8_t index)
 412          {
 413   1        mmi_dq_wifi_wakeup();
 414   1      
 415   1        wifi_open_by_fp(index);
 416   1      }
 417          
 418          /**
 419            * @brief  RF卡开门
 420            * @param  index
 421            * @return none
 422            * @note   none
 423            * @see    none
 424            */
 425          void mmi_dq_wifi_open_by_rfid(uint8_t index)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 8   

 426          {
 427   1        mmi_dq_wifi_wakeup();
 428   1      
 429   1        wifi_open_by_rfid(index);
 430   1      }
 431          
 432          /**
 433            * @brief  远程开门成功
 434            * @param  none
 435            * @return none
 436            * @note   none
 437            * @see    none
 438            */
 439          void mmi_dq_wifi_open_by_wifi(void)
 440          {
 441   1        mmi_dq_wifi_wakeup();
 442   1      
 443   1        wifi_open_by_wifi();
 444   1      }
 445          
 446          /**
 447            * @brief  应急钥匙开门成功
 448            * @param  none
 449            * @return none
 450            * @note   none
 451            * @see    none
 452            */
 453          void mmi_dq_wifi_open_by_key(void)
 454          {
 455   1        mmi_dq_wifi_wakeup();
 456   1      
 457   1        wifi_open_by_key();
 458   1      }
 459          
 460          /**
 461            * @brief  门未关
 462            * @param  none
 463            * @return none
 464            * @note   none
 465            * @see    none
 466            */
 467          void mmi_dq_wifi_close_over_time(void)
 468          {
 469   1        wifi_close_over_time();
 470   1      }
 471          
 472          /*
 473          parameter: 
 474            none
 475          return :
 476            none
 477          */
 478          void mmi_dq_wifi_door_close(void)
 479          {
 480   1        wifi_door_close();
 481   1      }
 482          
 483          /**
 484            * @brief  震动报警
 485            * @param  none
 486            * @return none
 487            * @note   none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 9   

 488            * @see    none
 489            */
 490          void mmi_dq_wifi_via_alarm(void)
 491          {
 492   1        mmi_dq_wifi_wakeup();
 493   1      
 494   1        wifi_via_alarm();
 495   1      }
 496          
 497          /**
 498            * @brief  多次密码错误
 499            * @param  none
 500            * @return none
 501            * @note   none
 502            * @see    none
 503            */
 504          void mmi_dq_wifi_pw_alarm(void)
 505          {
 506   1        mmi_dq_wifi_wakeup();
 507   1      
 508   1        wifi_pw_alarm();
 509   1      }
 510          
 511          /**
 512            * @brief  多次指纹错误
 513            * @param  none
 514            * @return none
 515            * @note   none
 516            * @see    none
 517            */
 518          void mmi_dq_wifi_fp_alarm(void)
 519          {
 520   1        mmi_dq_wifi_wakeup();
 521   1      
 522   1        wifi_fp_alarm();
 523   1      }
 524          
 525          /**
 526            * @brief  多次RF卡错误
 527            * @param  none
 528            * @return none
 529            * @note   none
 530            * @see    none
 531            */
 532          void mmi_dq_wifi_rfid_alarm(void)
 533          {
 534   1        mmi_dq_wifi_wakeup();
 535   1      
 536   1        wifi_rf_alarm();
 537   1      }
 538          
 539          /**
 540            * @brief  低电量
 541            * @param  none
 542            * @return none
 543            * @note   none
 544            * @see    none
 545            */
 546          void mmi_dq_wifi_lowpower_alarm(void)
 547          {
 548   1        static uint8_t wifi_lowpower_flag = 0;
 549   1        if (wifi_lowpower_flag == 0)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 10  

 550   1        {
 551   2          wifi_lowpower_flag = 1;
 552   2          mmi_dq_wifi_wakeup();
 553   2      
 554   2          wifi_lowpower_alarm();
 555   2        }
 556   1      }
 557          
 558          /**
 559            * @brief  睡眠
 560            * @param  none
 561            * @return none
 562            * @note   none
 563            * @see    none
 564            */
 565          void mmi_dq_wifi_sleep(void)
 566          {
 567   1        wifi_sleep_mode();
 568   1      }
 569          
 570          /**
 571            * @brief  唤醒
 572            * @param  none
 573            * @return none
 574            * @note   none
 575            * @see    none
 576            */
 577          void mmi_dq_wifi_wakeup(void)
 578          {
 579   1        wifi_wake_up();
 580   1      
 581   1        delay_ms(150);
 582   1      }
 583          
 584          /**
 585            * @brief  拍照
 586            * @param  none
 587            * @return none
 588            * @note   none
 589            * @see    none
 590            */
 591          void mmi_dq_wifi_take_photos(void)
 592          {
 593   1        mmi_dq_wifi_wakeup();
 594   1      
 595   1        if (wifi_take_photos() == 1)
 596   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
 597   1      }
 598          
 599          /**
 600            * @brief  录像
 601            * @param  none
 602            * @return none
 603            * @note   none
 604            * @see    none
 605            */
 606          void mmi_dq_wifi_take_videos(void)
 607          {
 608   1        mmi_dq_wifi_wakeup();
 609   1      
 610   1        if (wifi_take_videos() == 1)
 611   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 11  

 612   1      }
 613          
 614          /**
 615            * @brief  拍照录像开关
 616            * @param  none
 617            * @return none
 618            * @note   none
 619            * @see    none
 620            */
 621          void mmi_dq_wifi_pv_switch(void)
 622          {
 623   1        uint8_t retval;
 624   1        uint16_t waittime = 100;
 625   1      
 626   1        mmi_dq_wifi_wakeup();
 627   1        wifi_pv_switch_send();
 628   1      
 629   1        while (--waittime)
 630   1        {
 631   2          delay_ms(1);
 632   2          retval = wifi_pv_switch_get();
 633   2          if (retval != 0xff)
 634   2            break;
 635   2        }
 636   1      }
 637          
 638          /**
 639            * @brief  检查网络状态
 640            * @param  none
 641            * @return none
 642            * @note   none
 643            * @see    none
 644            */
 645          void mmi_dq_wifi_check_net(void)
 646          {
 647   1        if (wifi_check_net() == 1)
 648   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
 649   1        else
 650   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 651   1      }
 652          
 653          /**
 654            * @brief  协迫密码开门
 655            * @param  index
 656            * @return none
 657            * @note   none
 658            * @see    none
 659            */
 660          void mmi_dq_wifi_send_pwd_110(uint8_t index)
 661          {
 662   1        mmi_dq_wifi_wakeup();
 663   1        wifi_send_pwd_110();
 664   1        delay_ms(20);
 665   1        wifi_open_by_password(index);
 666   1      }
 667          
 668          /**
 669            * @brief  协迫密码开门
 670            * @param  index
 671            * @return none
 672            * @note   none
 673            * @see    none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/16/2021 17:36:26 PAGE 12  

 674            */
 675          void mmi_dq_wifi_send_fp_110(uint8_t index)
 676          {
 677   1        mmi_dq_wifi_wakeup();
 678   1        wifi_send_fp_110();
 679   1        delay_ms(20);
 680   1        wifi_open_by_fp(index);
 681   1      }
 682          
 683          /*
 684          parameter: 
 685            none
 686          return :
 687            none
 688          */
 689          void mmi_dq_wifi_set_110(void)
 690          {
 691   1        mmi_dq_wifi_wakeup();
 692   1        wifi_set_110();
 693   1      }
 694          
 695          /*
 696          parameter: 
 697            none
 698          return :
 699            none
 700          */
 701          unsigned char mmi_dq_wifi_get_running_flag(void)
 702          {
 703   1        if (wifi_check_times > 0)
 704   1          return 1;
 705   1        return 0;
 706   1      }
 707          #endif
 708          #endif //__MMI_WIFI_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1060    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
