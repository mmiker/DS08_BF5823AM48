C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_WIFI_SUPPORT__
   6          #include "dqiot_drv_wifi.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_ms.h"
   9          #include "mmi_audio.h"
  10          #include "mmi_fs.h"
  11          #include "delay.h"
  12          #include "mmi_wifi.h"
  13          // #include <stdio.h>
  14          
  15          static unsigned int wifi_check_times = 0;
  16          
  17          /*
  18          parameter: 
  19            none
  20          return :
  21            none
  22          */
  23          void mmi_dq_wifi_wakeup(void)
  24          {
  25   1        wifi_wake_up();
  26   1      
  27   1        delay_ms(150);
  28   1      }
  29          
  30          /*
  31          parameter: 
  32            none
  33          return :
  34            none
  35          */
  36          unsigned char mmi_dq_wifi_check(void)
  37          {
  38   1        return wifi_wake_up(); //1:false  0: true
  39   1      }
  40          
  41          /*
  42          parameter: 
  43            none
  44          return :
  45            none
  46          */
  47          void mmi_dq_wifi_sleep(void)
  48          {
  49   1        wifi_sleep_mode();
  50   1      }
  51          
  52          /*
  53          parameter: 
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 2   

  54            none
  55          return :
  56            none
  57          */
  58          unsigned char mmi_dq_wifi_setting(void)
  59          {
  60   1        unsigned char ret = 1;
  61   1        if (wifi_check_times > 0)
  62   1          return 0;
  63   1        wifi_wake_up();
  64   1        delay_ms(100);
  65   1        if (wifi_net_connect_send() == 0)
  66   1        {
  67   2          delay_ms(250);
  68   2          ret = wifi_net_connect_send();
  69   2        }
  70   1        if (ret == 1)
  71   1        {
  72   2          wifi_check_times = 1;
  73   2          mmi_dq_sys_set_wifi_check(0);
  74   2        }
  75   1        return ret;
  76   1      }
  77          
  78          /*
  79          parameter: 
  80            none
  81          return :
  82            none
  83          */
  84          void mmi_dq_wifi_connected_fail(void)
  85          {
  86   1        //mmi_dq_fs_set_wifi_setting(0);
  87   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  88   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  89   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  90   1          mmi_dq_sys_wake_up();
  91   1        mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
  92   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
  93   1        return;
  94   1      }
  95          
  96          /*
  97          parameter: 
  98            none
  99          return :
 100            none
 101          */
 102          void mmi_dq_wifi_connected_suc(void)
 103          {
 104   1        //mmi_dq_fs_set_wifi_setting(1);
 105   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 106   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 107   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 108   1          mmi_dq_sys_wake_up();
 109   1        mmi_dq_aud_play_with_id(AUD_ID_SET_SUCESS);
 110   1        return;
 111   1      }
 112          
 113          /*
 114          parameter: 
 115            none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 3   

 116          return :
 117            none
 118          */
 119          void mmi_dq_wifi_check_connect(void)
 120          {
 121   1        static unsigned char wifi_check_connect_flag = 0;
 122   1        wifi_check_times++;
 123   1        if (wifi_net_connect_state() == 1)
 124   1        {
 125   2          wifi_check_connect_flag++;
 126   2          if (wifi_check_connect_flag >= 2)
 127   2          {
 128   3            mmi_dq_wifi_connected_suc();
 129   3            wifi_check_connect_flag = 0;
 130   3            wifi_check_times = 0;
 131   3            return;
 132   3          }
 133   2        }
 134   1        else
 135   1        {
 136   2          wifi_check_connect_flag = 0;
 137   2        }
 138   1      
 139   1        if (wifi_check_times > 60)
 140   1        {
 141   2          mmi_dq_wifi_connected_fail();
 142   2          wifi_check_times = 0;
 143   2        }
 144   1        else
 145   1          mmi_dq_sys_set_wifi_check(0);
 146   1      }
 147          
 148          /*
 149          parameter: 
 150            none
 151          return :
 152            none
 153          */
 154          unsigned char mmi_dq_wifi_open_ask(void)
 155          {
 156   1        unsigned char ret = 1;
 157   1        if (wifi_check_times > 0)
 158   1          return 0;
 159   1        mmi_dq_wifi_wakeup();
 160   1        delay_ms(100);
 161   1        if (wifi_open_ask() == 0)
 162   1        {
 163   2          delay_ms(250);
 164   2          ret = wifi_open_ask();
 165   2        }
 166   1        if (ret == 1)
 167   1        {
 168   2          wifi_check_times = 1;
 169   2          mmi_dq_sys_set_wifi_check(1);
 170   2        }
 171   1        return ret;
 172   1      }
 173          
 174          /*
 175          parameter: 
 176            none
 177          return :
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 4   

 178            none
 179          */
 180          void mmi_dq_wifi_check_open(void)
 181          {
 182   1        unsigned char state = wifi_open_reply_get();
 183   1        wifi_check_times++;
 184   1        if (state == 1)
 185   1        {
 186   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 187   2            mmi_dq_sys_wake_up();
 188   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 189   2          wifi_check_times = 0;
 190   2        }
 191   1        else if (state == 2 || wifi_check_times > 30)
 192   1        {
 193   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 194   2            mmi_dq_sys_wake_up();
 195   2          if (state == 2)
 196   2            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
 197   2          else if (mmi_dq_ms_get_sys_state() == SYS_STATUS_IDLE)
 198   2          {
 199   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 200   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 201   3          }
 202   2          wifi_check_times = 0;
 203   2        }
 204   1        else
 205   1          mmi_dq_sys_set_wifi_check(1);
 206   1      }
 207          
 208          /*
 209          parameter: 
 210            none
 211          return :
 212            none
 213          */
 214          void mmi_dq_wifi_close_over_time(void)
 215          {
 216   1        mmi_dq_wifi_wakeup();
 217   1      
 218   1        wifi_close_over_time();
 219   1      }
 220          
 221          /*
 222          parameter: 
 223            none
 224          return :
 225            none
 226          */
 227          void mmi_dq_wifi_add_password(void)
 228          {
 229   1        mmi_dq_wifi_wakeup();
 230   1      
 231   1        wifi_add_password();
 232   1      }
 233          
 234          /*
 235          parameter: 
 236            none
 237          return :
 238            none
 239          */
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 5   

 240          void mmi_dq_wifi_del_password(void)
 241          {
 242   1        mmi_dq_wifi_wakeup();
 243   1      
 244   1        wifi_del_password();
 245   1      }
 246          
 247          /*
 248          parameter: 
 249            none
 250          return :
 251            none
 252          */
 253          void mmi_dq_wifi_add_fp(void)
 254          {
 255   1        mmi_dq_wifi_wakeup();
 256   1      
 257   1        wifi_add_fp();
 258   1      }
 259          
 260          /*
 261          parameter: 
 262            none
 263          return :
 264            none
 265          */
 266          void mmi_dq_wifi_del_fp(void)
 267          {
 268   1        mmi_dq_wifi_wakeup();
 269   1      
 270   1        wifi_del_fp();
 271   1      }
 272          
 273          /*
 274          parameter: 
 275            none
 276          return :
 277            none
 278          */
 279          void mmi_dq_wifi_open_by_password(void)
 280          {
 281   1        mmi_dq_wifi_wakeup();
 282   1      
 283   1        wifi_open_by_password();
 284   1      }
 285          
 286          /*
 287          parameter: 
 288            none
 289          return :
 290            none
 291          */
 292          void mmi_dq_wifi_open_by_fp(void)
 293          {
 294   1        mmi_dq_wifi_wakeup();
 295   1      
 296   1        wifi_open_by_fp();
 297   1      }
 298          
 299          /*
 300          parameter: 
 301            none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 6   

 302          return :
 303            none
 304          */
 305          void mmi_dq_wifi_open_by_rfid(void)
 306          {
 307   1        mmi_dq_wifi_wakeup();
 308   1      
 309   1        wifi_open_by_rfid();
 310   1      }
 311          
 312          /*
 313          parameter: 
 314            none
 315          return :
 316            none
 317          */
 318          void mmi_dq_wifi_open_by_key(void)
 319          {
 320   1        mmi_dq_wifi_wakeup();
 321   1      
 322   1        wifi_open_by_key();
 323   1      }
 324          
 325          /*
 326          parameter: 
 327            none
 328          return :
 329            none
 330          */
 331          void mmi_dq_wifi_open_by_wifi(void)
 332          {
 333   1      
 334   1        wifi_open_by_wifi();
 335   1      }
 336          
 337          /*
 338          parameter: 
 339            none
 340          return :
 341            none
 342          */
 343          void mmi_dq_wifi_door_close(void)
 344          {
 345   1      
 346   1        wifi_door_close();
 347   1      }
 348          
 349          /*
 350          parameter: 
 351            none
 352          return :
 353            none
 354          */
 355          void mmi_dq_wifi_via_alarm(void)
 356          {
 357   1        mmi_dq_wifi_wakeup();
 358   1      
 359   1        wifi_via_alarm();
 360   1      }
 361          
 362          /*
 363          parameter: 
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 7   

 364            none
 365          return :
 366            none
 367          */
 368          void mmi_dq_wifi_pw_alarm(void)
 369          {
 370   1        mmi_dq_wifi_wakeup();
 371   1      
 372   1        wifi_pw_alarm();
 373   1      }
 374          
 375          /*
 376          parameter: 
 377            none
 378          return :
 379            none
 380          */
 381          void mmi_dq_wifi_fp_alarm(void)
 382          {
 383   1        mmi_dq_wifi_wakeup();
 384   1      
 385   1        wifi_fp_alarm();
 386   1      }
 387          
 388          /*
 389          parameter: 
 390            none
 391          return :
 392            none
 393          */
 394          void mmi_dq_wifi_rfid_alarm(void)
 395          {
 396   1        mmi_dq_wifi_wakeup();
 397   1      
 398   1        wifi_rf_alarm();
 399   1      }
 400          
 401          /*
 402          parameter: 
 403            none
 404          return :
 405            none
 406          */
 407          void mmi_dq_wifi_lowpower_alarm(void)
 408          {
 409   1        static uint8_t wifi_lowpower_flag = 0;
 410   1        if (wifi_lowpower_flag == 0)
 411   1        {
 412   2          wifi_lowpower_flag = 1;
 413   2          mmi_dq_wifi_wakeup();
 414   2      
 415   2          wifi_lowpower_alarm();
 416   2        }
 417   1      }
 418          
 419          /*
 420          parameter: 
 421            none
 422          return :
 423            none
 424          */
 425          void mmi_dq_wifi_send_pwd_110(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 8   

 426          {
 427   1        mmi_dq_wifi_wakeup();
 428   1        wifi_send_pwd_110();
 429   1        delay_ms(20);
 430   1        wifi_open_by_password();
 431   1      }
 432          
 433          /*
 434          parameter: 
 435            none
 436          return :
 437            none
 438          */
 439          void mmi_dq_wifi_send_fp_110(void)
 440          {
 441   1        mmi_dq_wifi_wakeup();
 442   1        wifi_send_fp_110();
 443   1        delay_ms(20);
 444   1        wifi_open_by_fp();
 445   1      }
 446          
 447          /*
 448          parameter: 
 449            none
 450          return :
 451            none
 452          */
 453          void mmi_dq_wifi_set_110(void)
 454          {
 455   1        mmi_dq_wifi_wakeup();
 456   1        wifi_set_110();
 457   1      }
 458          
 459          /*
 460          parameter: 
 461            none
 462          return :
 463            none
 464          */
 465          unsigned char mmi_dq_wifi_get_running_flag(void)
 466          {
 467   1        if (wifi_check_times > 0)
 468   1          return 1;
 469   1        return 0;
 470   1      }
 471          #endif
 472          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    610    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/12/2021 12:09:38 PAGE 9   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
