C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "dqiot_drv_wifi.h"
   6          #include "mmi_sys.h"
   7          #include "mmi_ms.h"
   8          #include "mmi_audio.h"
   9          #include "mmi_fs.h"
  10          #include "delay.h"
  11          #include "mmi_wifi.h"
  12          // #include <stdio.h>
  13          
  14          static unsigned int wifi_check_times = 0;
  15          
  16          /*
  17          parameter: 
  18            none
  19          return :
  20            none
  21          */
  22          void mmi_dq_wifi_wakeup(void)
  23          {
  24   1        wifi_wake_up();
  25   1      
  26   1        delay_ms(150);
  27   1      }
  28          
  29          /*
  30          parameter: 
  31            none
  32          return :
  33            none
  34          */
  35          unsigned char mmi_dq_wifi_check(void)
  36          {
  37   1        return wifi_wake_up(); //1:false  0: true
  38   1      }
  39          
  40          /*
  41          parameter: 
  42            none
  43          return :
  44            none
  45          */
  46          void mmi_dq_wifi_sleep(void)
  47          {
  48   1        wifi_sleep_mode();
  49   1      }
  50          
  51          /*
  52          parameter: 
  53            none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 2   

  54          return :
  55            none
  56          */
  57          unsigned char mmi_dq_wifi_setting(void)
  58          {
  59   1        unsigned char ret = 1;
  60   1        if (wifi_check_times > 0)
  61   1          return 0;
  62   1        wifi_wake_up();
  63   1        delay_ms(100);
  64   1        if (wifi_net_connect_send() == 0)
  65   1        {
  66   2          delay_ms(250);
  67   2          ret = wifi_net_connect_send();
  68   2        }
  69   1        if (ret == 1)
  70   1        {
  71   2          wifi_check_times = 1;
  72   2          mmi_dq_sys_set_wifi_check(0);
  73   2        }
  74   1        return ret;
  75   1      }
  76          
  77          /*
  78          parameter: 
  79            none
  80          return :
  81            none
  82          */
  83          void mmi_dq_wifi_connected_fail(void)
  84          {
  85   1        //mmi_dq_fs_set_wifi_setting(0);
  86   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  87   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  88   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  89   1          mmi_dq_sys_wake_up();
  90   1        mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
  91   1        return;
  92   1      }
  93          
  94          /*
  95          parameter: 
  96            none
  97          return :
  98            none
  99          */
 100          void mmi_dq_wifi_connected_suc(void)
 101          {
 102   1        //mmi_dq_fs_set_wifi_setting(1);
 103   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 104   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 105   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 106   1          mmi_dq_sys_wake_up();
 107   1        mmi_dq_aud_play_with_id(AUD_ID_SET_SUCESS);
 108   1        return;
 109   1      }
 110          
 111          /*
 112          parameter: 
 113            none
 114          return :
 115            none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 3   

 116          */
 117          void mmi_dq_wifi_check_connect(void)
 118          {
 119   1        static unsigned char wifi_check_connect_flag = 0;
 120   1        wifi_check_times++;
 121   1        if (wifi_net_connect_state() == 1)
 122   1        {
 123   2          wifi_check_connect_flag++;
 124   2          if (wifi_check_connect_flag >= 2)
 125   2          {
 126   3            mmi_dq_wifi_connected_suc();
 127   3            wifi_check_connect_flag = 0;
 128   3            wifi_check_times = 0;
 129   3            return;
 130   3          }
 131   2        }
 132   1        else
 133   1        {
 134   2          wifi_check_connect_flag = 0;
 135   2        }
 136   1      
 137   1        if (wifi_check_times > 600)
 138   1        {
 139   2          mmi_dq_wifi_connected_fail();
 140   2          wifi_check_times = 0;
 141   2        }
 142   1        else
 143   1          mmi_dq_sys_set_wifi_check(0);
 144   1      }
 145          
 146          /*
 147          parameter: 
 148            none
 149          return :
 150            none
 151          */
 152          unsigned char mmi_dq_wifi_open_ask(void)
 153          {
 154   1        unsigned char ret = 1;
 155   1        if (wifi_check_times > 0)
 156   1          return 0;
 157   1        mmi_dq_wifi_wakeup();
 158   1        delay_ms(100);
 159   1        if (wifi_open_ask() == 0)
 160   1        {
 161   2          delay_ms(250);
 162   2          ret = wifi_open_ask();
 163   2        }
 164   1        if (ret == 1)
 165   1        {
 166   2          wifi_check_times = 1;
 167   2          mmi_dq_sys_set_wifi_check(1);
 168   2        }
 169   1        return ret;
 170   1      }
 171          
 172          /*
 173          parameter: 
 174            none
 175          return :
 176            none
 177          */
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 4   

 178          void mmi_dq_wifi_check_open(void)
 179          {
 180   1        unsigned char state = wifi_open_reply_get();
 181   1        wifi_check_times++;
 182   1        if (state == 1)
 183   1        {
 184   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 185   2            mmi_dq_sys_wake_up();
 186   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 187   2          wifi_check_times = 0;
 188   2        }
 189   1        else if (state == 2 || wifi_check_times > 300)
 190   1        {
 191   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 192   2            mmi_dq_sys_wake_up();
 193   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 194   2          wifi_check_times = 0;
 195   2        }
 196   1        else
 197   1          mmi_dq_sys_set_wifi_check(1);
 198   1      }
 199          
 200          /*
 201          parameter: 
 202            none
 203          return :
 204            none
 205          */
 206          void mmi_dq_wifi_close_over_time(void)
 207          {
 208   1        mmi_dq_wifi_wakeup();
 209   1      
 210   1        wifi_close_over_time();
 211   1      }
 212          
 213          /*
 214          parameter: 
 215            none
 216          return :
 217            none
 218          */
 219          void mmi_dq_wifi_add_password(void)
 220          {
 221   1        mmi_dq_wifi_wakeup();
 222   1      
 223   1        wifi_add_password();
 224   1      }
 225          
 226          /*
 227          parameter: 
 228            none
 229          return :
 230            none
 231          */
 232          void mmi_dq_wifi_del_password(void)
 233          {
 234   1        mmi_dq_wifi_wakeup();
 235   1      
 236   1        wifi_del_password();
 237   1      }
 238          
 239          /*
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 5   

 240          parameter: 
 241            none
 242          return :
 243            none
 244          */
 245          void mmi_dq_wifi_add_fp(void)
 246          {
 247   1        mmi_dq_wifi_wakeup();
 248   1      
 249   1        wifi_add_fp();
 250   1      }
 251          
 252          /*
 253          parameter: 
 254            none
 255          return :
 256            none
 257          */
 258          void mmi_dq_wifi_del_fp(void)
 259          {
 260   1        mmi_dq_wifi_wakeup();
 261   1      
 262   1        wifi_del_fp();
 263   1      }
 264          
 265          /*
 266          parameter: 
 267            none
 268          return :
 269            none
 270          */
 271          void mmi_dq_wifi_open_by_password(void)
 272          {
 273   1        mmi_dq_wifi_wakeup();
 274   1      
 275   1        wifi_open_by_password();
 276   1      }
 277          
 278          /*
 279          parameter: 
 280            none
 281          return :
 282            none
 283          */
 284          void mmi_dq_wifi_open_by_fp(void)
 285          {
 286   1        mmi_dq_wifi_wakeup();
 287   1      
 288   1        wifi_open_by_fp();
 289   1      }
 290          
 291          /*
 292          parameter: 
 293            none
 294          return :
 295            none
 296          */
 297          void mmi_dq_wifi_open_by_rfid(void)
 298          {
 299   1        mmi_dq_wifi_wakeup();
 300   1      
 301   1        wifi_open_by_rfid();
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 6   

 302   1      }
 303          
 304          /*
 305          parameter: 
 306            none
 307          return :
 308            none
 309          */
 310          void mmi_dq_wifi_open_by_key(void)
 311          {
 312   1        mmi_dq_wifi_wakeup();
 313   1      
 314   1        wifi_open_by_key();
 315   1      }
 316          
 317          /*
 318          parameter: 
 319            none
 320          return :
 321            none
 322          */
 323          void mmi_dq_wifi_open_by_wifi(void)
 324          {
 325   1      
 326   1        wifi_open_by_wifi();
 327   1      }
 328          
 329          /*
 330          parameter: 
 331            none
 332          return :
 333            none
 334          */
 335          void mmi_dq_wifi_door_close(void)
 336          {
 337   1      
 338   1        wifi_door_close();
 339   1      }
 340          
 341          /*
 342          parameter: 
 343            none
 344          return :
 345            none
 346          */
 347          void mmi_dq_wifi_via_alarm(void)
 348          {
 349   1        mmi_dq_wifi_wakeup();
 350   1      
 351   1        wifi_via_alarm();
 352   1      }
 353          
 354          /*
 355          parameter: 
 356            none
 357          return :
 358            none
 359          */
 360          void mmi_dq_wifi_pw_alarm(void)
 361          {
 362   1        mmi_dq_wifi_wakeup();
 363   1      
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 7   

 364   1        wifi_pw_alarm();
 365   1      }
 366          
 367          /*
 368          parameter: 
 369            none
 370          return :
 371            none
 372          */
 373          void mmi_dq_wifi_fp_alarm(void)
 374          {
 375   1        mmi_dq_wifi_wakeup();
 376   1      
 377   1        wifi_fp_alarm();
 378   1      }
 379          
 380          /*
 381          parameter: 
 382            none
 383          return :
 384            none
 385          */
 386          void mmi_dq_wifi_rfid_alarm(void)
 387          {
 388   1        mmi_dq_wifi_wakeup();
 389   1      
 390   1        wifi_rf_alarm();
 391   1      }
 392          
 393          /*
 394          parameter: 
 395            none
 396          return :
 397            none
 398          */
 399          void mmi_dq_wifi_lowpower_alarm(void)
 400          {
 401   1        static uint8_t wifi_lowpower_flag = 0;
 402   1        if (wifi_lowpower_flag == 0)
 403   1        {
 404   2          wifi_lowpower_flag = 1;
 405   2          mmi_dq_wifi_wakeup();
 406   2      
 407   2          wifi_lowpower_alarm();
 408   2        }
 409   1      }
 410          
 411          /*
 412          parameter: 
 413            none
 414          return :
 415            none
 416          */
 417          void mmi_dq_wifi_send_pwd_110(void)
 418          {
 419   1        mmi_dq_wifi_wakeup();
 420   1        wifi_send_pwd_110();
 421   1        delay_ms(20);
 422   1        wifi_open_by_password();
 423   1      }
 424          
 425          /*
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          03/11/2021 15:26:02 PAGE 8   

 426          parameter: 
 427            none
 428          return :
 429            none
 430          */
 431          void mmi_dq_wifi_send_fp_110(void)
 432          {
 433   1        mmi_dq_wifi_wakeup();
 434   1        wifi_send_fp_110();
 435   1        delay_ms(20);
 436   1        wifi_open_by_fp();
 437   1      }
 438          
 439          /*
 440          parameter: 
 441            none
 442          return :
 443            none
 444          */
 445          void mmi_dq_wifi_set_110(void)
 446          {
 447   1        mmi_dq_wifi_wakeup();
 448   1        wifi_set_110();
 449   1      }
 450          
 451          /*
 452          parameter: 
 453            none
 454          return :
 455            none
 456          */
 457          unsigned char mmi_dq_wifi_get_running_flag(void)
 458          {
 459   1        if (wifi_check_times > 0)
 460   1          return 1;
 461   1        return 0;
 462   1      }
 463          
 464          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    577    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
