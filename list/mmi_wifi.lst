C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_WIFI_SUPPORT__
   6          #include "dqiot_drv_wifi.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_ms.h"
   9          #include "mmi_audio.h"
  10          #include "mmi_fs.h"
  11          #include "delay.h"
  12          #include "mmi_wifi.h"
  13          // #include <stdio.h>
  14          
  15          static unsigned int wifi_check_times = 0;
  16          /*
  17          parameter: 
  18            none
  19          return :
  20            none
  21          */
  22          unsigned char mmi_dq_wifi_check(void)
  23          {
  24   1        return wifi_wake_up(); //1:false  0: true
  25   1      }
  26          
  27          /**
  28            * @brief  智能配网（发送）
  29            * @param  none
  30            * @return none
  31            * @note   none
  32            * @see    none
  33            */
  34          unsigned char mmi_dq_wifi_setting(void)
  35          {
  36   1        unsigned char ret = 1;
  37   1        if (wifi_check_times > 0)
  38   1          return 0;
  39   1        wifi_wake_up();
  40   1        delay_ms(100);
  41   1        if (wifi_net_connect_send() == 0)
  42   1        {
  43   2          delay_ms(250);
  44   2          ret = wifi_net_connect_send();
  45   2        }
  46   1        if (ret == 1)
  47   1        {
  48   2          wifi_check_times = 1;
  49   2          mmi_dq_sys_set_wifi_check(0);
  50   2        }
  51   1        return ret;
  52   1      }
  53          
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 2   

  54          /**
  55            * @brief  Airkiss配网（发送）
  56            * @param  none
  57            * @return none
  58            * @note   none
  59            * @see    none
  60            */
  61          unsigned char mmi_dq_wifi_arikiss_con(void)
  62          {
  63   1        unsigned char ret = 1;
  64   1        if (wifi_check_times > 0)
  65   1          return 0;
  66   1        wifi_wake_up();
  67   1        delay_ms(100);
  68   1        if (wifi_net_airkiss_connect_send() == 0)
  69   1        {
  70   2          delay_ms(250);
  71   2          ret = wifi_net_airkiss_connect_send();
  72   2        }
  73   1        if (ret == 1)
  74   1        {
  75   2          wifi_check_times = 1;
  76   2          mmi_dq_sys_set_wifi_check(0);
  77   2        }
  78   1        return ret;
  79   1      }
  80          
  81          /**
  82            * @brief  二维码配网（发送）
  83            * @param  none
  84            * @return none
  85            * @note   none
  86            * @see    none
  87            */
  88          unsigned char mmi_dq_wifi_code_con(void)
  89          {
  90   1        unsigned char ret = 1;
  91   1        if (wifi_check_times > 0)
  92   1          return 0;
  93   1        wifi_wake_up();
  94   1        delay_ms(100);
  95   1        if (wifi_net_code_connect_send() == 0)
  96   1        {
  97   2          delay_ms(250);
  98   2          ret = wifi_net_code_connect_send();
  99   2        }
 100   1        if (ret == 1)
 101   1        {
 102   2          wifi_check_times = 1;
 103   2          mmi_dq_sys_set_wifi_check(0);
 104   2        }
 105   1        return ret;
 106   1      }
 107          
 108          /**
 109            * @brief  连网失败
 110            * @param  none
 111            * @return none
 112            * @note   none
 113            * @see    none
 114            */
 115          void mmi_dq_wifi_connected_fail(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 3   

 116          {
 117   1        //mmi_dq_fs_set_wifi_setting(0);
 118   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 119   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 120   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 121   1          mmi_dq_sys_wake_up();
 122   1      #ifdef __LOCK_AUDIO_SUPPORT__
 123   1        mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 124   1      #endif
 125   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 126   1        return;
 127   1      }
 128          
 129          /**
 130            * @brief  连网成功
 131            * @param  none
 132            * @return none
 133            * @note   none
 134            * @see    none
 135            */
 136          void mmi_dq_wifi_connected_suc(void)
 137          {
 138   1        //mmi_dq_fs_set_wifi_setting(1);
 139   1        if (SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
 140   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 141   1        else if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 142   1          mmi_dq_sys_wake_up();
 143   1      #ifdef __LOCK_AUDIO_SUPPORT__
 144   1        mmi_dq_aud_play_with_id(AUD_ID_SET_SUCESS);
 145   1      #endif
 146   1        return;
 147   1      }
 148          
 149          /**
 150            * @brief  配网状态（接收）
 151            * @param  none
 152            * @return none
 153            * @note   none
 154            * @see    none
 155            */
 156          void mmi_dq_wifi_check_connect(void)
 157          {
 158   1        static unsigned char wifi_check_connect_flag = 0;
 159   1        uint8_t retval = 0;
 160   1        wifi_check_times++;
 161   1        retval = wifi_net_connect_state();
 162   1        if (retval == 1)
 163   1        {
 164   2          wifi_check_connect_flag++;
 165   2          if (wifi_check_connect_flag >= 2)
 166   2          {
 167   3            mmi_dq_wifi_connected_suc();
 168   3            wifi_check_connect_flag = 0;
 169   3            wifi_check_times = 0;
 170   3            return;
 171   3          }
 172   2        }
 173   1        else
 174   1        {
 175   2          wifi_check_connect_flag = 0;
 176   2        }
 177   1      
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 4   

 178   1        if (wifi_check_times > 60 || retval == 2)
 179   1        {
 180   2          mmi_dq_wifi_connected_fail();
 181   2          wifi_check_times = 0;
 182   2        }
 183   1        else
 184   1          mmi_dq_sys_set_wifi_check(0);
 185   1      }
 186          
 187          /**
 188            * @brief  远程开门（发送）
 189            * @param  none
 190            * @return none
 191            * @note   none
 192            * @see    none
 193            */
 194          unsigned char mmi_dq_wifi_open_ask(void)
 195          {
 196   1        unsigned char ret = 1;
 197   1        if (wifi_check_times > 0)
 198   1          return 0;
 199   1        mmi_dq_wifi_wakeup();
 200   1        delay_ms(100);
 201   1        if (wifi_open_ask() == 0)
 202   1        {
 203   2          delay_ms(250);
 204   2          ret = wifi_open_ask();
 205   2        }
 206   1        if (ret == 1)
 207   1        {
 208   2          wifi_check_times = 1;
 209   2          mmi_dq_sys_set_wifi_check(1);
 210   2        }
 211   1        return ret;
 212   1      }
 213          
 214          /**
 215            * @brief  远程开门（接收）
 216            * @param  none
 217            * @return none
 218            * @note   none
 219            * @see    none
 220            */
 221          void mmi_dq_wifi_check_open(void)
 222          {
 223   1        unsigned char state = wifi_open_reply_get();
 224   1        wifi_check_times++;
 225   1        if (state == 1)
 226   1        {
 227   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 228   2            mmi_dq_sys_wake_up();
 229   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 230   2          wifi_check_times = 0;
 231   2        }
 232   1        else if (state == 2 || wifi_check_times > 30)
 233   1        {
 234   2          if (SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 235   2            mmi_dq_sys_wake_up();
 236   2          if (state == 2)
 237   2      #ifdef __LOCK_AUDIO_SUPPORT__
 238   2            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
 239   2      #endif
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 5   

 240   2                ;
 241   2          else if (mmi_dq_ms_get_sys_state() == SYS_STATUS_IDLE)
 242   2          {
 243   3      #ifdef __LOCK_AUDIO_SUPPORT__
 244   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 245   3      #endif
 246   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 247   3          }
 248   2          wifi_check_times = 0;
 249   2        }
 250   1        else
 251   1          mmi_dq_sys_set_wifi_check(1);
 252   1      }
 253          
 254          /**
 255            * @brief  添加删除密码/指纹/RF卡
 256            * @param  none
 257            * @return none
 258            * @note   none
 259            * @see    none
 260            */
 261          void mmi_dq_wifi_cmd_add_del(void)
 262          {
 263   1        uint16_t waittime = 100;
 264   1      
 265   1        while (--waittime)
 266   1        {
 267   2          delay_ms(1);
 268   2          if (wifi_cmd_add_del() != 0)
 269   2            break;
 270   2        }
 271   1      }
 272          
 273          /**
 274            * @brief  密码添加成功
 275            * @param  index
 276            * @return none
 277            * @note   none
 278            * @see    none
 279            */
 280          void mmi_dq_wifi_add_password(uint8_t index)
 281          {
 282   1        mmi_dq_wifi_wakeup();
 283   1      
 284   1        wifi_add_password(index);
 285   1      }
 286          
 287          /**
 288            * @brief  密码删除成功
 289            * @param  index
 290            * @return none
 291            * @note   none
 292            * @see    none
 293            */
 294          void mmi_dq_wifi_del_password(uint8_t index)
 295          {
 296   1        mmi_dq_wifi_wakeup();
 297   1      
 298   1        wifi_del_password(index);
 299   1      }
 300          
 301          /**
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 6   

 302            * @brief  指纹添加成功
 303            * @param  index
 304            * @return none
 305            * @note   none
 306            * @see    none
 307            */
 308          void mmi_dq_wifi_add_fp(uint8_t index)
 309          {
 310   1        mmi_dq_wifi_wakeup();
 311   1      
 312   1        wifi_add_fp(index);
 313   1      }
 314          
 315          /**
 316            * @brief  指纹删除成功
 317            * @param  none
 318            * @return none
 319            * @note   none
 320            * @see    none
 321            */
 322          void mmi_dq_wifi_del_fp(uint8_t index)
 323          {
 324   1        mmi_dq_wifi_wakeup();
 325   1      
 326   1        wifi_del_fp(index);
 327   1      }
 328          
 329          /**
 330            * @brief  RF卡添加成功
 331            * @param  index
 332            * @return none
 333            * @note   none
 334            * @see    none
 335            */
 336          void mmi_dq_wifi_add_rfid_suc(uint8_t index)
 337          {
 338   1        mmi_dq_wifi_wakeup();
 339   1      
 340   1        wifi_add_rf(index);
 341   1      }
 342          
 343          /**
 344            * @brief  RF卡删除成功
 345            * @param  index
 346            * @return none
 347            * @note   none
 348            * @see    none
 349            */
 350          void mmi_dq_wifi_del_rfid_suc(uint8_t index)
 351          {
 352   1        mmi_dq_wifi_wakeup();
 353   1      
 354   1        wifi_del_rf(index);
 355   1      }
 356          
 357          /**
 358            * @brief  密码全部清除
 359            * @param  none
 360            * @return none
 361            * @note   none
 362            * @see    none
 363            */
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 7   

 364          void mmi_dq_wifi_clr_pwd_suc(void)
 365          {
 366   1        mmi_dq_wifi_wakeup();
 367   1      
 368   1        wifi_clr_pwd();
 369   1      }
 370          
 371          /**
 372            * @brief  指纹全部清除
 373            * @param  none
 374            * @return none
 375            * @note   none
 376            * @see    none
 377            */
 378          void mmi_dq_wifi_clr_fps_suc(void)
 379          {
 380   1        mmi_dq_wifi_wakeup();
 381   1      
 382   1        wifi_clr_fp();
 383   1      }
 384          
 385          /**
 386            * @brief  RF卡全部清除
 387            * @param  none
 388            * @return none
 389            * @note   none
 390            * @see    none
 391            */
 392          void mmi_dq_wifi_clr_rfid_suc(void)
 393          {
 394   1        mmi_dq_wifi_wakeup();
 395   1      
 396   1        wifi_clr_rf();
 397   1      }
 398          
 399          /**
 400            * @brief  密码开门
 401            * @param  index
 402            * @return none
 403            * @note   none
 404            * @see    none
 405            */
 406          void mmi_dq_wifi_open_by_password(uint8_t index)
 407          {
 408   1        mmi_dq_wifi_wakeup();
 409   1      
 410   1        wifi_open_by_password(index);
 411   1      }
 412          
 413          /**
 414            * @brief  指纹开门
 415            * @param  index
 416            * @return none
 417            * @note   none
 418            * @see    none
 419            */
 420          void mmi_dq_wifi_open_by_fp(uint8_t index)
 421          {
 422   1        mmi_dq_wifi_wakeup();
 423   1      
 424   1        wifi_open_by_fp(index);
 425   1      }
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 8   

 426          
 427          /**
 428            * @brief  RF卡开门
 429            * @param  index
 430            * @return none
 431            * @note   none
 432            * @see    none
 433            */
 434          void mmi_dq_wifi_open_by_rfid(uint8_t index)
 435          {
 436   1        mmi_dq_wifi_wakeup();
 437   1      
 438   1        wifi_open_by_rfid(index);
 439   1      }
 440          
 441          /**
 442            * @brief  远程开门成功
 443            * @param  none
 444            * @return none
 445            * @note   none
 446            * @see    none
 447            */
 448          void mmi_dq_wifi_open_by_wifi(void)
 449          {
 450   1        mmi_dq_wifi_wakeup();
 451   1      
 452   1        wifi_open_by_wifi();
 453   1      }
 454          
 455          /**
 456            * @brief  应急钥匙开门成功
 457            * @param  none
 458            * @return none
 459            * @note   none
 460            * @see    none
 461            */
 462          void mmi_dq_wifi_open_by_key(void)
 463          {
 464   1        mmi_dq_wifi_wakeup();
 465   1      
 466   1        wifi_open_by_key();
 467   1      }
 468          
 469          /**
 470            * @brief  门未关
 471            * @param  none
 472            * @return none
 473            * @note   none
 474            * @see    none
 475            */
 476          void mmi_dq_wifi_close_over_time(void)
 477          {
 478   1        wifi_close_over_time();
 479   1      }
 480          
 481          /*
 482          parameter: 
 483            none
 484          return :
 485            none
 486          */
 487          void mmi_dq_wifi_door_close(void)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 9   

 488          {
 489   1        wifi_door_close();
 490   1      }
 491          
 492          /**
 493            * @brief  震动报警
 494            * @param  none
 495            * @return none
 496            * @note   none
 497            * @see    none
 498            */
 499          void mmi_dq_wifi_via_alarm(void)
 500          {
 501   1        mmi_dq_wifi_wakeup();
 502   1      
 503   1        wifi_via_alarm();
 504   1      }
 505          
 506          /**
 507            * @brief  多次密码错误
 508            * @param  none
 509            * @return none
 510            * @note   none
 511            * @see    none
 512            */
 513          void mmi_dq_wifi_pw_alarm(void)
 514          {
 515   1        mmi_dq_wifi_wakeup();
 516   1      
 517   1        wifi_pw_alarm();
 518   1      }
 519          
 520          /**
 521            * @brief  多次指纹错误
 522            * @param  none
 523            * @return none
 524            * @note   none
 525            * @see    none
 526            */
 527          void mmi_dq_wifi_fp_alarm(void)
 528          {
 529   1        mmi_dq_wifi_wakeup();
 530   1      
 531   1        wifi_fp_alarm();
 532   1      }
 533          
 534          /**
 535            * @brief  多次RF卡错误
 536            * @param  none
 537            * @return none
 538            * @note   none
 539            * @see    none
 540            */
 541          void mmi_dq_wifi_rfid_alarm(void)
 542          {
 543   1        mmi_dq_wifi_wakeup();
 544   1      
 545   1        wifi_rf_alarm();
 546   1      }
 547          
 548          /**
 549            * @brief  低电量
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 10  

 550            * @param  none
 551            * @return none
 552            * @note   none
 553            * @see    none
 554            */
 555          void mmi_dq_wifi_lowpower_alarm(void)
 556          {
 557   1        static uint8_t wifi_lowpower_flag = 0;
 558   1        if (wifi_lowpower_flag == 0)
 559   1        {
 560   2          wifi_lowpower_flag = 1;
 561   2          mmi_dq_wifi_wakeup();
 562   2      
 563   2          wifi_lowpower_alarm();
 564   2        }
 565   1      }
 566          
 567          /**
 568            * @brief  睡眠
 569            * @param  none
 570            * @return none
 571            * @note   none
 572            * @see    none
 573            */
 574          void mmi_dq_wifi_sleep(void)
 575          {
 576   1        wifi_sleep_mode();
 577   1      }
 578          
 579          /**
 580            * @brief  唤醒
 581            * @param  none
 582            * @return none
 583            * @note   none
 584            * @see    none
 585            */
 586          void mmi_dq_wifi_wakeup(void)
 587          {
 588   1        wifi_wake_up();
 589   1      
 590   1        delay_ms(150);
 591   1      }
 592          
 593          /**
 594            * @brief  拍照
 595            * @param  none
 596            * @return none
 597            * @note   none
 598            * @see    none
 599            */
 600          void mmi_dq_wifi_take_photos(void)
 601          {
 602   1        mmi_dq_wifi_wakeup();
 603   1      
 604   1        if (wifi_take_photos() == 1)
 605   1      #ifdef __LOCK_AUDIO_SUPPORT__
 606   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 607   1      #endif
 608   1              ;
 609   1      }
 610          
 611          /**
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 11  

 612            * @brief  录像
 613            * @param  none
 614            * @return none
 615            * @note   none
 616            * @see    none
 617            */
 618          void mmi_dq_wifi_take_videos(void)
 619          {
 620   1        mmi_dq_wifi_wakeup();
 621   1      
 622   1        if (wifi_take_videos() == 1)
 623   1      #ifdef __LOCK_AUDIO_SUPPORT__
 624   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 625   1      #endif
 626   1              ;
 627   1      }
 628          
 629          /**
 630            * @brief  拍照录像开关
 631            * @param  none
 632            * @return none
 633            * @note   none
 634            * @see    none
 635            */
 636          void mmi_dq_wifi_pv_switch(void)
 637          {
 638   1        uint8_t retval;
 639   1        uint16_t waittime = 100;
 640   1      
 641   1        mmi_dq_wifi_wakeup();
 642   1        wifi_pv_switch_send();
 643   1      
 644   1        while (--waittime)
 645   1        {
 646   2          delay_ms(1);
 647   2          retval = wifi_pv_switch_get();
 648   2          if (retval != 0xff)
 649   2            break;
 650   2        }
 651   1      }
 652          
 653          /**
 654            * @brief  检查网络状态
 655            * @param  none
 656            * @return none
 657            * @note   none
 658            * @see    none
 659            */
 660          void mmi_dq_wifi_check_net(void)
 661          {
 662   1        if (wifi_check_net() == 1)
 663   1      #ifdef __LOCK_AUDIO_SUPPORT__
 664   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS)
 665   1      #endif
 666   1              ;
 667   1        else
 668   1      #ifdef __LOCK_AUDIO_SUPPORT__
 669   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL)
 670   1      #endif
 671   1              ;
 672   1      }
 673          
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 12  

 674          /**
 675            * @brief  协迫密码开门
 676            * @param  index
 677            * @return none
 678            * @note   none
 679            * @see    none
 680            */
 681          void mmi_dq_wifi_send_pwd_110(uint8_t index)
 682          {
 683   1        mmi_dq_wifi_wakeup();
 684   1        wifi_send_pwd_110();
 685   1        delay_ms(20);
 686   1        wifi_open_by_password(index);
 687   1      }
 688          
 689          /**
 690            * @brief  协迫密码开门
 691            * @param  index
 692            * @return none
 693            * @note   none
 694            * @see    none
 695            */
 696          void mmi_dq_wifi_send_fp_110(uint8_t index)
 697          {
 698   1        mmi_dq_wifi_wakeup();
 699   1        wifi_send_fp_110();
 700   1        delay_ms(20);
 701   1        wifi_open_by_fp(index);
 702   1      }
 703          
 704          /*
 705          parameter: 
 706            none
 707          return :
 708            none
 709          */
 710          void mmi_dq_wifi_set_110(void)
 711          {
 712   1        mmi_dq_wifi_wakeup();
 713   1        wifi_set_110();
 714   1      }
 715          
 716          /*
 717          parameter: 
 718            none
 719          return :
 720            none
 721          */
 722          unsigned char mmi_dq_wifi_get_running_flag(void)
 723          {
 724   1        if (wifi_check_times > 0)
 725   1          return 1;
 726   1        return 0;
 727   1      }
 728          #endif
 729          #endif //__MMI_WIFI_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1060    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8      21
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          04/19/2021 17:37:56 PAGE 13  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
