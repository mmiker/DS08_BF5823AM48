<<<<<<< HEAD
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 1   
=======
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 1   
>>>>>>> six commit


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_WIFI
OBJECT MODULE PLACED IN .\output\mmi_wifi.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_wifi.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;
                    -.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_r
                    -fid;.\mmi_inc) DEBUG PRINT(.\list\mmi_wifi.lst) TABS(2) OBJECT(.\output\mmi_wifi.obj)

line level    source

   1          #ifndef __MMI_WIFI_C__
   2          #define __MMI_WIFI_C__
   3          
<<<<<<< HEAD
   4          #include "dqiot_drv_wifi.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_ms.h"
   7          #include "mmi_audio.h"
   8          #include "mmi_fs.h"
   9          #include "delay.h"
  10          
  11          static unsigned int wifi_check_times = 0;
  12          
  13          
  14          /*
  15          parameter: 
  16            none
  17          return :
  18            none
  19          */
  20          void mmi_dq_wifi_wakeup(void)
  21          {
  22   1        wifi_wake_up();
  23   1      }
  24          
  25          /*
  26          parameter: 
  27            none
  28          return :
  29            none
  30          */
  31          void mmi_dq_wifi_sleep(void)
  32          {
  33   1        wifi_sleep_mode();
  34   1      }
  35          
  36          /*
  37          parameter: 
  38            none
  39          return :
  40            none
  41          */
  42          unsigned char mmi_dq_wifi_setting(void)
  43          {
  44   1        unsigned char ret = 1;
  45   1        wifi_wake_up();
  46   1        delay_ms(250);
  47   1        if(wifi_net_connect_send() == 0)
  48   1        {
  49   2          delay_ms(250);
  50   2          ret = wifi_net_connect_send();
  51   2        }
  52   1        if(ret == 1)
  53   1          wifi_check_times = 0;
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 2   

  54   1        return ret;
  55   1      }
  56          
  57          /*
  58          parameter: 
  59            none
  60          return :
  61            none
  62          */
  63          void mmi_dq_wifi_connected_fail(void)
  64          {
  65   1        mmi_dq_fs_set_wifi_setting(0);
  66   1        if(SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  67   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  68   1        else if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  69   1          mmi_dq_sys_wake_up();
  70   1        mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
  71   1        return;
  72   1      }
  73          
  74          /*
  75          parameter: 
  76            none
  77          return :
  78            none
  79          */
  80          void mmi_dq_wifi_connected_suc(void)
  81          { 
  82   1        mmi_dq_fs_set_wifi_setting(1);
  83   1        if(SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  84   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  85   1        else if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  86   1          mmi_dq_sys_wake_up();
  87   1        mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
  88   1        return;
  89   1      }
  90          
  91          /*
  92          parameter: 
  93            none
  94          return :
  95            none
  96          */
  97          void mmi_dq_wifi_check_connect(void)
  98          {
  99   1        wifi_check_times++;
 100   1        if(wifi_net_connect_state() == 1)
 101   1          mmi_dq_wifi_connected_suc();
 102   1        else if(wifi_check_times >= 150)
 103   1          mmi_dq_wifi_connected_fail();
 104   1        else
 105   1          mmi_dq_sys_set_wifi_check();
 106   1      }
 107          
 108          /*
 109          parameter: 
 110            none
 111          return :
 112            none
 113          */
 114          unsigned char mmi_dq_wifi_open_ask(void)
 115          {
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 3   

 116   1        mmi_dq_wifi_wakeup();
 117   1        delay_ms(250);
 118   1        if(wifi_open_ask() == 0)
 119   1        {
 120   2          delay_ms(250);
 121   2          return wifi_open_ask();
 122   2        }
 123   1        else
 124   1          return 1;
 125   1      }
 126          
 127          
 128          /*
 129          parameter: 
 130            none
 131          return :
 132            none
 133          */
 134          void mmi_dq_wifi_add_password(void)
 135          {
 136   1        mmi_dq_wifi_wakeup();
 137   1      
 138   1        delay_ms(150);
 139   1        wifi_add_password();
 140   1      }
 141          
 142          /*
 143          parameter: 
 144            none
 145          return :
 146            none
 147          */
 148          void mmi_dq_wifi_del_password(void)
 149          {
 150   1        mmi_dq_wifi_wakeup();
 151   1      
 152   1        delay_ms(150);
 153   1      
 154   1        wifi_del_password();
 155   1      }
 156          
 157          /*
 158          parameter: 
 159            none
 160          return :
 161            none
 162          */
 163          void mmi_dq_wifi_add_fp(void)
 164          {
 165   1        mmi_dq_wifi_wakeup();
 166   1      
 167   1        delay_ms(150);
 168   1      
 169   1        wifi_add_fp();
 170   1      }
 171          
 172          /*
 173          parameter: 
 174            none
 175          return :
 176            none
 177          */
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 4   

 178          void mmi_dq_wifi_del_fp(void)
 179          {
 180   1        mmi_dq_wifi_wakeup();
 181   1      
 182   1        delay_ms(150);
 183   1      
 184   1        wifi_del_fp();
 185   1      }
 186          
 187          /*
 188          parameter: 
 189            none
 190          return :
 191            none
 192          */
 193          void mmi_dq_wifi_open_by_password(void)
 194          {
 195   1        mmi_dq_wifi_wakeup();
 196   1      
 197   1        delay_ms(100);
 198   1      
 199   1        wifi_open_by_password();
 200   1      }
 201          
 202          /*
 203          parameter: 
 204            none
 205          return :
 206            none
 207          */
 208          void mmi_dq_wifi_open_by_fp(void)
 209          {
 210   1        mmi_dq_wifi_wakeup();
 211   1      
 212   1        delay_ms(150);
 213   1      
 214   1        wifi_open_by_fp();
 215   1      }
 216          
 217          /*
 218          parameter: 
 219            none
 220          return :
 221            none
 222          */
 223          void mmi_dq_wifi_open_by_key(void)
 224          {
 225   1        mmi_dq_wifi_wakeup();
 226   1      
 227   1        delay_ms(150);
 228   1      
 229   1        wifi_open_by_key();
 230   1      }
 231          
 232          /*
 233          parameter: 
 234            none
 235          return :
 236            none
 237          */
 238          void mmi_dq_wifi_open_by_wifi(void)
 239          {
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 5   

 240   1      
 241   1        wifi_open_by_wifi();
 242   1      }
 243          
 244          /*
 245          parameter: 
 246            none
 247          return :
 248            none
 249          */
 250          void mmi_dq_wifi_door_close(void)
 251          {
 252   1      
 253   1        wifi_door_close();
 254   1      }
 255          
 256          /*
 257          parameter: 
 258            none
 259          return :
 260            none
 261          */
 262          void mmi_dq_wifi_via_alarm(void)
 263          {
 264   1        mmi_dq_wifi_wakeup();
 265   1      
 266   1        delay_ms(150);
 267   1      
 268   1        wifi_via_alarm();
 269   1      }
 270          
 271          /*
 272          parameter: 
 273            none
 274          return :
 275            none
 276          */
 277          void mmi_dq_wifi_pw_alarm(void)
 278          {
 279   1        mmi_dq_wifi_wakeup();
 280   1      
 281   1        delay_ms(150);
 282   1      
 283   1        wifi_pw_alarm();
 284   1      }
 285          
 286          /*
 287          parameter: 
 288            none
 289          return :
 290            none
 291          */
 292          void mmi_dq_wifi_fp_alarm(void)
 293          {
 294   1        mmi_dq_wifi_wakeup();
 295   1      
 296   1        delay_ms(150);
 297   1      
 298   1        wifi_fp_alarm();
 299   1      }
 300          
 301          /*
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/24/2021 17:19:11 PAGE 6   

 302          parameter: 
 303            none
 304          return :
 305            none
 306          */
 307          void mmi_dq_wifi_lowpower_alarm(void)
 308          {
 309   1        static uint8_t wifi_lowpower_flag = 0;
 310   1        if(wifi_lowpower_flag == 0)
 311   1        {
 312   2          wifi_lowpower_flag = 1;
 313   2          mmi_dq_wifi_wakeup();
 314   2      
 315   2          delay_ms(150);
 316   2        
 317   2          wifi_lowpower_alarm();
 318   2        }
 319   1      }
 320          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    363    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7       1
=======
   4          #include "mmi_feature.h"
   5          #include "dqiot_drv_wifi.h"
   6          #include "mmi_sys.h"
   7          #include "mmi_ms.h"
   8          #include "mmi_audio.h"
   9          #include "mmi_fs.h"
  10          #include "delay.h"
  11          
  12          static unsigned int wifi_check_times = 0;
  13          
  14          
  15          /*
  16          parameter: 
  17            none
  18          return :
  19            none
  20          */
  21          void mmi_dq_wifi_wakeup(void)
  22          {
  23   1        wifi_wake_up();
  24   1      }
  25          
  26          /*
  27          parameter: 
  28            none
  29          return :
  30            none
  31          */
  32          void mmi_dq_wifi_sleep(void)
  33          {
  34   1        wifi_sleep_mode();
  35   1      }
  36          
  37          /*
  38          parameter: 
  39            none
  40          return :
  41            none
  42          */
  43          unsigned char mmi_dq_wifi_setting(void)
  44          {
  45   1        unsigned char ret = 1;
  46   1        wifi_wake_up();
  47   1        delay_ms(250);
  48   1        if(wifi_net_connect_send() == 0)
  49   1        {
  50   2          delay_ms(250);
  51   2          ret = wifi_net_connect_send();
  52   2        }
  53   1        if(ret == 1)
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 2   

  54   1        {
  55   2          wifi_check_times = 1;
  56   2          mmi_dq_sys_set_wifi_check(0);
  57   2        }
  58   1        return ret;
  59   1      }
  60          
  61          /*
  62          parameter: 
  63            none
  64          return :
  65            none
  66          */
  67          void mmi_dq_wifi_connected_fail(void)
  68          {
  69   1        mmi_dq_fs_set_wifi_setting(0);
  70   1        if(SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  71   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  72   1        else if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  73   1          mmi_dq_sys_wake_up();
  74   1        mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
  75   1        return;
  76   1      }
  77          
  78          /*
  79          parameter: 
  80            none
  81          return :
  82            none
  83          */
  84          void mmi_dq_wifi_connected_suc(void)
  85          { 
  86   1        mmi_dq_fs_set_wifi_setting(1);
  87   1        if(SYS_STATUS_WIFI_MODE == mmi_dq_ms_get_sys_state())
  88   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  89   1        else if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
  90   1          mmi_dq_sys_wake_up();
  91   1        mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
  92   1        return;
  93   1      }
  94          
  95          /*
  96          parameter: 
  97            none
  98          return :
  99            none
 100          */
 101          void mmi_dq_wifi_check_connect(void)
 102          {
 103   1        static unsigned char wifi_check_connect_flag = 0;
 104   1        wifi_check_times++;
 105   1        if(wifi_net_connect_state() == 1)
 106   1        {
 107   2          wifi_check_connect_flag++;
 108   2          if(wifi_check_connect_flag>=2)
 109   2          {
 110   3            mmi_dq_wifi_connected_suc();
 111   3            wifi_check_connect_flag = 0;
 112   3            wifi_check_times = 0;
 113   3            return;
 114   3          }
 115   2        }
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 3   

 116   1        else
 117   1        {
 118   2          wifi_check_connect_flag = 0;
 119   2        }
 120   1        
 121   1        if(wifi_check_times > 600)
 122   1        {
 123   2          mmi_dq_wifi_connected_fail();
 124   2          wifi_check_times = 0;
 125   2        }
 126   1        else
 127   1          mmi_dq_sys_set_wifi_check(0);
 128   1      }
 129          
 130          /*
 131          parameter: 
 132            none
 133          return :
 134            none
 135          */
 136          unsigned char mmi_dq_wifi_open_ask(void)
 137          {
 138   1        unsigned char ret = 1;
 139   1        if(wifi_check_times > 0)
 140   1          return 0;
 141   1        mmi_dq_wifi_wakeup();
 142   1        delay_ms(250);
 143   1        if(wifi_open_ask() == 0)
 144   1        {
 145   2          delay_ms(250);
 146   2          ret =  wifi_open_ask();
 147   2        }
 148   1        if(ret == 1)
 149   1        {
 150   2          wifi_check_times = 1;
 151   2          mmi_dq_sys_set_wifi_check(1);
 152   2        }
 153   1        return ret;
 154   1      }
 155          
 156          /*
 157          parameter: 
 158            none
 159          return :
 160            none
 161          */
 162          void mmi_dq_wifi_check_open(void)
 163          {
 164   1        unsigned char state = wifi_open_reply_get();
 165   1        wifi_check_times++;
 166   1        if(state == 1)
 167   1        {
 168   2          if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 169   2            mmi_dq_sys_wake_up();
 170   2          mmi_dq_sys_door_open(SYS_OPEN_BY_WIFI);
 171   2          wifi_check_times = 0;
 172   2        }
 173   1        else if(state == 2 || wifi_check_times > 300)
 174   1        {
 175   2          if(SYS_STATUS_ENTER_SLEEP == mmi_dq_ms_get_sys_state())
 176   2            mmi_dq_sys_wake_up();
 177   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 4   

 178   2          wifi_check_times = 0;
 179   2        }
 180   1        else
 181   1          mmi_dq_sys_set_wifi_check(1);
 182   1      
 183   1      }
 184          
 185          
 186          /*
 187          parameter: 
 188            none
 189          return :
 190            none
 191          */
 192          void mmi_dq_wifi_add_password(void)
 193          {
 194   1        mmi_dq_wifi_wakeup();
 195   1      
 196   1        delay_ms(150);
 197   1        wifi_add_password();
 198   1      }
 199          
 200          /*
 201          parameter: 
 202            none
 203          return :
 204            none
 205          */
 206          void mmi_dq_wifi_del_password(void)
 207          {
 208   1        mmi_dq_wifi_wakeup();
 209   1      
 210   1        delay_ms(150);
 211   1      
 212   1        wifi_del_password();
 213   1      }
 214          
 215          /*
 216          parameter: 
 217            none
 218          return :
 219            none
 220          */
 221          void mmi_dq_wifi_add_fp(void)
 222          {
 223   1        mmi_dq_wifi_wakeup();
 224   1      
 225   1        delay_ms(150);
 226   1      
 227   1        wifi_add_fp();
 228   1      }
 229          
 230          /*
 231          parameter: 
 232            none
 233          return :
 234            none
 235          */
 236          void mmi_dq_wifi_del_fp(void)
 237          {
 238   1        mmi_dq_wifi_wakeup();
 239   1      
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 5   

 240   1        delay_ms(150);
 241   1      
 242   1        wifi_del_fp();
 243   1      }
 244          
 245          /*
 246          parameter: 
 247            none
 248          return :
 249            none
 250          */
 251          void mmi_dq_wifi_open_by_password(void)
 252          {
 253   1        mmi_dq_wifi_wakeup();
 254   1      
 255   1        delay_ms(100);
 256   1      
 257   1        wifi_open_by_password();
 258   1      }
 259          
 260          /*
 261          parameter: 
 262            none
 263          return :
 264            none
 265          */
 266          void mmi_dq_wifi_open_by_fp(void)
 267          {
 268   1        mmi_dq_wifi_wakeup();
 269   1      
 270   1        delay_ms(150);
 271   1      
 272   1        wifi_open_by_fp();
 273   1      }
 274          
 275          /*
 276          parameter: 
 277            none
 278          return :
 279            none
 280          */
 281          void mmi_dq_wifi_open_by_rfid(void)
 282          {
 283   1        mmi_dq_wifi_wakeup();
 284   1      
 285   1        delay_ms(150);
 286   1      
 287   1        wifi_open_by_rfid();
*** WARNING C206 IN LINE 287 OF mmi_src\mmi_wifi.c: 'wifi_open_by_rfid': missing function-prototype
 288   1      }
 289          
 290          
 291          /*
 292          parameter: 
 293            none
 294          return :
 295            none
 296          */
 297          void mmi_dq_wifi_open_by_key(void)
 298          {
 299   1        mmi_dq_wifi_wakeup();
 300   1      
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 6   

 301   1        delay_ms(150);
 302   1      
 303   1        wifi_open_by_key();
 304   1      }
 305          
 306          /*
 307          parameter: 
 308            none
 309          return :
 310            none
 311          */
 312          void mmi_dq_wifi_open_by_wifi(void)
 313          {
 314   1      
 315   1        wifi_open_by_wifi();
 316   1      }
 317          
 318          /*
 319          parameter: 
 320            none
 321          return :
 322            none
 323          */
 324          void mmi_dq_wifi_door_close(void)
 325          {
 326   1      
 327   1        wifi_door_close();
 328   1      }
 329          
 330          /*
 331          parameter: 
 332            none
 333          return :
 334            none
 335          */
 336          void mmi_dq_wifi_via_alarm(void)
 337          {
 338   1        mmi_dq_wifi_wakeup();
 339   1      
 340   1        delay_ms(150);
 341   1      
 342   1        wifi_via_alarm();
 343   1      }
 344          
 345          /*
 346          parameter: 
 347            none
 348          return :
 349            none
 350          */
 351          void mmi_dq_wifi_pw_alarm(void)
 352          {
 353   1        mmi_dq_wifi_wakeup();
 354   1      
 355   1        delay_ms(150);
 356   1      
 357   1        wifi_pw_alarm();
 358   1      }
 359          
 360          /*
 361          parameter: 
 362            none
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 7   

 363          return :
 364            none
 365          */
 366          void mmi_dq_wifi_fp_alarm(void)
 367          {
 368   1        mmi_dq_wifi_wakeup();
 369   1      
 370   1        delay_ms(150);
 371   1      
 372   1        wifi_fp_alarm();
 373   1      }
 374          
 375          /*
 376          parameter: 
 377            none
 378          return :
 379            none
 380          */
 381          void mmi_dq_wifi_rfid_alarm(void)
 382          {
 383   1        mmi_dq_wifi_wakeup();
 384   1      
 385   1        delay_ms(150);
 386   1      
 387   1        wifi_rf_alarm();
*** WARNING C206 IN LINE 387 OF mmi_src\mmi_wifi.c: 'wifi_rf_alarm': missing function-prototype
 388   1      }
 389          
 390          
 391          /*
 392          parameter: 
 393            none
 394          return :
 395            none
 396          */
 397          void mmi_dq_wifi_lowpower_alarm(void)
 398          {
 399   1        static uint8_t wifi_lowpower_flag = 0;
 400   1        if(wifi_lowpower_flag == 0)
 401   1        {
 402   2          wifi_lowpower_flag = 1;
 403   2          mmi_dq_wifi_wakeup();
 404   2      
 405   2          delay_ms(150);
 406   2        
 407   2          wifi_lowpower_alarm();
 408   2        }
 409   1      }
 410          
 411          /*
 412          parameter: 
 413            none
 414          return :
 415            none
 416          */
 417          unsigned char mmi_dq_wifi_get_running_flag(void)
 418          {
 419   1        if(wifi_check_times>0)
 420   1          return 1;
 421   1        return 0;
 422   1      }
 423          
C51 COMPILER V9.59.0.0   MMI_WIFI                                                          02/25/2021 17:43:03 PAGE 8   

 424          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    606    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       3
>>>>>>> six commit
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


<<<<<<< HEAD
C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
=======
C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
>>>>>>> six commit
