C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          // extern void printfS(char *show, char *status);
  18          // extern void printfV(char *show, int value);
  19          
  20          static unsigned char g_sys_door_open_flag = 0;
  21          
  22          static unsigned int g_timer2_sleep_count = 0;
  23          static unsigned int g_timer2_count = 0;
  24          static unsigned int g_timer2_set_count = 0;
  25          static unsigned char g_timer2_flag = 0;
  26          
  27          static unsigned char g_wifi_check_flag = 0;
  28          static unsigned char g_wifi_check_count = 0;
  29          static unsigned char g_wifi_check_type = 0;
  30          
  31          /* RFID */
  32          static unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_TIMER_WIFI_CHECK 1000
  50          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  51          #define MMI_WIFI_SETTING_DELAY 60000
  52          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  53          #define MMI_LOCK_ERROR_DELAY 60000
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 2   

  54          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  55          /*
  56          parameter: 
  57            none
  58          return :
  59            none
  60          */
  61          void mmi_dq_sys_init(void)
  62          {
  63   1        mmi_InitQueue();
  64   1        mmi_ms_pwd_init_var();
  65   1        mmi_dq_fs_init();
  66   1      }
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  74          {
  75   1        unsigned char audio_id = 0;
  76   1      
  77   1        time_msec = 0;
  78   1      
  79   1      #ifdef __LOCK_AUDIO_SUPPORT__
  80   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  81   1      
  82   1        mmi_dq_aud_play_with_id(audio_id);
  83   1      
  84   1      #endif
  85   1        return;
  86   1      }
  87          
  88          /*
  89          parameter: 
  90            none
  91          return :
  92            none
  93          */
  94          void mmi_dq_sys_lock_add_admin_suc(void)
  95          {
  96   1        mmi_dq_fs_set_admin_status(1);
  97   1      
  98   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  99   1      }
 100          
 101          /*
 102          function: system enter sleep
 103          parameter: 
 104            none
 105          return :
 106            none
 107          */
 108          void mmi_dq_sys_enter_sleep(void)
 109          {
 110   1        mmi_dq_bsp_enter_sleep();
 111   1      
 112   1        g_timer2_flag = 0;
 113   1        g_sys_door_open_flag = 0;
 114   1      
 115   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 3   

 116   1      }
 117          
 118          /*
 119          function: system wake up
 120          parameter: 
 121            none
 122          return :
 123            none
 124          */
 125          void mmi_dq_sys_wake_up(void)
 126          {
 127   1      
 128   1        mmi_dq_bsp_wake_up();
 129   1        if (mmi_dq_sys_check_vbat() == 0)
 130   1        {
 131   2      #ifdef __LOCK_WIFI_SUPPORT__
 132   2          mmi_dq_wifi_wakeup();
 133   2      #endif
 134   2      #ifdef __LOCK_FP_SUPPORT__
 135   2          mmi_dq_fp_init(); //握手、点灯
 136   2      #endif
 137   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 138   2        }
 139   1      }
 140          
 141          /*
 142          function: 
 143          parameter: 
 144            none
 145          return :
 146            none
 147          */
 148          void mmi_dq_sys_door_open_cb(void)
 149          {
 150   1      #ifdef __LOCK_MOTOR_SUPPORT__
 151   1        mmi_dq_motor_stop();
 152   1      #endif
 153   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 154   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 155   1      }
 156          
 157          /*
 158          function: 
 159          parameter: 
 160            none
 161          return :
 162            none
 163          */
 164          void mmi_dq_sys_door_open(sys_open_type type)
 165          {
 166   1      #ifdef __LOCK_BUS_SUPPORT__
 167   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 168   1        {
 169   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 170   2      #ifdef __LOCK_WIFI_SUPPORT__
 171   2          switch (type)
 172   2          {
 173   3          case SYS_OPEN_BY_PASSWORD:
 174   3            mmi_dq_wifi_pw_alarm();
 175   3            break;
 176   3          case SYS_OPEN_BY_FP:
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 4   

 177   3            mmi_dq_wifi_fp_alarm();
 178   3            break;
 179   3          case SYS_OPEN_BY_RFID:
 180   3            mmi_dq_wifi_rfid_alarm();
 181   3            break;
 182   3          }
 183   2      #endif
 184   2          return;
 185   2        }
 186   1      #endif
 187   1        g_lock_error_flag = 0;
 188   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 189   1        {
 190   2          if ((g_sys_door_open_flag & (~type)) != 0)
 191   2          {
 192   3            g_sys_door_open_flag = 0;
 193   3          }
 194   2          else
 195   2          {
 196   3            g_sys_door_open_flag |= type;
 197   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 198   3            return;
 199   3          }
 200   2        }
 201   1      
 202   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 203   1      
 204   1      #ifdef __LOCK_MOTOR_SUPPORT__
 205   1        mmi_dq_motor_turn_right();
 206   1      #endif
 207   1        //mmi_dq_wifi_open_door();
 208   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 209   1      
 210   1      #ifdef __LOCK_WIFI_SUPPORT__
 211   1        switch (type)
 212   1        {
 213   2      #ifdef __LOCK_110_SUPPORT__
 214   2        case SYS_OPEN_BY_110_PASSWORD:
 215   2          mmi_dq_wifi_send_pwd_110(get_index);
 216   2          // printfV("get_index",(int)get_index);
 217   2          break;
 218   2        case SYS_OPEN_BY_110_FP:
 219   2          mmi_dq_wifi_send_fp_110(get_index);
 220   2          // printfV("get_index",(int)get_index);
 221   2          break;
 222   2      #endif
 223   2        case SYS_OPEN_BY_PASSWORD:
 224   2          mmi_dq_wifi_open_by_password(get_index);
 225   2          // printfV("get_index",(int)get_index);
 226   2          break;
 227   2      #ifdef __LOCK_FP_SUPPORT__
 228   2        case SYS_OPEN_BY_FP:
 229   2          mmi_dq_wifi_open_by_fp(get_index);
 230   2          // printfV("get_index",(int)get_index);
 231   2          break;
 232   2      #endif
 233   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 234   2        case SYS_OPEN_BY_RFID:
 235   2          mmi_dq_wifi_open_by_rfid(get_index);
 236   2          // printfV("get_index",(int)get_index);
 237   2          break;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 5   

 238   2      #endif
 239   2        case SYS_OPEN_BY_WIFI:
 240   2          mmi_dq_wifi_open_by_wifi();
 241   2          break;
 242   2        }
 243   1      
 244   1        mmi_dq_wifi_take_photos(); //拍照
 245   1      #endif
 246   1      }
 247          
 248          /*
 249          function: 
 250          parameter: 
 251            none
 252          return :
 253            none
 254          */
 255          void mmi_dq_sys_door_open_fail(sys_open_type type)
 256          {
 257   1        g_lock_error_count = 0;
 258   1        g_lock_error_flag++;
 259   1        switch (type)
 260   1        {
 261   2        case SYS_OPEN_BY_PASSWORD:
 262   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 263   2      #ifdef __LOCK_WIFI_SUPPORT__
 264   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 265   2            mmi_dq_wifi_pw_alarm();
 266   2      #endif
 267   2          break;
 268   2      #ifdef __LOCK_FP_SUPPORT__
 269   2        case SYS_OPEN_BY_FP:
 270   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 271   2      #ifdef __LOCK_WIFI_SUPPORT__
 272   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 273   2            mmi_dq_wifi_fp_alarm();
 274   2      #endif
 275   2          break;
 276   2      #endif
 277   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 278   2        case SYS_OPEN_BY_RFID:
 279   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 280   2      #ifdef __LOCK_WIFI_SUPPORT__
 281   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 282   2            mmi_dq_wifi_rfid_alarm();
 283   2      #endif
 284   2          break;
 285   2      #endif
 286   2        }
 287   1      }
 288          
 289          /*
 290          function: 
 291          parameter: 
 292            none
 293          return :
 294            none
 295          */
 296          unsigned char mmi_dq_sys_door_state_check(void)
 297          {
 298   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 299   1          return 1;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 6   

 300   1        return 0;
 301   1      }
 302          
 303          /*
 304          function: 
 305          parameter: 
 306            none
 307          return :
 308            none
 309          */
 310          void mmi_dq_sys_door_close_cb(void)
 311          {
 312   1      #ifdef __LOCK_MOTOR_SUPPORT__
 313   1        mmi_dq_motor_stop();
 314   1      #endif
 315   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 316   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 317   1      }
 318          
 319          /*
 320          function: 
 321          parameter: 
 322            none
 323          return :
 324            none
 325          */
 326          void mmi_dq_sys_door_close(void)
 327          {
 328   1      #ifdef __LOCK_MOTOR_SUPPORT__
 329   1        mmi_dq_motor_turn_back();
 330   1      #endif
 331   1        //mmi_dq_wifi_close_door();
 332   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 333   1      }
 334          
 335          /*
 336          function: 
 337          parameter: 
 338            none
 339          return :
 340            none
 341          */
 342          void mmi_dq_sys_aud_end(void)
 343          {
 344   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 345   1      }
 346          
 347          /*
 348          function: 
 349          parameter: 
 350            none
 351          return :
 352            none
 353          */
 354          void mmi_dq_sys_time_out_handle(void)
 355          {
 356   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 357   1      
 358   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 359   1        {
 360   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 7   

 361   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 362   2        }
 363   1      #ifdef __LOCK_FP_SUPPORT__
 364   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 365   1        {
 366   2          if (mmi_dq_fs_get_admin_status() == 0)
 367   2            g_timer2_sleep_count = 0;
 368   2          else
 369   2          {
 370   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 371   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 372   3          }
 373   2        }
 374   1      #endif
 375   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 376   1        {
 377   2          g_timer2_sleep_count = 0;
 378   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 379   2        }
 380   1        else
 381   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 382   1      }
 383          
 384          /*
 385          function: 
 386          parameter: 
 387            none
 388          return :
 389            none
 390          */
 391          void System_timer_event_handler(void)
 392          {
 393   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 394   1      
 395   1        g_rfid_flag = 1; /* RFID */
 396   1      
 397   1        if (g_timer2_flag == 1)
 398   1        {
 399   2          g_timer2_count++;
 400   2          if (g_timer2_count >= g_timer2_set_count)
 401   2          {
 402   3            g_timer2_flag = 2;
 403   3            g_timer2_count = 0;
 404   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 405   3          }
 406   2        }
 407   1      
 408   1        if (g_wifi_check_flag == 1)
 409   1        {
 410   2          g_wifi_check_count++;
 411   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 412   2          {
 413   3            g_wifi_check_flag = 2;
 414   3            g_wifi_check_count = 0;
 415   3          }
 416   2        }
 417   1      
 418   1        if (g_lock_error_flag > 0)
 419   1        {
 420   2          g_lock_error_count++;
 421   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 422   2            g_lock_error_flag = 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 8   

 423   2        }
 424   1      
 425   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
 426   1      #ifdef __LOCK_WIFI_SUPPORT__
 427   1          && (mmi_dq_wifi_get_running_flag() == 0)
 428   1      #endif
 429   1        )
 430   1        {
 431   2          unsigned char flag = 0;
 432   2          g_timer2_sleep_count++;
 433   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 434   2      #ifdef __LOCK_FP_SUPPORT__
 435   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 436   2      #endif
 437   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 438   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 439   2      #endif
 440   2          )
 441   2          {
 442   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 443   3            {
 444   4              flag = 1;
 445   4            }
 446   3          }
 447   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 448   2          {
 449   3            flag = 1;
 450   3          }
 451   2      
 452   2          if (flag)
 453   2          {
 454   3            mmi_dq_sys_time_out_handle();
 455   3          }
 456   2        }
 457   1        else
 458   1          g_timer2_sleep_count = 0;
 459   1      }
 460          
 461          /*
 462          function: 
 463          parameter: 
 464            none
 465          return :
 466            none
 467          */
 468          unsigned char mmi_dq_sys_get_rfid_flag(void)
 469          {
 470   1        if (g_rfid_flag == 1)
 471   1        {
 472   2          g_rfid_flag = 0;
 473   2          return 1;
 474   2        }
 475   1        return 0;
 476   1      }
 477          
 478          /*
 479          function: 
 480          parameter: 
 481            none
 482          return :
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 9   

 483            none
 484          */
 485          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 486          {
 487   1        if (g_wifi_check_flag == 2)
 488   1        {
 489   2          g_wifi_check_flag = 0;
 490   2          return 1;
 491   2        }
 492   1        return 0;
 493   1      }
 494          
 495          /*
 496          function: 
 497          parameter: 
 498            none
 499          return :
 500            none
 501          */
 502          void mmi_dq_sys_set_wifi_check(unsigned char type)
 503          {
 504   1        g_wifi_check_count = 0;
 505   1        g_wifi_check_flag = 1;
 506   1        g_wifi_check_type = type;
 507   1      }
 508          
 509          /*
 510          function: 
 511          parameter: 
 512            none
 513          return :
 514            none
 515          */
 516          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 517          {
 518   1        return g_wifi_check_type;
 519   1      }
 520          
 521          /*
 522          function: 
 523          parameter: 
 524            none
 525          return :
 526            none
 527          */
 528          void mmi_dq_sys_sleep_timer_reset(void)
 529          {
 530   1        g_timer2_sleep_count = 0;
 531   1        return;
 532   1      }
 533          
 534          /*
 535          function: 
 536          parameter: 
 537            none
 538          return :
 539            none
 540          */
 541          unsigned char mmi_dq_sys_get_timer2_flag(void)
 542          {
 543   1        if (g_timer2_flag == 2)
 544   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 10  

 545   2          g_timer2_flag = 0;
 546   2          return 1;
 547   2        }
 548   1        return 0;
 549   1      }
 550          
 551          /*
 552          function: 
 553          parameter: 
 554            none
 555          return :
 556            none
 557          */
 558          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 559          {
 560   1        if (count != 0)
 561   1        {
 562   2          g_timer2_count = 0;
 563   2          g_timer2_set_count = count;
 564   2          g_timer2_delay_pro = pro;
 565   2          g_timer2_flag = 1;
 566   2        }
 567   1        else
 568   1          pro();
 569   1      }
 570          
 571          /*
 572          function: 
 573          parameter: 
 574            none
 575          return :
 576            none
 577          */
 578          void mmi_dq_sys_delay_event_pro(void)
 579          {
 580   1        if (g_timer2_delay_pro != 0)
 581   1          g_timer2_delay_pro();
 582   1      }
 583          
 584          /*
 585          function: 
 586          parameter: 
 587            none
 588          return :
 589            none
 590          */
 591          unsigned char mmi_dq_sys_check_vbat(void)
 592          {
 593   1        unsigned char state = adc_VolT();
 594   1        if (state > 0)
 595   1        {
 596   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 597   2      #ifdef __LOCK_WIFI_SUPPORT__
 598   2          mmi_dq_wifi_lowpower_alarm();
 599   2      #endif
 600   2          if (state == 2)
 601   2          {
 602   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 603   3            return 1;
 604   3          }
 605   2        }
 606   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 11  

 607   1        return 0;
 608   1      }
 609          
 610          /**
 611            * @brief  远程开门
 612            * @param  none
 613            * @return none
 614            * @note   none
 615            * @see    none
 616            */
 617          void mmi_dq_sys_wifi_open(void)
 618          {
 619   1      #ifdef __LOCK_WIFI_SUPPORT__
 620   1        if (mmi_dq_wifi_open_ask() == 0)
 621   1      #endif
 622   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 623   1      }
 624          
 625          /*
 626          parameter: 
 627            none
 628          return :
 629            none
 630          */
 631          void mmi_dq_sys_add_admin_pwd(void)
 632          {
 633   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 634   1        mmi_ms_pwd_init_var();
 635   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 636   1        return;
 637   1      }
 638          
 639          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 640          //********************************************************************************************************
             -***********************************************************************************
 641          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 642          //
 643          //        menu part
 644          //
 645          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 646          //********************************************************************************************************
             -***********************************************************************************
 647          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 648          
 649          /*
 650          parameter: 
 651            none
 652          return :
 653            none
 654          */
 655          void mmi_dq_sys_add_pwd(void)
 656          {
 657   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 658   1        {
 659   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 660   2          mmi_dq_sys_show_cur_menu_list();
 661   2        }
 662   1        else
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 12  

 663   1        {
 664   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 665   2          mmi_ms_pwd_init_var();
 666   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 667   2        }
 668   1        return;
 669   1      }
 670          
 671          void mmi_dq_sys_add_pwd_con(void)
 672          {
 673   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 674   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 675   1        return;
 676   1      }
 677          
 678          #ifdef __LOCK_110_SUPPORT__
 679          /*
 680          parameter: 
 681            none
 682          return :
 683            none
 684          */
 685          void mmi_dq_sys_add_110_pwd(void)
 686          {
 687   1        mmi_dq_wifi_wakeup();
 688   1        if (mmi_dq_wifi_check() == 1)
 689   1        {
 690   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 691   2          mmi_dq_sys_show_cur_menu_list();
 692   2          return;
 693   2        }
 694   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 695   1        mmi_ms_pwd_init_var();
 696   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 697   1        return;
 698   1      }
 699          #endif
 700          /*
 701          parameter: 
 702            none
 703          return :
 704            none
 705          */
 706          static void mmi_dq_sys_chg_pwd(void)
 707          {
 708   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 709   1        return;
 710   1      }
 711          
 712          /*
 713          parameter: 
 714            none
 715          return :
 716            none
 717          */
 718          void mmi_dq_sys_del_pwd(void)
 719          {
 720   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 721   1        mmi_ms_pwd_init_var();
 722   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 723   1        return;
 724   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 13  

 725          
 726          void mmi_dq_sys_del_pwd_con(void)
 727          {
 728   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 729   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 730   1        return;
 731   1      }
 732          
 733          /*
 734          parameter: 
 735            none
 736          return :
 737            none
 738          */
 739          static void mmi_dq_sys_clear_pwd(void)
 740          {
 741   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 742   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 743   1        return;
 744   1      }
 745          
 746          #if defined(__LOCK_FP_SUPPORT__)
 747          /*
 748          parameter: 
 749            none
 750          return :
 751            none
 752          */
 753          void mmi_dq_sys_add_fp(void)
 754          {
 755   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 756   1        {
 757   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 758   2          mmi_dq_sys_show_cur_menu_list();
 759   2        }
 760   1        else
 761   1        {
 762   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 763   2          mmi_dq_fp_light(FP_BLUE);
 764   2          mmi_ms_opt_time_init();
 765   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 766   2        }
 767   1        return;
 768   1      }
 769          
 770          void mmi_dq_sys_add_fp_con(void)
 771          {
 772   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 773   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 774   1        return;
 775   1      }
 776          
 777          #ifdef __LOCK_110_SUPPORT__
 778          /*
 779          parameter: 
 780            none
 781          return :
 782            none
 783          */
 784          void mmi_dq_sys_add_110_fp(void)
 785          {
 786   1        mmi_dq_wifi_wakeup();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 14  

 787   1        if (mmi_dq_wifi_check() == 1)
 788   1        {
 789   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 790   2          mmi_dq_sys_show_cur_menu_list();
 791   2          return;
 792   2        }
 793   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 794   1        mmi_dq_fp_light(FP_BLUE);
 795   1        mmi_ms_opt_time_init();
 796   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
 797   1        return;
 798   1      }
 799          
 800          /*
 801          parameter: 
 802            none
 803          return :
 804            none
 805          */
 806          void mmi_dq_sys_del_110_fp(void)
 807          {
 808   1        mmi_dq_wifi_wakeup();
 809   1        if (mmi_dq_wifi_check() == 1)
 810   1        {
 811   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 812   2          mmi_dq_sys_show_cur_menu_list();
 813   2          return;
 814   2        }
 815   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 816   1        mmi_dq_fp_light(FP_BLUE);
 817   1        mmi_ms_opt_time_init();
 818   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 819   1        return;
 820   1      }
 821          
 822          #endif
 823          
 824          /*
 825          parameter: 
 826            none
 827          return :
 828            none
 829          */
 830          static void mmi_dq_sys_chg_fp(void)
 831          {
 832   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 833   1        return;
 834   1      }
 835          
 836          /*
 837          parameter: 
 838            none
 839          return :
 840            none
 841          */
 842          void mmi_dq_sys_del_fp(void)
 843          {
 844   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 845   1        mmi_dq_fp_light(FP_BLUE);
 846   1        mmi_ms_opt_time_init();
 847   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 848   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 15  

 849   1      }
 850          
 851          void mmi_dq_sys_del_fp_con(void)
 852          {
 853   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 854   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 855   1        return;
 856   1      }
 857          
 858          /*
 859          parameter: 
 860            none
 861          return :
 862            none
 863          */
 864          static void mmi_dq_sys_clear_fp(void)
 865          {
 866   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 867   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 868   1        return;
 869   1      }
 870          #endif
 871          #ifdef __LOCK_RFID_CARD_SUPPORT__
 872          /*
 873          parameter: 
 874            none
 875          return :
 876            none
 877          */
 878          void mmi_dq_sys_add_rf(void)
 879          {
 880   1      
 881   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 882   1        {
 883   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 884   2          mmi_dq_sys_show_cur_menu_list();
 885   2        }
 886   1        else
 887   1        {
 888   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 889   2          mmi_ms_opt_time_init();
 890   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 891   2        }
 892   1        return;
 893   1      }
 894          
 895          void mmi_dq_sys_add_rf_con(void)
 896          {
 897   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 898   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 899   1        return;
 900   1      }
 901          
 902          /*
 903          parameter: 
 904            none
 905          return :
 906            none
 907          */
 908          static void mmi_dq_sys_chg_rf(void)
 909          {
 910   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 16  

 911   1        return;
 912   1      }
 913          
 914          /*
 915          parameter: 
 916            none
 917          return :
 918            none
 919          */
 920          void mmi_dq_sys_del_rf(void)
 921          {
 922   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 923   1        mmi_ms_opt_time_init();
 924   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 925   1        return;
 926   1      }
 927          
 928          void mmi_dq_sys_del_rf_con(void)
 929          {
 930   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 931   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 932   1        return;
 933   1      }
 934          
 935          /*
 936          parameter: 
 937            none
 938          return :
 939            none
 940          */
 941          static void mmi_dq_sys_clear_rf(void)
 942          {
 943   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 944   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 945   1        return;
 946   1      }
 947          #endif
 948          
 949          /*
 950          parameter: 
 951            none
 952          return :
 953            none
 954          */
 955          static void mmi_dq_sys_open_pro_sound(void)
 956          {
 957   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 958   1      
 959   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 960   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 961   1        else
 962   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 963   1      
 964   1        mmi_dq_sys_show_cur_menu_list();
 965   1        return;
 966   1      }
 967          
 968          /*
 969          parameter: 
 970            none
 971          return :
 972            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 17  

 973          */
 974          static void mmi_dq_sys_close_pro_sound(void)
 975          {
 976   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 977   1      
 978   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 979   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 980   1        else
 981   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 982   1      
 983   1        mmi_dq_sys_show_cur_menu_list();
 984   1        return;
 985   1      }
 986          
 987          /*
 988          parameter: 
 989            none
 990          return :
 991            none
 992          */
 993          static void mmi_dq_sys_sin_open_mode(void)
 994          {
 995   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 996   1      
 997   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 998   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 999   1        else
1000   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
1001   1      
1002   1        mmi_dq_sys_show_cur_menu_list();
1003   1        return;
1004   1      }
1005          
1006          /*
1007          parameter: 
1008            none
1009          return :
1010            none
1011          */
1012          static void mmi_dq_sys_dbl_open_mode(void)
1013          {
1014   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1015   1      
1016   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1017   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
1018   1        else
1019   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
1020   1      
1021   1        mmi_dq_sys_show_cur_menu_list();
1022   1        return;
1023   1      }
1024          
1025          #if defined(__LOCK_FP_SUPPORT__)
1026          /*
1027          parameter: 
1028            none
1029          return :
1030            none
1031          */
1032          void mmi_dq_sys_chg_admin_fp_No1(void)
1033          {
1034   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 18  

1035   1        mmi_dq_fp_light(FP_BLUE);
1036   1        mmi_ms_opt_time_init();
1037   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1038   1        return;
1039   1      }
1040          
1041          /*
1042          parameter: 
1043            none
1044          return :
1045            none
1046          */
1047          void mmi_dq_sys_chg_admin_fp_No2(void)
1048          {
1049   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1050   1        mmi_dq_fp_light(FP_BLUE);
1051   1        mmi_ms_opt_time_init();
1052   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1053   1        return;
1054   1      }
1055          #endif
1056          
1057          /*
1058          parameter: 
1059            none
1060          return :
1061            none
1062          */
1063          void mmi_dq_sys_chg_admin_pwd(void)
1064          {
1065   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1066   1        mmi_ms_pwd_init_var();
1067   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1068   1        return;
1069   1      }
1070          
1071          /*
1072          parameter: 
1073            none
1074          return :
1075            none
1076          */
1077          void mmi_dq_sys_restore_lock(void)
1078          {
1079   1        unsigned char retval = 0;
1080   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1081   1      
1082   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1083   1          retval = 1;
1084   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1085   1          retval = 1;
1086   1      #ifdef __LOCK_FP_SUPPORT__
1087   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1088   1          retval = 1;
1089   1      #endif
1090   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1091   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1092   1          retval = 1;
1093   1      #endif
1094   1      
1095   1        if (retval == 0)
1096   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 19  

1097   1        else
1098   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
1099   1      
1100   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1101   1        return;
1102   1      }
1103          
1104          /*
1105          parameter: 
1106            none
1107          return :
1108            none
1109          */
1110          static void mmi_dq_sys_restore_lock_con(void)
1111          {
1112   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1113   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1114   1      }
1115          
1116          #ifdef __LOCK_WIFI_SUPPORT__
1117          /*
1118          parameter: 
1119            none
1120          return :
1121            none
1122          */
1123          static void mmi_dq_sys_wifi_setting(void)
1124          {
1125   1        if (0 == mmi_dq_wifi_setting())
1126   1        {
1127   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1128   2          mmi_dq_sys_show_cur_menu_list();
1129   2        }
1130   1        else
1131   1        {
1132   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1133   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1134   2        }
1135   1      }
1136          
1137          /*
1138          parameter: 
1139            none
1140          return :
1141            none
1142          */
1143          static void mmi_dq_sys_wifi_airkiss_setting(void)
1144          {
1145   1        if (0 == mmi_dq_wifi_arikiss_con())
1146   1        {
1147   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1148   2          mmi_dq_sys_show_cur_menu_list();
1149   2        }
1150   1        else
1151   1        {
1152   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1153   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1154   2        }
1155   1      }
1156          
1157          /*
1158          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 20  

1159            none
1160          return :
1161            none
1162          */
1163          static void mmi_dq_sys_wifi_code_setting(void)
1164          {
1165   1        if (0 == mmi_dq_wifi_code_con())
1166   1        {
1167   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1168   2          mmi_dq_sys_show_cur_menu_list();
1169   2        }
1170   1        else
1171   1        {
1172   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1173   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1174   2        }
1175   1      }
1176          #endif
1177          
1178          typedef struct sys_menu_t
1179          {
1180            unsigned char menu_father_id;
1181            unsigned char menu_sub_id;
1182            void (*sys_menu_node_function)(void);
1183          } sys_menu_t;
1184          
1185          typedef struct sys_menu_list
1186          {
1187            unsigned char id;
1188            unsigned char menu_id;
1189          } sys_menu_list;
1190          
1191          const sys_menu_t sys_menu_tree[] =
1192            {
1193              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1194          #if defined(__LOCK_FP_SUPPORT__)
1195              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1196          #endif
1197          #ifdef __LOCK_RFID_CARD_SUPPORT__
1198              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1199          #endif
1200              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1201              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1202              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1203          #ifdef __LOCK_WIFI_SUPPORT__
1204              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1205              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1206              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_code_setting},
1207          #endif
1208          #ifdef __LOCK_110_SUPPORT__
1209              {STR_ID_SYSTEM, STR_ID_110, 0},
1210          
1211              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1212          #if defined(__LOCK_FP_SUPPORT__)
1213              {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
1214          #endif
1215          #endif
1216          
1217              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1218              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1219              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1220          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 21  

1221              //PWD
1222              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1223              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1224              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1225              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1226          //FP
1227          #if defined(__LOCK_FP_SUPPORT__)
1228              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1229              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1230              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1231              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1232          #ifdef __LOCK_110_SUPPORT__
1233              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1234              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1235          #endif
1236          #endif
1237          #ifdef __LOCK_RFID_CARD_SUPPORT__
1238              //RF
1239              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1240              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1241              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1242              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1243          #endif
1244              //admin
1245              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1246          #if defined(__LOCK_FP_SUPPORT__)
1247              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1248              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1249              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1250          #endif
1251              //setting
1252              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1253              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1254          
1255              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1256              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1257              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1258              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1259          };
1260          
1261          static unsigned char g_dq_menu_father_id;
1262          static sys_menu_list g_dq_menu_list_id[10];
1263          static unsigned char g_dq_menu_count;
1264          
1265          /*
1266          parameter: 
1267            none
1268          return :
1269            none
1270          */
1271          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1272          {
1273   1        g_dq_menu_father_id = father_id;
1274   1        return;
1275   1      }
1276          
1277          /*
1278          parameter: 
1279            none
1280          return :
1281            none
1282          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 22  

1283          unsigned char mmi_dq_sys_get_menu_count(void)
1284          {
1285   1        return g_dq_menu_count;
1286   1      }
1287          
1288          /*
1289          parameter: 
1290            none
1291          return :
1292            none
1293          */
1294          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1295          {
1296   1        unsigned char i = 0, j = 0;
1297   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1298   1      
1299   1        g_dq_menu_father_id = father_id;
1300   1      
1301   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1302   1        g_dq_menu_count = 0;
1303   1      
1304   1        for (i = 0; i < menu_tree_size; i++)
1305   1        {
1306   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1307   2          {
1308   3            g_dq_menu_list_id[j].id = i;
1309   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1310   3            j++;
1311   3            g_dq_menu_count++;
1312   3          }
1313   2        }
1314   1        return;
1315   1      }
1316          
1317          /*
1318          parameter: 
1319            none
1320          return :
1321            none
1322          */
1323          void mmi_dq_sys_show_cur_menu_list(void)
1324          {
1325   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1326   1      
1327   1      #ifdef __LOCK_AUDIO_SUPPORT__
1328   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1329   1      #endif
1330   1      #ifdef __LOCK_FP_SUPPORT__
1331   1        mmi_dq_fp_light(FP_NONE_COLOR);
1332   1      #endif
1333   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1334   1        return;
1335   1      }
1336          
1337          /*
1338          parameter: 
1339            none
1340          return :
1341            current machine status
1342          */
1343          void mmi_dq_sys_get_pre_menu_list(void)
1344          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 23  

1345   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1346   1        {
1347   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1348   2        }
1349   1        else
1350   1        {
1351   2          unsigned char i = 0;
1352   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1353   2      
1354   2          for (i = 0; i < menu_tree_size; i++)
1355   2          {
1356   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1357   3            {
1358   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1359   4              break;
1360   4            }
1361   3          }
1362   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1363   2      #ifdef __LOCK_AUDIO_SUPPORT__
1364   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1365   2      #endif
1366   2        }
1367   1        return;
1368   1      }
1369          
1370          /*
1371          parameter: 
1372            none
1373          return :
1374            none
1375          */
1376          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1377          {
1378   1        unsigned char i = 0;
1379   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1380   1        if (menu_id >= g_dq_menu_count)
1381   1          return RET_FAIL;
1382   1        i = g_dq_menu_list_id[menu_id].id;
1383   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1384   1        {
1385   2          sys_menu_tree[i].sys_menu_node_function();
1386   2        }
1387   1        else
1388   1        {
1389   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1390   2      
1391   2      #ifdef __LOCK_AUDIO_SUPPORT__
1392   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1393   2      #endif
1394   2        }
1395   1      
1396   1        return RET_SUCESS;
1397   1      }
1398          
1399          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    224      20
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 10:41:15 PAGE 24  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
