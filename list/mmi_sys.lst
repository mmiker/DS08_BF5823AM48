C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          // extern void printfS(char *show, char *status);
  18          // extern void printfV(char *show, int value);
  19          
  20          static unsigned char g_sys_door_open_flag = 0;
  21          
  22          static unsigned int g_timer2_sleep_count = 0;
  23          static unsigned int g_timer2_count = 0;
  24          static unsigned int g_timer2_set_count = 0;
  25          static unsigned char g_timer2_flag = 0;
  26          
  27          static unsigned char g_wifi_check_flag = 0;
  28          static unsigned char g_wifi_check_count = 0;
  29          static unsigned char g_wifi_check_type = 0;
  30          
  31          /* RFID */
  32          static unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_TIMER_WIFI_CHECK 1000
  50          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  51          #define MMI_WIFI_SETTING_DELAY 60000
  52          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  53          #define MMI_LOCK_ERROR_DELAY 60000
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 2   

  54          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  55          /*
  56          parameter: 
  57            none
  58          return :
  59            none
  60          */
  61          void mmi_dq_sys_init(void)
  62          {
  63   1        mmi_InitQueue();
  64   1        mmi_ms_pwd_init_var();
  65   1        mmi_dq_fs_init();
  66   1      }
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  74          {
  75   1        unsigned char audio_id = 0;
  76   1      
  77   1        time_msec = 0;
  78   1      
  79   1      #ifdef __LOCK_AUDIO_SUPPORT__
  80   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  81   1        mmi_dq_aud_play_with_id(audio_id);
  82   1      #endif
  83   1        return;
  84   1      }
  85          
  86          /*
  87          parameter: 
  88            none
  89          return :
  90            none
  91          */
  92          void mmi_dq_sys_lock_add_admin_suc(void)
  93          {
  94   1        mmi_dq_fs_set_admin_status(1);
  95   1      
  96   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  97   1      }
  98          
  99          /*
 100          function: system enter sleep
 101          parameter: 
 102            none
 103          return :
 104            none
 105          */
 106          void mmi_dq_sys_enter_sleep(void)
 107          {
 108   1        mmi_dq_bsp_enter_sleep();
 109   1      
 110   1        g_timer2_flag = 0;
 111   1        g_sys_door_open_flag = 0;
 112   1      
 113   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 114   1      }
 115          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 3   

 116          /*
 117          function: system wake up
 118          parameter: 
 119            none
 120          return :
 121            none
 122          */
 123          void mmi_dq_sys_wake_up(void)
 124          {
 125   1      
 126   1        mmi_dq_bsp_wake_up();
 127   1        if (mmi_dq_sys_check_vbat() == 0)
 128   1        {
 129   2      #ifdef __LOCK_WIFI_SUPPORT__
 130   2          mmi_dq_wifi_wakeup();
 131   2      #endif
 132   2      #ifdef __LOCK_FP_SUPPORT__
                  mmi_dq_fp_init(); //握手、点灯
              #endif
 135   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 136   2        }
 137   1      }
 138          
 139          /*
 140          function: 
 141          parameter: 
 142            none
 143          return :
 144            none
 145          */
 146          void mmi_dq_sys_door_open_cb(void)
 147          {
 148   1      #ifdef __LOCK_MOTOR_SUPPORT__
 149   1        mmi_dq_motor_stop();
 150   1      #endif
 151   1      #ifdef __LOCK_AUDIO_SUPPORT__
 152   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 153   1      #endif
 154   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 155   1      }
 156          
 157          /*
 158          function: 
 159          parameter: 
 160            none
 161          return :
 162            none
 163          */
 164          void mmi_dq_sys_door_open(sys_open_type type)
 165          {
 166   1      #ifdef __LOCK_BUS_SUPPORT__
 167   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 168   1        {
 169   2      #ifdef __LOCK_AUDIO_SUPPORT__
 170   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 171   2      #endif
 172   2      #ifdef __LOCK_WIFI_SUPPORT__
 173   2          switch (type)
 174   2          {
 175   3          case SYS_OPEN_BY_PASSWORD:
 176   3            mmi_dq_wifi_pw_alarm();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 4   

 177   3            break;
 178   3          case SYS_OPEN_BY_FP:
 179   3            mmi_dq_wifi_fp_alarm();
 180   3            break;
 181   3          case SYS_OPEN_BY_RFID:
 182   3            mmi_dq_wifi_rfid_alarm();
 183   3            break;
 184   3          }
 185   2      #endif
 186   2          return;
 187   2        }
 188   1      #endif
 189   1        g_lock_error_flag = 0;
 190   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 191   1        {
 192   2          if ((g_sys_door_open_flag & (~type)) != 0)
 193   2          {
 194   3            g_sys_door_open_flag = 0;
 195   3          }
 196   2          else
 197   2          {
 198   3            g_sys_door_open_flag |= type;
 199   3      #ifdef __LOCK_AUDIO_SUPPORT__
 200   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 201   3      #endif
 202   3            return;
 203   3          }
 204   2        }
 205   1      
 206   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 207   1      
 208   1      #ifdef __LOCK_MOTOR_SUPPORT__
 209   1        mmi_dq_motor_turn_right();
 210   1      #endif
 211   1        //mmi_dq_wifi_open_door();
 212   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 213   1      
 214   1      #ifdef __LOCK_WIFI_SUPPORT__
 215   1        switch (type)
 216   1        {
 217   2      #ifdef __LOCK_110_SUPPORT__
 218   2        case SYS_OPEN_BY_110_PASSWORD:
 219   2          mmi_dq_wifi_send_pwd_110(get_index);
 220   2          // printfV("get_index",(int)get_index);
 221   2          break;
 222   2        case SYS_OPEN_BY_110_FP:
 223   2          mmi_dq_wifi_send_fp_110(get_index);
 224   2          // printfV("get_index",(int)get_index);
 225   2          break;
 226   2      #endif
 227   2        case SYS_OPEN_BY_PASSWORD:
 228   2          mmi_dq_wifi_open_by_password(get_index);
 229   2          // printfV("get_index",(int)get_index);
 230   2          break;
 231   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
                  mmi_dq_wifi_open_by_fp(get_index);
                  // printfV("get_index",(int)get_index);
                  break;
              #endif
 237   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 5   

 238   2        case SYS_OPEN_BY_RFID:
 239   2          mmi_dq_wifi_open_by_rfid(get_index);
 240   2          // printfV("get_index",(int)get_index);
 241   2          break;
 242   2      #endif
 243   2        case SYS_OPEN_BY_WIFI:
 244   2          mmi_dq_wifi_open_by_wifi();
 245   2          break;
 246   2        }
 247   1      
 248   1        if (pv_add_switch == 0)
 249   1          ;
 250   1        else if (pv_add_switch == 1)
 251   1          mmi_dq_wifi_take_photos(); //拍照
 252   1        else if (pv_add_switch == 2)
 253   1          mmi_dq_wifi_take_videos(); //录像
 254   1        else if (pv_add_switch == 3)
 255   1        {
 256   2          mmi_dq_wifi_take_photos(); //拍照
 257   2          mmi_dq_wifi_take_videos(); //录像
 258   2        }
 259   1      
 260   1      #endif
 261   1      }
 262          
 263          /*
 264          function: 
 265          parameter: 
 266            none
 267          return :
 268            none
 269          */
 270          void mmi_dq_sys_door_open_fail(sys_open_type type)
 271          {
 272   1        g_lock_error_count = 0;
 273   1        g_lock_error_flag++;
 274   1        switch (type)
 275   1        {
 276   2        case SYS_OPEN_BY_PASSWORD:
 277   2      #ifdef __LOCK_AUDIO_SUPPORT__
 278   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 279   2      #endif
 280   2      #ifdef __LOCK_WIFI_SUPPORT__
 281   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 282   2            mmi_dq_wifi_pw_alarm();
 283   2      #endif
 284   2          break;
 285   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                  if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
                    mmi_dq_wifi_fp_alarm();
              #endif
                  break;
              #endif
 296   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 297   2        case SYS_OPEN_BY_RFID:
 298   2      #ifdef __LOCK_AUDIO_SUPPORT__
 299   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 6   

 300   2      #endif
 301   2      #ifdef __LOCK_WIFI_SUPPORT__
 302   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 303   2            mmi_dq_wifi_rfid_alarm();
 304   2      #endif
 305   2          break;
 306   2      #endif
 307   2        }
 308   1      }
 309          
 310          /*
 311          function: 
 312          parameter: 
 313            none
 314          return :
 315            none
 316          */
 317          unsigned char mmi_dq_sys_door_state_check(void)
 318          {
 319   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 320   1          return 1;
 321   1        return 0;
 322   1      }
 323          
 324          /*
 325          function: 
 326          parameter: 
 327            none
 328          return :
 329            none
 330          */
 331          void mmi_dq_sys_door_close_cb(void)
 332          {
 333   1      #ifdef __LOCK_MOTOR_SUPPORT__
 334   1        mmi_dq_motor_stop();
 335   1      #endif
 336   1      #ifdef __LOCK_AUDIO_SUPPORT__
 337   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 338   1      #endif
 339   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 340   1      }
 341          
 342          /*
 343          function: 
 344          parameter: 
 345            none
 346          return :
 347            none
 348          */
 349          void mmi_dq_sys_door_close(void)
 350          {
 351   1      #ifdef __LOCK_MOTOR_SUPPORT__
 352   1        mmi_dq_motor_turn_back();
 353   1      #endif
 354   1        //mmi_dq_wifi_close_door();
 355   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 356   1      }
 357          
 358          /*
 359          function: 
 360          parameter: 
 361            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 7   

 362          return :
 363            none
 364          */
 365          void mmi_dq_sys_aud_end(void)
 366          {
 367   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 368   1      }
 369          
 370          /*
 371          function: 
 372          parameter: 
 373            none
 374          return :
 375            none
 376          */
 377          void mmi_dq_sys_time_out_handle(void)
 378          {
 379   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 380   1      
 381   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 382   1        {
 383   2      #ifdef __LOCK_AUDIO_SUPPORT__
 384   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 385   2      #endif
 386   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 387   2        }
 388   1      #ifdef __LOCK_FP_SUPPORT__
                else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
                {
                  if (mmi_dq_fs_get_admin_status() == 0)
                    g_timer2_sleep_count = 0;
                  else
                  {
              #ifdef __LOCK_AUDIO_SUPPORT__
                    mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
              #endif
                    mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
                  }
                }
              #endif
 402   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 403   1        {
 404   2          g_timer2_sleep_count = 0;
 405   2      #ifdef __LOCK_AUDIO_SUPPORT__
 406   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 407   2      #endif
 408   2        }
 409   1        else
 410   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 411   1      }
 412          
 413          /*
 414          function: 
 415          parameter: 
 416            none
 417          return :
 418            none
 419          */
 420          void System_timer_event_handler(void)
 421          {
 422   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 8   

 423   1      
 424   1        g_rfid_flag = 1; /* RFID */
 425   1      
 426   1        if (g_timer2_flag == 1)
 427   1        {
 428   2          g_timer2_count++;
 429   2          if (g_timer2_count >= g_timer2_set_count)
 430   2          {
 431   3            g_timer2_flag = 2;
 432   3            g_timer2_count = 0;
 433   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 434   3          }
 435   2        }
 436   1      
 437   1        if (g_wifi_check_flag == 1)
 438   1        {
 439   2          g_wifi_check_count++;
 440   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 441   2          {
 442   3            g_wifi_check_flag = 2;
 443   3            g_wifi_check_count = 0;
 444   3          }
 445   2        }
 446   1      
 447   1        if (g_lock_error_flag > 0)
 448   1        {
 449   2          g_lock_error_count++;
 450   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 451   2            g_lock_error_flag = 0;
 452   2        }
 453   1      
 454   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
 455   1      #ifdef __LOCK_WIFI_SUPPORT__
 456   1          && (mmi_dq_wifi_get_running_flag() == 0)
 457   1      #endif
 458   1        )
 459   1        {
 460   2          unsigned char flag = 0;
 461   2          g_timer2_sleep_count++;
 462   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 463   2      #ifdef __LOCK_FP_SUPPORT__
                    || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
              #endif
 466   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 467   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 468   2      #endif
 469   2          )
 470   2          {
 471   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 472   3            {
 473   4              flag = 1;
 474   4            }
 475   3          }
 476   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 477   2          {
 478   3            flag = 1;
 479   3          }
 480   2      
 481   2          if (flag)
 482   2          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 9   

 483   3            mmi_dq_sys_time_out_handle();
 484   3          }
 485   2        }
 486   1        else
 487   1          g_timer2_sleep_count = 0;
 488   1      }
 489          
 490          /*
 491          function: 
 492          parameter: 
 493            none
 494          return :
 495            none
 496          */
 497          unsigned char mmi_dq_sys_get_rfid_flag(void)
 498          {
 499   1        if (g_rfid_flag == 1)
 500   1        {
 501   2          g_rfid_flag = 0;
 502   2          return 1;
 503   2        }
 504   1        return 0;
 505   1      }
 506          
 507          /*
 508          function: 
 509          parameter: 
 510            none
 511          return :
 512            none
 513          */
 514          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 515          {
 516   1        if (g_wifi_check_flag == 2)
 517   1        {
 518   2          g_wifi_check_flag = 0;
 519   2          return 1;
 520   2        }
 521   1        return 0;
 522   1      }
 523          
 524          /*
 525          function: 
 526          parameter: 
 527            none
 528          return :
 529            none
 530          */
 531          void mmi_dq_sys_set_wifi_check(unsigned char type)
 532          {
 533   1        g_wifi_check_count = 0;
 534   1        g_wifi_check_flag = 1;
 535   1        g_wifi_check_type = type;
 536   1      }
 537          
 538          /*
 539          function: 
 540          parameter: 
 541            none
 542          return :
 543            none
 544          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 10  

 545          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 546          {
 547   1        return g_wifi_check_type;
 548   1      }
 549          
 550          /*
 551          function: 
 552          parameter: 
 553            none
 554          return :
 555            none
 556          */
 557          void mmi_dq_sys_sleep_timer_reset(void)
 558          {
 559   1        g_timer2_sleep_count = 0;
 560   1        return;
 561   1      }
 562          
 563          /*
 564          function: 
 565          parameter: 
 566            none
 567          return :
 568            none
 569          */
 570          unsigned char mmi_dq_sys_get_timer2_flag(void)
 571          {
 572   1        if (g_timer2_flag == 2)
 573   1        {
 574   2          g_timer2_flag = 0;
 575   2          return 1;
 576   2        }
 577   1        return 0;
 578   1      }
 579          
 580          /*
 581          function: 
 582          parameter: 
 583            none
 584          return :
 585            none
 586          */
 587          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 588          {
 589   1        if (count != 0)
 590   1        {
 591   2          g_timer2_count = 0;
 592   2          g_timer2_set_count = count;
 593   2          g_timer2_delay_pro = pro;
 594   2          g_timer2_flag = 1;
 595   2        }
 596   1        else
 597   1          pro();
 598   1      }
 599          
 600          /*
 601          function: 
 602          parameter: 
 603            none
 604          return :
 605            none
 606          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 11  

 607          void mmi_dq_sys_delay_event_pro(void)
 608          {
 609   1        if (g_timer2_delay_pro != 0)
 610   1          g_timer2_delay_pro();
 611   1      }
 612          
 613          /*
 614          function: 
 615          parameter: 
 616            none
 617          return :
 618            none
 619          */
 620          unsigned char mmi_dq_sys_check_vbat(void)
 621          {
 622   1        unsigned char state = adc_VolT();
 623   1        if (state > 0)
 624   1        {
 625   2      #ifdef __LOCK_AUDIO_SUPPORT__
 626   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 627   2      #endif
 628   2      #ifdef __LOCK_WIFI_SUPPORT__
 629   2          mmi_dq_wifi_lowpower_alarm();
 630   2      #endif
 631   2          if (state == 2)
 632   2          {
 633   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 634   3            return 1;
 635   3          }
 636   2        }
 637   1      
 638   1        return 0;
 639   1      }
 640          
 641          /**
 642            * @brief  远程开门
 643            * @param  none
 644            * @return none
 645            * @note   none
 646            * @see    none
 647            */
 648          void mmi_dq_sys_wifi_open(void)
 649          {
 650   1      #ifdef __LOCK_WIFI_SUPPORT__
 651   1        if (mmi_dq_wifi_open_ask() == 0)
 652   1      #ifdef __LOCK_AUDIO_SUPPORT__
 653   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 654   1      #else
                  ;
              #endif
 657   1      #endif
 658   1      }
 659          
 660          /*
 661          parameter: 
 662            none
 663          return :
 664            none
 665          */
 666          void mmi_dq_sys_add_admin_pwd(void)
 667          {
 668   1      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 12  

 669   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 670   1      #endif
 671   1        mmi_ms_pwd_init_var();
 672   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 673   1        return;
 674   1      }
 675          
 676          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 677          //********************************************************************************************************
             -***********************************************************************************
 678          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 679          //
 680          //        menu part
 681          //
 682          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 683          //********************************************************************************************************
             -***********************************************************************************
 684          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 685          
 686          /*
 687          parameter: 
 688            none
 689          return :
 690            none
 691          */
 692          void mmi_dq_sys_add_pwd(void)
 693          {
 694   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 695   1        {
 696   2      #ifdef __LOCK_AUDIO_SUPPORT__
 697   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 698   2      #endif
 699   2          mmi_dq_sys_show_cur_menu_list();
 700   2        }
 701   1        else
 702   1        {
 703   2      #ifdef __LOCK_AUDIO_SUPPORT__
 704   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 705   2      #endif
 706   2          mmi_ms_pwd_init_var();
 707   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 708   2        }
 709   1        return;
 710   1      }
 711          
 712          void mmi_dq_sys_add_pwd_con(void)
 713          {
 714   1      #ifdef __LOCK_AUDIO_SUPPORT__
 715   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 716   1      #endif
 717   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 718   1        return;
 719   1      }
 720          
 721          #ifdef __LOCK_110_SUPPORT__
 722          /*
 723          parameter: 
 724            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 13  

 725          return :
 726            none
 727          */
 728          void mmi_dq_sys_add_110_pwd(void)
 729          {
 730   1        mmi_dq_wifi_wakeup();
 731   1        if (mmi_dq_wifi_check() == 1)
 732   1        {
 733   2      #ifdef __LOCK_AUDIO_SUPPORT__
 734   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 735   2      #endif
 736   2          mmi_dq_sys_show_cur_menu_list();
 737   2          return;
 738   2        }
 739   1      #ifdef __LOCK_AUDIO_SUPPORT__
 740   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 741   1      #endif
 742   1        mmi_ms_pwd_init_var();
 743   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 744   1        return;
 745   1      }
 746          #endif
 747          /*
 748          parameter: 
 749            none
 750          return :
 751            none
 752          */
 753          static void mmi_dq_sys_chg_pwd(void)
 754          {
 755   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 756   1        return;
 757   1      }
 758          
 759          /*
 760          parameter: 
 761            none
 762          return :
 763            none
 764          */
 765          void mmi_dq_sys_del_pwd(void)
 766          {
 767   1      #ifdef __LOCK_AUDIO_SUPPORT__
 768   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 769   1      #endif
 770   1        mmi_ms_pwd_init_var();
 771   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 772   1        return;
 773   1      }
 774          
 775          void mmi_dq_sys_del_pwd_con(void)
 776          {
 777   1      #ifdef __LOCK_AUDIO_SUPPORT__
 778   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 779   1      #endif
 780   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 781   1        return;
 782   1      }
 783          
 784          /*
 785          parameter: 
 786            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 14  

 787          return :
 788            none
 789          */
 790          static void mmi_dq_sys_clear_pwd(void)
 791          {
 792   1      #ifdef __LOCK_AUDIO_SUPPORT__
 793   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 794   1      #endif
 795   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 796   1        return;
 797   1      }
 798          
 799          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_fp(void)
              {
                if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                }
                else
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                  mmi_dq_fp_light(FP_BLUE);
                  mmi_ms_opt_time_init();
                  mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
                }
                return;
              }
              
              void mmi_dq_sys_add_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
                return;
              }
              
              #ifdef __LOCK_110_SUPPORT__
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 15  

                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
                return;
              }
              
              #endif
              
              /*
              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_chg_fp(void)
              {
                //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_fp(void)
              {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 16  

              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
                return;
              }
              
              void mmi_dq_sys_del_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_clear_fp(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
                return;
              }
              #endif
 944          #ifdef __LOCK_RFID_CARD_SUPPORT__
 945          /*
 946          parameter: 
 947            none
 948          return :
 949            none
 950          */
 951          void mmi_dq_sys_add_rf(void)
 952          {
 953   1      
 954   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 955   1        {
 956   2      #ifdef __LOCK_AUDIO_SUPPORT__
 957   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 958   2      #endif
 959   2          mmi_dq_sys_show_cur_menu_list();
 960   2        }
 961   1        else
 962   1        {
 963   2      #ifdef __LOCK_AUDIO_SUPPORT__
 964   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 965   2      #endif
 966   2          mmi_ms_opt_time_init();
 967   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 968   2        }
 969   1        return;
 970   1      }
 971          
 972          void mmi_dq_sys_add_rf_con(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 17  

 973          {
 974   1      #ifdef __LOCK_AUDIO_SUPPORT__
 975   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 976   1      #endif
 977   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 978   1        return;
 979   1      }
 980          
 981          /*
 982          parameter: 
 983            none
 984          return :
 985            none
 986          */
 987          static void mmi_dq_sys_chg_rf(void)
 988          {
 989   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 990   1        return;
 991   1      }
 992          
 993          /*
 994          parameter: 
 995            none
 996          return :
 997            none
 998          */
 999          void mmi_dq_sys_del_rf(void)
1000          {
1001   1      #ifdef __LOCK_AUDIO_SUPPORT__
1002   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
1003   1      #endif
1004   1        mmi_ms_opt_time_init();
1005   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
1006   1        return;
1007   1      }
1008          
1009          void mmi_dq_sys_del_rf_con(void)
1010          {
1011   1      #ifdef __LOCK_AUDIO_SUPPORT__
1012   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
1013   1      #endif
1014   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
1015   1        return;
1016   1      }
1017          
1018          /*
1019          parameter: 
1020            none
1021          return :
1022            none
1023          */
1024          static void mmi_dq_sys_clear_rf(void)
1025          {
1026   1      #ifdef __LOCK_AUDIO_SUPPORT__
1027   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
1028   1      #endif
1029   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
1030   1        return;
1031   1      }
1032          #endif
1033          
1034          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 18  

1035          parameter: 
1036            none
1037          return :
1038            none
1039          */
1040          static void mmi_dq_sys_open_pro_sound(void)
1041          {
1042   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1043   1      
1044   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
1045   1      #ifdef __LOCK_AUDIO_SUPPORT__
1046   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS)
1047   1      #endif
1048   1            ;
1049   1        else
1050   1      #ifdef __LOCK_AUDIO_SUPPORT__
1051   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL)
1052   1      #endif
1053   1            ;
1054   1      
1055   1        mmi_dq_sys_show_cur_menu_list();
1056   1        return;
1057   1      }
1058          
1059          /*
1060          parameter: 
1061            none
1062          return :
1063            none
1064          */
1065          static void mmi_dq_sys_close_pro_sound(void)
1066          {
1067   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1068   1      
1069   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
1070   1      #ifdef __LOCK_AUDIO_SUPPORT__
1071   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS)
1072   1      #endif
1073   1            ;
1074   1        else
1075   1      #ifdef __LOCK_AUDIO_SUPPORT__
1076   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL)
1077   1      #endif
1078   1            ;
1079   1      
1080   1        mmi_dq_sys_show_cur_menu_list();
1081   1        return;
1082   1      }
1083          
1084          /*
1085          parameter: 
1086            none
1087          return :
1088            none
1089          */
1090          static void mmi_dq_sys_sin_open_mode(void)
1091          {
1092   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1093   1      
1094   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
1095   1      #ifdef __LOCK_AUDIO_SUPPORT__
1096   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 19  

1097   1      #endif
1098   1            ;
1099   1        else
1100   1      #ifdef __LOCK_AUDIO_SUPPORT__
1101   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL)
1102   1      #endif
1103   1            ;
1104   1      
1105   1        mmi_dq_sys_show_cur_menu_list();
1106   1        return;
1107   1      }
1108          
1109          /*
1110          parameter: 
1111            none
1112          return :
1113            none
1114          */
1115          static void mmi_dq_sys_dbl_open_mode(void)
1116          {
1117   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1118   1      
1119   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1120   1      #ifdef __LOCK_AUDIO_SUPPORT__
1121   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS)
1122   1      #endif
1123   1            ;
1124   1        else
1125   1      #ifdef __LOCK_AUDIO_SUPPORT__
1126   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL)
1127   1      #endif
1128   1            ;
1129   1      
1130   1        mmi_dq_sys_show_cur_menu_list();
1131   1        return;
1132   1      }
1133          
1134          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No1(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No2(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 20  

              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
                return;
              }
              #endif
1169          
1170          /*
1171          parameter: 
1172            none
1173          return :
1174            none
1175          */
1176          void mmi_dq_sys_chg_admin_pwd(void)
1177          {
1178   1      #ifdef __LOCK_AUDIO_SUPPORT__
1179   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1180   1      #endif
1181   1        mmi_ms_pwd_init_var();
1182   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1183   1        return;
1184   1      }
1185          
1186          /*
1187          parameter: 
1188            none
1189          return :
1190            none
1191          */
1192          void mmi_dq_sys_restore_lock(void)
1193          {
1194   1        unsigned char retval = 0;
1195   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1196   1      
1197   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1198   1          retval = 1;
1199   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1200   1          retval = 1;
1201   1      #ifdef __LOCK_FP_SUPPORT__
                if (RET_SUCESS != mmi_dq_fs_clr_fp())
                  retval = 1;
              #endif
1205   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1206   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1207   1          retval = 1;
1208   1      #endif
1209   1      
1210   1        if (retval == 0)
1211   1      #ifdef __LOCK_AUDIO_SUPPORT__
1212   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS)
1213   1      #endif
1214   1            ;
1215   1        else
1216   1      #ifdef __LOCK_AUDIO_SUPPORT__
1217   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
1218   1      #endif
1219   1            ;
1220   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 21  

1221   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1222   1        return;
1223   1      }
1224          
1225          /*
1226          parameter: 
1227            none
1228          return :
1229            none
1230          */
1231          static void mmi_dq_sys_restore_lock_con(void)
1232          {
1233   1      #ifdef __LOCK_AUDIO_SUPPORT__
1234   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1235   1      #endif
1236   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1237   1      }
1238          
1239          #ifdef __LOCK_WIFI_SUPPORT__
1240          
1241          /**
1242            * @brief  智能能配网
1243            * @param  none
1244            * @return none
1245            * @note   none
1246            * @see    none
1247            */
1248          static void mmi_dq_sys_wifi_setting(void)
1249          {
1250   1        if (0 == mmi_dq_wifi_setting())
1251   1        {
1252   2      #ifdef __LOCK_AUDIO_SUPPORT__
1253   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1254   2      #endif
1255   2          mmi_dq_sys_show_cur_menu_list();
1256   2        }
1257   1        else
1258   1        {
1259   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1260   2      #ifdef __LOCK_AUDIO_SUPPORT__
1261   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1262   2      #endif
1263   2        }
1264   1      }
1265          
1266          /**
1267            * @brief  AirKiss配网
1268            * @param  none
1269            * @return none
1270            * @note   none
1271            * @see    none
1272            */
1273          static void mmi_dq_sys_wifi_airkiss_setting(void)
1274          {
1275   1        if (0 == mmi_dq_wifi_arikiss_con())
1276   1        {
1277   2      #ifdef __LOCK_AUDIO_SUPPORT__
1278   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1279   2      #endif
1280   2          mmi_dq_sys_show_cur_menu_list();
1281   2        }
1282   1        else
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 22  

1283   1        {
1284   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1285   2      #ifdef __LOCK_AUDIO_SUPPORT__
1286   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1287   2      #endif
1288   2        }
1289   1      }
1290          
1291          /**
1292            * @brief  二维码配网
1293            * @param  none
1294            * @return none
1295            * @note   none
1296            * @see    none
1297            */
1298          static void mmi_dq_sys_wifi_code_setting(void)
1299          {
1300   1        if (0 == mmi_dq_wifi_code_con())
1301   1        {
1302   2      #ifdef __LOCK_AUDIO_SUPPORT__
1303   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1304   2      #endif
1305   2          mmi_dq_sys_show_cur_menu_list();
1306   2        }
1307   1        else
1308   1        {
1309   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1310   2      #ifdef __LOCK_AUDIO_SUPPORT__
1311   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1312   2      #endif
1313   2        }
1314   1      }
1315          #endif
1316          
1317          typedef struct sys_menu_t
1318          {
1319            unsigned char menu_father_id;
1320            unsigned char menu_sub_id;
1321            void (*sys_menu_node_function)(void);
1322          } sys_menu_t;
1323          
1324          typedef struct sys_menu_list
1325          {
1326            unsigned char id;
1327            unsigned char menu_id;
1328          } sys_menu_list;
1329          
1330          const sys_menu_t sys_menu_tree[] =
1331            {
1332              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1333          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
              #endif
1336          #ifdef __LOCK_RFID_CARD_SUPPORT__
1337              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1338          #endif
1339              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1340              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1341              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1342          #ifdef __LOCK_WIFI_SUPPORT__
1343              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1344              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 23  

1345              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_code_setting},
1346          #endif
1347          #ifdef __LOCK_110_SUPPORT__
1348              {STR_ID_SYSTEM, STR_ID_110, 0},
1349          
1350              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1351          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
              #endif
1354          #endif
1355          
1356              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1357              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1358              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1359          
1360              //PWD
1361              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1362              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1363              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1364              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1365          //FP
1366          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
                  //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
                  {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
                  {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
              #ifdef __LOCK_110_SUPPORT__
                  {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
                  {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
              #endif
              #endif
1376          #ifdef __LOCK_RFID_CARD_SUPPORT__
1377              //RF
1378              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1379              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1380              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1381              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1382          #endif
1383              //admin
1384              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1385          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
              #endif
1390              //setting
1391              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1392              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1393          
1394              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1395              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1396              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1397              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1398          };
1399          
1400          static unsigned char g_dq_menu_father_id;
1401          static sys_menu_list g_dq_menu_list_id[10];
1402          static unsigned char g_dq_menu_count;
1403          
1404          /*
1405          parameter: 
1406            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 24  

1407          return :
1408            none
1409          */
1410          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1411          {
1412   1        g_dq_menu_father_id = father_id;
1413   1        return;
1414   1      }
1415          
1416          /*
1417          parameter: 
1418            none
1419          return :
1420            none
1421          */
1422          unsigned char mmi_dq_sys_get_menu_count(void)
1423          {
1424   1        return g_dq_menu_count;
1425   1      }
1426          
1427          /*
1428          parameter: 
1429            none
1430          return :
1431            none
1432          */
1433          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1434          {
1435   1        unsigned char i = 0, j = 0;
1436   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1437   1      
1438   1        g_dq_menu_father_id = father_id;
1439   1      
1440   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1441   1        g_dq_menu_count = 0;
1442   1      
1443   1        for (i = 0; i < menu_tree_size; i++)
1444   1        {
1445   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1446   2          {
1447   3            g_dq_menu_list_id[j].id = i;
1448   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1449   3            j++;
1450   3            g_dq_menu_count++;
1451   3          }
1452   2        }
1453   1        return;
1454   1      }
1455          
1456          /*
1457          parameter: 
1458            none
1459          return :
1460            none
1461          */
1462          void mmi_dq_sys_show_cur_menu_list(void)
1463          {
1464   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1465   1      
1466   1      #ifdef __LOCK_AUDIO_SUPPORT__
1467   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1468   1      #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 25  

1469   1      #ifdef __LOCK_FP_SUPPORT__
                mmi_dq_fp_light(FP_NONE_COLOR);
              #endif
1472   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1473   1        return;
1474   1      }
1475          
1476          /*
1477          parameter: 
1478            none
1479          return :
1480            current machine status
1481          */
1482          void mmi_dq_sys_get_pre_menu_list(void)
1483          {
1484   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1485   1        {
1486   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1487   2        }
1488   1        else
1489   1        {
1490   2          unsigned char i = 0;
1491   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1492   2      
1493   2          for (i = 0; i < menu_tree_size; i++)
1494   2          {
1495   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1496   3            {
1497   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1498   4              break;
1499   4            }
1500   3          }
1501   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1502   2      #ifdef __LOCK_AUDIO_SUPPORT__
1503   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1504   2      #endif
1505   2        }
1506   1        return;
1507   1      }
1508          
1509          /*
1510          parameter: 
1511            none
1512          return :
1513            none
1514          */
1515          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1516          {
1517   1        unsigned char i = 0;
1518   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1519   1        if (menu_id >= g_dq_menu_count)
1520   1          return RET_FAIL;
1521   1        i = g_dq_menu_list_id[menu_id].id;
1522   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1523   1        {
1524   2          sys_menu_tree[i].sys_menu_node_function();
1525   2        }
1526   1        else
1527   1        {
1528   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1529   2      
1530   2      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/21/2021 14:09:44 PAGE 26  

1531   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1532   2      #endif
1533   2        }
1534   1      
1535   1        return RET_SUCESS;
1536   1      }
1537          
1538          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1900    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    170      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
