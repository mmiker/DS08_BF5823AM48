C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          #include "delay.h"
  16          #include "dqiot_fp_sy.h"
  17          
  18          static unsigned char g_sys_door_open_flag = 0;
  19          
  20          static unsigned int g_timer2_sleep_count = 0;
  21          static unsigned int g_timer2_count = 0;
  22          static unsigned int g_timer2_set_count = 0;
  23          static unsigned char g_timer2_flag = 0;
  24          
  25          static unsigned char g_wifi_check_flag = 0;
  26          static unsigned char g_wifi_check_count = 0;
  27          static unsigned char g_wifi_check_type = 0;
  28          
  29          /* RFID */
  30          static unsigned char g_rfid_check_flag = 1;
  31          static unsigned int g_rfid_count = 0;
  32          unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_WIFI_SETTING_DELAY 60000
  50          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  51          #define MMI_LOCK_ERROR_DELAY 60000
  52          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  53          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 2   

  54          parameter: 
  55            none
  56          return :
  57            none
  58          */
  59          void mmi_dq_sys_init(void)
  60          {
  61   1        mmi_InitQueue();
  62   1        mmi_ms_pwd_init_var();
  63   1        mmi_dq_fs_init();
  64   1      }
  65          /*
  66          parameter: 
  67            none
  68          return :
  69            none
  70          */
  71          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  72          {
  73   1        unsigned char audio_id = 0;
  74   1      
  75   1        time_msec = 0;
  76   1      
  77   1      #ifdef __LOCK_AUDIO_SUPPORT__
  78   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  79   1      
  80   1        mmi_dq_aud_play_with_id(audio_id);
  81   1      
  82   1      #endif
  83   1        return;
  84   1      }
  85          
  86          /*
  87          parameter: 
  88            none
  89          return :
  90            none
  91          */
  92          void mmi_dq_sys_lock_add_admin_suc(void)
  93          {
  94   1        mmi_dq_fs_set_admin_status(1);
  95   1      
  96   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  97   1      }
  98          
  99          /*
 100          function: system enter sleep
 101          parameter: 
 102            none
 103          return :
 104            none
 105          */
 106          void mmi_dq_sys_enter_sleep(void)
 107          {
 108   1        mmi_dq_bsp_enter_sleep();
 109   1      
 110   1        g_timer2_flag = 0;
 111   1        g_sys_door_open_flag = 0;
 112   1        FP_Set_Light(FP_NONE_COLOR);
 113   1      
 114   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 115   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 3   

 116          
 117          /*
 118          function: system wake up
 119          parameter: 
 120            none
 121          return :
 122            none
 123          */
 124          void mmi_dq_sys_wake_up(void)
 125          {
 126   1      
 127   1        mmi_dq_bsp_wake_up();
 128   1        if (mmi_dq_sys_check_vbat() == 0)
 129   1        {
 130   2          mmi_dq_wifi_wakeup();
*** WARNING C206 IN LINE 130 OF mmi_src\mmi_sys.c: 'mmi_dq_wifi_wakeup': missing function-prototype
 131   2      #ifdef __LOCK_FP_SUPPORT__
 132   2          mmi_dq_fp_init(); //���֡����
 133   2      #endif
 134   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 135   2        }
 136   1      }
 137          
 138          /*
 139          function: 
 140          parameter: 
 141            none
 142          return :
 143            none
 144          */
 145          void mmi_dq_sys_door_open_cb(void)
 146          {
 147   1        mmi_dq_motor_stop();
 148   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 149   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 150   1      }
 151          
 152          /*
 153          function: 
 154          parameter: 
 155            none
 156          return :
 157            none
 158          */
 159          void mmi_dq_sys_door_open(sys_open_type type)
 160          {
 161   1        g_lock_error_flag = 0;
 162   1        if (mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL && SYS_OPEN_BY_WIFI != type)
 163   1        {
 164   2          if (g_sys_door_open_flag & (~type) != 0)
 165   2          {
 166   3            g_sys_door_open_flag = 0;
 167   3          }
 168   2          else
 169   2          {
 170   3            g_sys_door_open_flag &= type;
 171   3            return;
 172   3          }
 173   2        }
 174   1      
 175   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 176   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 4   

 177   1        mmi_dq_motor_turn_right();
 178   1        //mmi_dq_wifi_open_door();
 179   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 180   1      
 181   1        switch (type)
 182   1        {
 183   2        case SYS_OPEN_BY_PASSWORD:
 184   2          mmi_dq_wifi_open_by_password();
 185   2          break;
 186   2        case SYS_OPEN_BY_FP:
 187   2          mmi_dq_wifi_open_by_fp();
 188   2          break;
 189   2        case SYS_OPEN_BY_RFID:
 190   2          mmi_dq_wifi_open_by_rfid();
 191   2          break;
 192   2        case SYS_OPEN_BY_WIFI:
 193   2          mmi_dq_wifi_open_by_wifi();
 194   2          break;
 195   2        }
 196   1      }
 197          
 198          /*
 199          function: 
 200          parameter: 
 201            none
 202          return :
 203            none
 204          */
 205          void mmi_dq_sys_door_open_fail(sys_open_type type)
 206          {
 207   1        g_lock_error_count = 0;
 208   1        g_lock_error_flag++;
 209   1        switch (type)
 210   1        {
 211   2        case SYS_OPEN_BY_PASSWORD:
 212   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 213   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 214   2            mmi_dq_wifi_pw_alarm();
 215   2          break;
 216   2        case SYS_OPEN_BY_FP:
 217   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 218   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 219   2            mmi_dq_wifi_fp_alarm();
 220   2          break;
 221   2        case SYS_OPEN_BY_RFID:
 222   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 223   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 224   2            mmi_dq_wifi_rfid_alarm();
 225   2          break;
 226   2        }
 227   1      }
 228          
 229          /*
 230          function: 
 231          parameter: 
 232            none
 233          return :
 234            none
 235          */
 236          unsigned char mmi_dq_sys_door_state_check(void)
 237          {
 238   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 5   

 239   1          return 1;
 240   1        return 0;
 241   1      }
 242          
 243          /*
 244          function: 
 245          parameter: 
 246            none
 247          return :
 248            none
 249          */
 250          void mmi_dq_sys_door_close_cb(void)
 251          {
 252   1        mmi_dq_motor_stop();
 253   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 254   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 255   1      }
 256          
 257          /*
 258          function: 
 259          parameter: 
 260            none
 261          return :
 262            none
 263          */
 264          void mmi_dq_sys_door_close(void)
 265          {
 266   1        mmi_dq_motor_turn_back();
 267   1        //mmi_dq_wifi_close_door();
 268   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 269   1      }
 270          
 271          /*
 272          function: 
 273          parameter: 
 274            none
 275          return :
 276            none
 277          */
 278          void mmi_dq_sys_aud_end(void)
 279          {
 280   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 281   1      }
 282          
 283          /*
 284          function: 
 285          parameter: 
 286            none
 287          return :
 288            none
 289          */
 290          void mmi_dq_sys_time_out_handle(void)
 291          {
 292   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 293   1      
 294   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 295   1        {
 296   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 297   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 298   2        }
 299   1      #ifdef __LOCK_FP_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 6   

 300   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 301   1        {
 302   2          if (mmi_dq_fs_get_admin_status() == 0)
 303   2            g_timer2_sleep_count = 0;
 304   2          else
 305   2          {
 306   3            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 307   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 308   3          }
 309   2        }
 310   1      #endif
 311   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 312   1        {
 313   2          g_timer2_sleep_count = 0;
 314   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 315   2        }
 316   1        else
 317   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 318   1      }
 319          
 320          /*
 321          function: 
 322          parameter: 
 323            none
 324          return :
 325            none
 326          */
 327          void System_timer_event_handler(void)
 328          {
 329   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 330   1      
 331   1        if (g_rfid_check_flag == 1)
 332   1        {
 333   2          g_rfid_count++;
 334   2          if (g_rfid_count == 2)
 335   2          {
 336   3            g_rfid_flag = 1;
 337   3            g_rfid_count = 0;
 338   3          }
 339   2        }
 340   1      
 341   1        if (g_timer2_flag == 1)
 342   1        {
 343   2          g_timer2_count++;
 344   2          if (g_timer2_count >= g_timer2_set_count)
 345   2          {
 346   3            g_timer2_flag = 2;
 347   3            g_timer2_count = 0;
 348   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 349   3          }
 350   2        }
 351   1      
 352   1        if (g_wifi_check_flag == 1)
 353   1        {
 354   2          g_wifi_check_count++;
 355   2          if (g_wifi_check_count >= 4)
 356   2          {
 357   3            g_wifi_check_flag = 2;
 358   3            g_wifi_check_count = 0;
 359   3          }
 360   2        }
 361   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 7   

 362   1        if (g_lock_error_flag > 0)
 363   1        {
 364   2          g_lock_error_count++;
 365   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 366   2            g_lock_error_flag = 0;
 367   2        }
 368   1      
 369   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 1) && (mmi_dq_wifi_get_running_flag() == 0))
 370   1        {
 371   2          unsigned char flag = 0;
 372   2          g_timer2_sleep_count++;
 373   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 374   2      #ifdef __LOCK_FP_SUPPORT__
 375   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 376   2      #endif
 377   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 378   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 379   2      #endif
 380   2          )
 381   2          {
 382   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 383   3            {
 384   4              flag = 1;
 385   4            }
 386   3          }
 387   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP)
 388   2          {
 389   3            flag = 1;
 390   3          }
 391   2      
 392   2          if (flag)
 393   2          {
 394   3            mmi_dq_sys_time_out_handle();
 395   3          }
 396   2        }
 397   1        else
 398   1          g_timer2_sleep_count = 0;
 399   1      }
 400          
 401          /*
 402          function: 
 403          parameter: 
 404            none
 405          return :
 406            none
 407          */
 408          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 409          {
 410   1        if (g_wifi_check_flag == 2)
 411   1        {
 412   2          g_wifi_check_flag = 0;
 413   2          return 1;
 414   2        }
 415   1        return 0;
 416   1      }
 417          
 418          /*
 419          function: 
 420          parameter: 
 421            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 8   

 422          return :
 423            none
 424          */
 425          void mmi_dq_sys_set_wifi_check(unsigned char type)
 426          {
 427   1        g_wifi_check_count = 0;
 428   1        g_wifi_check_flag = 1;
 429   1        g_wifi_check_type = type;
 430   1      }
 431          
 432          /*
 433          function: 
 434          parameter: 
 435            none
 436          return :
 437            none
 438          */
 439          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 440          {
 441   1        return g_wifi_check_type;
 442   1      }
 443          
 444          /*
 445          function: 
 446          parameter: 
 447            none
 448          return :
 449            none
 450          */
 451          void mmi_dq_sys_sleep_timer_reset(void)
 452          {
 453   1        g_timer2_sleep_count = 0;
 454   1        return;
 455   1      }
 456          
 457          /*
 458          function: 
 459          parameter: 
 460            none
 461          return :
 462            none
 463          */
 464          unsigned char mmi_dq_sys_get_timer2_flag(void)
 465          {
 466   1        if (g_timer2_flag == 2)
 467   1        {
 468   2          g_timer2_flag = 0;
 469   2          return 1;
 470   2        }
 471   1        return 0;
 472   1      }
 473          
 474          /*
 475          function: 
 476          parameter: 
 477            none
 478          return :
 479            none
 480          */
 481          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 482          {
 483   1        g_timer2_count = 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 9   

 484   1        g_timer2_set_count = count;
 485   1        g_timer2_delay_pro = pro;
 486   1        g_timer2_flag = 1;
 487   1        //dqiot_drv_timer2_start();
 488   1      }
 489          
 490          /*
 491          function: 
 492          parameter: 
 493            none
 494          return :
 495            none
 496          */
 497          void mmi_dq_sys_delay_event_pro(void)
 498          {
 499   1        g_timer2_delay_pro();
 500   1      }
 501          
 502          /*
 503          function: 
 504          parameter: 
 505            none
 506          return :
 507            none
 508          */
 509          unsigned char mmi_dq_sys_check_vbat(void)
 510          {
 511   1        unsigned char state = adc_VolT();
*** WARNING C206 IN LINE 511 OF mmi_src\mmi_sys.c: 'adc_VolT': missing function-prototype
 512   1        if (state > 0)
 513   1        {
 514   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 515   2          mmi_dq_wifi_lowpower_alarm();
 516   2          if (state == 2)
 517   2          {
 518   3      #if __Normal_handling__
                    mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
                    return 1;
              #endif
 522   3          }
 523   2        }
 524   1      
 525   1        return 0;
 526   1      }
 527          
 528          /*
 529          function: 
 530          parameter: 
 531            none
 532          return :
 533            none
 534          */
 535          void mmi_dq_sys_wifi_open(void)
 536          {
 537   1        if ((mmi_dq_fs_get_wifi_setting() == 0) || (mmi_dq_wifi_open_ask() == 0))
 538   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 539   1      }
 540          
 541          /*
 542          parameter: 
 543            none
 544          return :
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 10  

 545            none
 546          */
 547          void mmi_dq_sys_add_admin_pwd(void)
 548          {
 549   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 550   1        mmi_ms_pwd_init_var();
 551   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 552   1        return;
 553   1      }
 554          
 555          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 556          //********************************************************************************************************
             -***********************************************************************************
 557          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 558          //
 559          //        menu part
 560          //
 561          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 562          //********************************************************************************************************
             -***********************************************************************************
 563          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 564          
 565          /*
 566          parameter: 
 567            none
 568          return :
 569            none
 570          */
 571          void mmi_dq_sys_add_pwd(void)
 572          {
 573   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 574   1        {
 575   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 576   2          mmi_dq_sys_show_cur_menu_list();
 577   2        }
 578   1        else
 579   1        {
 580   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 581   2          mmi_ms_pwd_init_var();
 582   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 583   2        }
 584   1        return;
 585   1      }
 586          
 587          void mmi_dq_sys_add_pwd_con(void)
 588          {
 589   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 590   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 591   1        return;
 592   1      }
 593          
 594          /*
 595          parameter: 
 596            none
 597          return :
 598            none
 599          */
 600          static void mmi_dq_sys_chg_pwd(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 11  

 601          {
 602   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 603   1        return;
 604   1      }
 605          
 606          /*
 607          parameter: 
 608            none
 609          return :
 610            none
 611          */
 612          void mmi_dq_sys_del_pwd(void)
 613          {
 614   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 615   1        mmi_ms_pwd_init_var();
 616   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 617   1        return;
 618   1      }
 619          
 620          void mmi_dq_sys_del_pwd_con(void)
 621          {
 622   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 623   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 624   1        return;
 625   1      }
 626          
 627          /*
 628          parameter: 
 629            none
 630          return :
 631            none
 632          */
 633          static void mmi_dq_sys_clear_pwd(void)
 634          {
 635   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 636   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 637   1        return;
 638   1      }
 639          
 640          #if defined(__LOCK_FP_SUPPORT__)
 641          /*
 642          parameter: 
 643            none
 644          return :
 645            none
 646          */
 647          void mmi_dq_sys_add_fp(void)
 648          {
 649   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 650   1        {
 651   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 652   2          mmi_dq_sys_show_cur_menu_list();
 653   2        }
 654   1        else
 655   1        {
 656   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 657   2          mmi_dq_fp_light(FP_BLUE);
 658   2          mmi_ms_opt_time_init();
 659   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 660   2        }
 661   1        return;
 662   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 12  

 663          
 664          void mmi_dq_sys_add_fp_con(void)
 665          {
 666   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 667   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 668   1        return;
 669   1      }
 670          
 671          /*
 672          parameter: 
 673            none
 674          return :
 675            none
 676          */
 677          static void mmi_dq_sys_chg_fp(void)
 678          {
 679   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 680   1        return;
 681   1      }
 682          
 683          /*
 684          parameter: 
 685            none
 686          return :
 687            none
 688          */
 689          void mmi_dq_sys_del_fp(void)
 690          {
 691   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 692   1        mmi_dq_fp_light(FP_BLUE);
 693   1        mmi_ms_opt_time_init();
 694   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 695   1        return;
 696   1      }
 697          
 698          void mmi_dq_sys_del_fp_con(void)
 699          {
 700   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 701   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 702   1        return;
 703   1      }
 704          
 705          /*
 706          parameter: 
 707            none
 708          return :
 709            none
 710          */
 711          static void mmi_dq_sys_clear_fp(void)
 712          {
 713   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 714   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 715   1        return;
 716   1      }
 717          #endif
 718          #ifdef __LOCK_RFID_CARD_SUPPORT__
 719          /*
 720          parameter: 
 721            none
 722          return :
 723            none
 724          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 13  

 725          void mmi_dq_sys_add_rf(void)
 726          {
 727   1      
 728   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 729   1        {
 730   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 731   2          mmi_dq_sys_show_cur_menu_list();
 732   2        }
 733   1        else
 734   1        {
 735   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 736   2          mmi_ms_opt_time_init();
 737   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 738   2        }
 739   1        return;
 740   1      }
 741          
 742          void mmi_dq_sys_add_rf_con(void)
 743          {
 744   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 745   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 746   1        return;
 747   1      }
 748          
 749          /*
 750          parameter: 
 751            none
 752          return :
 753            none
 754          */
 755          static void mmi_dq_sys_chg_rf(void)
 756          {
 757   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 758   1        return;
 759   1      }
 760          
 761          /*
 762          parameter: 
 763            none
 764          return :
 765            none
 766          */
 767          void mmi_dq_sys_del_rf(void)
 768          {
 769   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 770   1        mmi_ms_opt_time_init();
 771   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 772   1        return;
 773   1      }
 774          
 775          void mmi_dq_sys_del_rf_con(void)
 776          {
 777   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 778   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 779   1        return;
 780   1      }
 781          
 782          /*
 783          parameter: 
 784            none
 785          return :
 786            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 14  

 787          */
 788          static void mmi_dq_sys_clear_rf(void)
 789          {
 790   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 791   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 792   1        return;
 793   1      }
 794          #endif
 795          
 796          /*
 797          parameter: 
 798            none
 799          return :
 800            none
 801          */
 802          static void mmi_dq_sys_open_pro_sound(void)
 803          {
 804   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 805   1      
 806   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 807   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 808   1        else
 809   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 810   1      
 811   1        mmi_dq_sys_show_cur_menu_list();
 812   1        return;
 813   1      }
 814          
 815          /*
 816          parameter: 
 817            none
 818          return :
 819            none
 820          */
 821          static void mmi_dq_sys_close_pro_sound(void)
 822          {
 823   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 824   1      
 825   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 826   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 827   1        else
 828   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 829   1      
 830   1        mmi_dq_sys_show_cur_menu_list();
 831   1        return;
 832   1      }
 833          
 834          /*
 835          parameter: 
 836            none
 837          return :
 838            none
 839          */
 840          static void mmi_dq_sys_sin_open_mode(void)
 841          {
 842   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 843   1      
 844   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 845   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 846   1        else
 847   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 848   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 15  

 849   1        mmi_dq_sys_show_cur_menu_list();
 850   1        return;
 851   1      }
 852          
 853          /*
 854          parameter: 
 855            none
 856          return :
 857            none
 858          */
 859          static void mmi_dq_sys_dbl_open_mode(void)
 860          {
 861   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 862   1      
 863   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
 864   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
 865   1        else
 866   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
 867   1      
 868   1        mmi_dq_sys_show_cur_menu_list();
 869   1        return;
 870   1      }
 871          
 872          #if defined(__LOCK_FP_SUPPORT__)
 873          /*
 874          parameter: 
 875            none
 876          return :
 877            none
 878          */
 879          void mmi_dq_sys_chg_admin_fp_No1(void)
 880          {
 881   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 882   1        mmi_dq_fp_light(FP_BLUE);
 883   1        mmi_ms_opt_time_init();
 884   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
 885   1        return;
 886   1      }
 887          
 888          /*
 889          parameter: 
 890            none
 891          return :
 892            none
 893          */
 894          void mmi_dq_sys_chg_admin_fp_No2(void)
 895          {
 896   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 897   1        mmi_dq_fp_light(FP_BLUE);
 898   1        mmi_ms_opt_time_init();
 899   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
 900   1        return;
 901   1      }
 902          #endif
 903          
 904          /*
 905          parameter: 
 906            none
 907          return :
 908            none
 909          */
 910          void mmi_dq_sys_chg_admin_pwd(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 16  

 911          {
 912   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 913   1        mmi_ms_pwd_init_var();
 914   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 915   1        return;
 916   1      }
 917          
 918          /*
 919          parameter: 
 920            none
 921          return :
 922            none
 923          */
 924          void mmi_dq_sys_restore_lock(void)
 925          {
 926   1        unsigned char retval = 0;
 927   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
 928   1      
 929   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
 930   1          retval = 1;
 931   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
 932   1          retval = 1;
 933   1      #ifdef __LOCK_FP_SUPPORT__
 934   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
 935   1          retval = 1;
 936   1      #endif
 937   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 938   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
 939   1          retval = 1;
 940   1      #endif
 941   1      
 942   1        if (retval == 0)
 943   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SYS_RESTORE_SUCCESS);
 944   1        else
 945   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 946   1      
 947   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 948   1        return;
 949   1      }
 950          
 951          /*
 952          parameter: 
 953            none
 954          return :
 955            none
 956          */
 957          static void mmi_dq_sys_restore_lock_con(void)
 958          {
 959   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
 960   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
 961   1      }
 962          
 963          /*
 964          parameter: 
 965            none
 966          return :
 967            none
 968          */
 969          static void mmi_dq_sys_wifi_setting(void)
 970          {
 971   1        if (0 == mmi_dq_wifi_setting())
 972   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 17  

 973   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 974   2          mmi_dq_sys_show_cur_menu_list();
 975   2        }
 976   1        else
 977   1        {
 978   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
 979   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 980   2        }
 981   1      }
 982          
 983          typedef struct sys_menu_t
 984          {
 985            unsigned char menu_father_id;
 986            unsigned char menu_sub_id;
 987            void (*sys_menu_node_function)(void);
 988          } sys_menu_t;
 989          
 990          typedef struct sys_menu_list
 991          {
 992            unsigned char id;
 993            unsigned char menu_id;
 994          } sys_menu_list;
 995          
 996          const sys_menu_t sys_menu_tree[] =
 997            {
 998              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
 999          #if defined(__LOCK_FP_SUPPORT__)
1000              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1001          #endif
1002          #ifdef __LOCK_RFID_CARD_SUPPORT__
1003              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1004          #endif
1005              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1006              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1007              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1008              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1009          
1010              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1011              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1012              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1013          
1014              //PWD
1015              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1016              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1017              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1018              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1019          //FP
1020          #if defined(__LOCK_FP_SUPPORT__)
1021              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1022              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1023              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1024              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1025          #endif
1026          #ifdef __LOCK_RFID_CARD_SUPPORT__
1027              //RF
1028              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1029              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1030              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1031              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1032          #endif
1033              //admin
1034              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 18  

1035          #if defined(__LOCK_FP_SUPPORT__)
1036              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1037              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1038              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1039          #endif
1040              //setting
1041              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1042              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1043          
1044              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1045              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1046              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1047              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1048          };
1049          
1050          static unsigned char g_dq_menu_father_id;
1051          static sys_menu_list g_dq_menu_list_id[8];
1052          static unsigned char g_dq_menu_count;
1053          
1054          /*
1055          parameter: 
1056            none
1057          return :
1058            none
1059          */
1060          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1061          {
1062   1        g_dq_menu_father_id = father_id;
1063   1        return;
1064   1      }
1065          
1066          /*
1067          parameter: 
1068            none
1069          return :
1070            none
1071          */
1072          unsigned char mmi_dq_sys_get_menu_count(void)
1073          {
1074   1        return g_dq_menu_count;
1075   1      }
1076          
1077          /*
1078          parameter: 
1079            none
1080          return :
1081            none
1082          */
1083          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1084          {
1085   1        unsigned char i = 0, j = 0;
1086   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1087   1      
1088   1        g_dq_menu_father_id = father_id;
1089   1      
1090   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1091   1        g_dq_menu_count = 0;
1092   1      
1093   1        for (i = 0; i < menu_tree_size; i++)
1094   1        {
1095   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1096   2          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 19  

1097   3            g_dq_menu_list_id[j].id = i;
1098   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1099   3            j++;
1100   3            g_dq_menu_count++;
1101   3          }
1102   2        }
1103   1        return;
1104   1      }
1105          
1106          /*
1107          parameter: 
1108            none
1109          return :
1110            none
1111          */
1112          void mmi_dq_sys_show_cur_menu_list(void)
1113          {
1114   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1115   1      
1116   1      #ifdef __LOCK_AUDIO_SUPPORT__
1117   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1118   1      #endif
1119   1      #ifdef __LOCK_FP_SUPPORT__
1120   1        mmi_dq_fp_light(FP_NONE_COLOR);
1121   1      #endif
1122   1      
1123   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1124   1        return;
1125   1      }
1126          
1127          /*
1128          parameter: 
1129            none
1130          return :
1131            current machine status
1132          */
1133          void mmi_dq_sys_get_pre_menu_list(void)
1134          {
1135   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1136   1        {
1137   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1138   2        }
1139   1        else
1140   1        {
1141   2          unsigned char i = 0;
1142   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1143   2      
1144   2          for (i = 0; i < menu_tree_size; i++)
1145   2          {
1146   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1147   3              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1148   3          }
1149   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1150   2      #ifdef __LOCK_AUDIO_SUPPORT__
1151   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1152   2      #endif
1153   2        }
1154   1        return;
1155   1      }
1156          
1157          /*
1158          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 11:31:07 PAGE 20  

1159            none
1160          return :
1161            none
1162          */
1163          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1164          {
1165   1        unsigned char i = 0;
1166   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1167   1        if (menu_id >= g_dq_menu_count)
1168   1          return RET_FAIL;
1169   1        i = g_dq_menu_list_id[menu_id].id;
1170   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1171   1        {
1172   2          sys_menu_tree[i].sys_menu_node_function();
1173   2        }
1174   1        else
1175   1        {
1176   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1177   2      
1178   2      #ifdef __LOCK_AUDIO_SUPPORT__
1179   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1180   2      #endif
1181   2        }
1182   1      
1183   1        return RET_SUCESS;
1184   1      }
1185          
1186          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1879    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    188      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
