C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          #include "mmi_decode.h"
  16          #include <stdio.h>
  17          
  18          #ifdef __LOCK_VIRTUAL_PASSWORD__
              #include "mmi_rtc.h"
              #define MMI_MAX_ERROR_TIMES 5
              #define MMI_ERROR_LOCK_TIME 60
              // #define MMI_TIMER_BASE_TIME 4
              #define MMI_TIMER_ENTER_SLEEP 10000
              #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
              #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
              #define MMI_TIMER_ENTER_SLEEP_DELAY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
              static uint32_t g_last_error_time = 0;
              static unsigned char g_multiple_error_times = 0;
              static uint8_t lock_easy_open_mode = 0;
              static uint8_t lock_inside_lock = 0;
              //static unsigned int g_enter_sleep_set_time = MMI_TIMER_ENTER_SLEEP_COUNT;
              #endif //__LOCK_VIRTUAL_PASSWORD__
  33          
  34          // extern void printfS(char *show, char *status);
  35          // extern void printfV(char *show, int value);
  36          
  37          static unsigned char g_sys_door_open_flag = 0;
  38          
  39          static unsigned int g_timer2_sleep_count = 0;
  40          static unsigned int g_timer2_count = 0;
  41          static unsigned int g_timer2_set_count = 0;
  42          static unsigned char g_timer2_flag = 0;
  43          
  44          static unsigned char g_wifi_check_flag = 0;
  45          static unsigned char g_wifi_check_count = 0;
  46          static unsigned char g_wifi_check_type = 0;
  47          
  48          /* clock */
  49          static unsigned char g_clock_flag = 0;
  50          
  51          /* RFID */
  52          static unsigned char g_rfid_flag = 0;
  53          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 2   

  54          #define LOCK_MAX_EEROR_TIMES 5
  55          static unsigned char g_lock_error_flag = 0;
  56          static unsigned int g_lock_error_count = 0;
  57          
  58          timer2_delay_pro g_timer2_delay_pro = 0;
  59          
  60          #define MMI_TIMER_BASE_TIME 100
  61          #define MMI_TIMER_ENTER_SLEEP 10000
  62          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  63          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  64          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  65          #define MMI_TIMER_DOOR_OPEN 6000
  66          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  67          #define MMI_TIMER_MOTOR 300
  68          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  69          #define MMI_TIMER_WIFI_CHECK 1000
  70          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  71          #define MMI_WIFI_SETTING_DELAY 60000
  72          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  73          #define MMI_LOCK_ERROR_DELAY 60000
  74          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  75          /*
  76          parameter: 
  77            none
  78          return :
  79            none
  80          */
  81          void mmi_dq_sys_init(void)
  82          {
  83   1        mmi_InitQueue();
  84   1        mmi_ms_pwd_init_var();
  85   1        mmi_dq_fs_init();
  86   1      }
  87          /*
  88          parameter: 
  89            none
  90          return :
  91            none
  92          */
  93          // #ifndef __LOCK_VIRTUAL_PASSWORD__
  94          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  95          {
  96   1        unsigned char audio_id = 0;
  97   1      
  98   1        time_msec = 0;
  99   1      
 100   1      #ifdef __LOCK_AUDIO_SUPPORT__
 101   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
 102   1        mmi_dq_aud_play_with_id(audio_id);
 103   1      #endif
 104   1        return;
 105   1      }
 106          // #endif
 107          
 108          /*
 109          parameter: 
 110            none
 111          return :
 112            none
 113          */
 114          void mmi_dq_sys_lock_add_admin_suc(void)
 115          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 3   

 116   1        mmi_dq_fs_set_admin_status(1);
 117   1      
 118   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 119   1      }
 120          
 121          /*
 122          function: system enter sleep
 123          parameter: 
 124            none
 125          return :
 126            none
 127          */
 128          void mmi_dq_sys_enter_sleep(void)
 129          {
 130   1        mmi_dq_bsp_enter_sleep();
 131   1      
 132   1        g_timer2_flag = 0;
 133   1        g_sys_door_open_flag = 0;
 134   1      
 135   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 136   1      }
 137          
 138          /*
 139          function: system wake up
 140          parameter: 
 141            none
 142          return :
 143            none
 144          */
 145          void mmi_dq_sys_wake_up(void)
 146          {
 147   1      
 148   1        mmi_dq_bsp_wake_up();
 149   1        if (mmi_dq_sys_check_vbat() == 0)
 150   1        {
 151   2      #ifdef __LOCK_WIFI_SUPPORT__
 152   2          mmi_dq_wifi_wakeup();
 153   2      #endif
 154   2      #ifdef __LOCK_FP_SUPPORT__
                  mmi_dq_fp_init(); //握手、点灯
              #endif
 157   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 158   2        }
 159   1      }
 160          
 161          /*
 162          function: 
 163          parameter: 
 164            none
 165          return :
 166            none
 167          */
 168          void mmi_dq_sys_door_open_cb(void)
 169          {
 170   1      #ifdef __LOCK_MOTOR_SUPPORT__
 171   1        mmi_dq_motor_stop();
 172   1      #endif
 173   1      #ifdef __LOCK_AUDIO_SUPPORT__
 174   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 175   1      #endif
 176   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 177   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 4   

 178          
 179          /*
 180          function: 
 181          parameter: 
 182            none
 183          return :
 184            none
 185          */
 186          void mmi_dq_sys_door_open(sys_open_type type)
 187          {
 188   1      #ifdef __LOCK_BUS_SUPPORT__
 189   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 190   1        {
 191   2      #ifdef __LOCK_AUDIO_SUPPORT__
 192   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 193   2      #endif
 194   2      #ifdef __LOCK_WIFI_SUPPORT__
 195   2          switch (type)
 196   2          {
 197   3          case SYS_OPEN_BY_PASSWORD:
 198   3            mmi_dq_wifi_pw_alarm();
 199   3            break;
 200   3          case SYS_OPEN_BY_FP:
 201   3            mmi_dq_wifi_fp_alarm();
 202   3            break;
 203   3          case SYS_OPEN_BY_RFID:
 204   3            mmi_dq_wifi_rfid_alarm();
 205   3            break;
 206   3          }
 207   2      #endif
 208   2          return;
 209   2        }
 210   1      #endif
 211   1        g_lock_error_flag = 0;
 212   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 213   1        {
 214   2          if ((g_sys_door_open_flag & (~type)) != 0)
 215   2          {
 216   3            g_sys_door_open_flag = 0;
 217   3          }
 218   2          else
 219   2          {
 220   3            g_sys_door_open_flag |= type;
 221   3      #ifdef __LOCK_AUDIO_SUPPORT__
 222   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 223   3      #endif
 224   3            return;
 225   3          }
 226   2        }
 227   1      
 228   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 229   1      
 230   1      #ifdef __LOCK_MOTOR_SUPPORT__
 231   1        mmi_dq_motor_turn_right();
 232   1      #endif
 233   1        //mmi_dq_wifi_open_door();
 234   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 235   1      
 236   1      #ifdef __LOCK_WIFI_SUPPORT__
 237   1        switch (type)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 5   

 238   1        {
 239   2      #ifdef __LOCK_110_SUPPORT__
 240   2        case SYS_OPEN_BY_110_PASSWORD:
 241   2          mmi_dq_wifi_send_pwd_110(get_index);
 242   2          // printfV("get_index",(int)get_index);
 243   2          break;
 244   2        case SYS_OPEN_BY_110_FP:
 245   2          mmi_dq_wifi_send_fp_110(get_index);
 246   2          // printfV("get_index",(int)get_index);
 247   2          break;
 248   2      #endif
 249   2        case SYS_OPEN_BY_PASSWORD:
 250   2          mmi_dq_wifi_open_by_password(get_index);
 251   2          // printfV("get_index",(int)get_index);
 252   2          break;
 253   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
                  mmi_dq_wifi_open_by_fp(get_index);
                  // printfV("get_index",(int)get_index);
                  break;
              #endif
 259   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 260   2        case SYS_OPEN_BY_RFID:
 261   2          mmi_dq_wifi_open_by_rfid(get_index);
 262   2          // printfV("get_index",(int)get_index);
 263   2          break;
 264   2      #endif
 265   2        case SYS_OPEN_BY_WIFI:
 266   2          mmi_dq_wifi_open_by_wifi();
 267   2          break;
 268   2        }
 269   1      
 270   1        if (pv_add_switch == 0)
 271   1          ;
 272   1        else if (pv_add_switch == 1)
 273   1          mmi_dq_wifi_take_photos(); //拍照
 274   1        else if (pv_add_switch == 2)
 275   1          mmi_dq_wifi_take_videos(); //录像
 276   1        else if (pv_add_switch == 3)
 277   1        {
 278   2          mmi_dq_wifi_take_photos(); //拍照
 279   2          mmi_dq_wifi_take_videos(); //录像
 280   2        }
 281   1      
 282   1      #endif
 283   1      }
 284          
 285          /*
 286          function: 
 287          parameter: 
 288            none
 289          return :
 290            none
 291          */
 292          void mmi_dq_sys_door_open_fail(sys_open_type type)
 293          {
 294   1        g_lock_error_count = 0;
 295   1        g_lock_error_flag++;
 296   1        switch (type)
 297   1        {
 298   2        case SYS_OPEN_BY_PASSWORD:
 299   2      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 6   

 300   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 301   2      #endif
 302   2      #ifdef __LOCK_WIFI_SUPPORT__
 303   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 304   2            mmi_dq_wifi_pw_alarm();
 305   2      #endif
 306   2          break;
 307   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                  if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
                    mmi_dq_wifi_fp_alarm();
              #endif
                  break;
              #endif
 318   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 319   2        case SYS_OPEN_BY_RFID:
 320   2      #ifdef __LOCK_AUDIO_SUPPORT__
 321   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 322   2      #endif
 323   2      #ifdef __LOCK_WIFI_SUPPORT__
 324   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 325   2            mmi_dq_wifi_rfid_alarm();
 326   2      #endif
 327   2          break;
 328   2      #endif
 329   2        }
 330   1      }
 331          
 332          /*
 333          function: 
 334          parameter: 
 335            none
 336          return :
 337            none
 338          */
 339          unsigned char mmi_dq_sys_door_state_check(void)
 340          {
 341   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 342   1          return 1;
 343   1        return 0;
 344   1      }
 345          
 346          /*
 347          function: 
 348          parameter: 
 349            none
 350          return :
 351            none
 352          */
 353          void mmi_dq_sys_door_close_cb(void)
 354          {
 355   1      #ifdef __LOCK_MOTOR_SUPPORT__
 356   1        mmi_dq_motor_stop();
 357   1      #endif
 358   1      #ifdef __LOCK_AUDIO_SUPPORT__
 359   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 360   1      #endif
 361   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 7   

 362   1      }
 363          
 364          /*
 365          function: 
 366          parameter: 
 367            none
 368          return :
 369            none
 370          */
 371          void mmi_dq_sys_door_close(void)
 372          {
 373   1      #ifdef __LOCK_MOTOR_SUPPORT__
 374   1        mmi_dq_motor_turn_back();
 375   1      #endif
 376   1        //mmi_dq_wifi_close_door();
 377   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 378   1      }
 379          
 380          /*
 381          function: 
 382          parameter: 
 383            none
 384          return :
 385            none
 386          */
 387          void mmi_dq_sys_aud_end(void)
 388          {
 389   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 390   1      }
 391          
 392          /*
 393          function: 
 394          parameter: 
 395            none
 396          return :
 397            none
 398          */
 399          void mmi_dq_sys_time_out_handle(void)
 400          {
 401   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 402   1      
 403   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 404   1        {
 405   2      #ifdef __LOCK_AUDIO_SUPPORT__
 406   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 407   2      #endif
 408   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 409   2        }
 410   1      #ifdef __LOCK_FP_SUPPORT__
                else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
                {
                  if (mmi_dq_fs_get_admin_status() == 0)
                    g_timer2_sleep_count = 0;
                  else
                  {
              #ifdef __LOCK_AUDIO_SUPPORT__
                    mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
              #endif
                    mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
                  }
                }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 8   

              #endif
 424   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 425   1        {
 426   2          g_timer2_sleep_count = 0;
 427   2      #ifdef __LOCK_AUDIO_SUPPORT__
 428   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 429   2      #endif
 430   2        }
 431   1        else
 432   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 433   1      }
 434          
 435          /*
 436          function: 
 437          parameter: 
 438            none
 439          return :
 440            none
 441          */
 442          void System_timer_event_handler(void)
 443          {
 444   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 445   1      
 446   1        g_rfid_flag = 1; /* RFID */
 447   1      
 448   1        /* clock */
 449   1        g_clock_flag++;
 450   1        if (g_clock_flag == 10)
 451   1        {
 452   2          g_clock_flag = 0;
 453   2          /* 秒 */
 454   2          if (t.tm_sec < 59)
 455   2            t.tm_sec++;
 456   2          else
 457   2          {
 458   3            t.tm_sec = 0;
 459   3            /* 分 */
 460   3            if (t.tm_min < 59)
 461   3              t.tm_min++;
 462   3            else
 463   3            {
 464   4              t.tm_min = 0;
 465   4              /* 时 */
 466   4              if (t.tm_hour < 23)
 467   4                t.tm_hour++;
 468   4              else
 469   4              {
 470   5                t.tm_hour = 0;
 471   5                /* 日 */
 472   5                if (t.tm_mon == 1 || t.tm_mon == 3 || t.tm_mon == 5 || t.tm_mon == 7 || t.tm_mon == 8 || t.tm_mon == 
             -10 || t.tm_mon == 12)
 473   5                {
 474   6                  if (t.tm_mday < 30)
 475   6                    t.tm_mday++;
 476   6                  else
 477   6                  {
 478   7                    t.tm_mday = 1;
 479   7                    /* 月 */
 480   7                    if (t.tm_mon < 11)
 481   7                      t.tm_mon++;
 482   7                    else
 483   7                    {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 9   

 484   8                      t.tm_mon = 1;
 485   8                      t.tm_year++;
 486   8                    }
 487   7                  }
 488   6                }
 489   5                else if (t.tm_mon == 4 || t.tm_mon == 6 || t.tm_mon == 9 || t.tm_mon == 11)
 490   5                {
 491   6                  if (t.tm_mday < 29)
 492   6                    t.tm_mday++;
 493   6                  else
 494   6                  {
 495   7                    t.tm_mday = 1;
 496   7                    /* 月 */
 497   7                    if (t.tm_mon < 11)
 498   7                      t.tm_mon++;
 499   7                    else
 500   7                    {
 501   8                      t.tm_mon = 1;
 502   8                      t.tm_year++;
 503   8                    }
 504   7                  }
 505   6                }
 506   5                else if (t.tm_mon == 2)
 507   5                {
 508   6                  //判断闰年 1.能被4整除而不能被100整除。2.能被100整除也能被400整除。
 509   6                  if ((t.tm_year % 4 == 0 && t.tm_year % 100 > 0) || (t.tm_year % 100 == 0 && t.tm_year % 400 == 0))
 510   6                  {
 511   7                    if (t.tm_mday < 28)
 512   7                      t.tm_mday++;
 513   7                    else
 514   7                    {
 515   8                      t.tm_mday = 1;
 516   8                      /* 月 */
 517   8                      if (t.tm_mon < 11)
 518   8                        t.tm_mon++;
 519   8                      else
 520   8                      {
 521   9                        t.tm_mon = 1;
 522   9                        t.tm_year++;
 523   9                      }
 524   8                    }
 525   7                  }
 526   6                  else
 527   6                  {
 528   7                    if (t.tm_mday < 27)
 529   7                      t.tm_mday++;
 530   7                    else
 531   7                    {
 532   8                      t.tm_mday = 1;
 533   8                      /* 月 */
 534   8                      if (t.tm_mon < 11)
 535   8                        t.tm_mon++;
 536   8                      else
 537   8                      {
 538   9                        t.tm_mon = 1;
 539   9                        t.tm_year++;
 540   9                      }
 541   8                    }
 542   7                  }
 543   6                }
 544   5              }
 545   4            }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 10  

 546   3          }
 547   2        }
 548   1      
 549   1        if (g_timer2_flag == 1)
 550   1        {
 551   2          g_timer2_count++;
 552   2          if (g_timer2_count >= g_timer2_set_count)
 553   2          {
 554   3            g_timer2_flag = 2;
 555   3            g_timer2_count = 0;
 556   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 557   3          }
 558   2        }
 559   1      
 560   1        if (g_wifi_check_flag == 1)
 561   1        {
 562   2          g_wifi_check_count++;
 563   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 564   2          {
 565   3            g_wifi_check_flag = 2;
 566   3            g_wifi_check_count = 0;
 567   3          }
 568   2        }
 569   1      
 570   1        if (g_lock_error_flag > 0)
 571   1        {
 572   2          g_lock_error_count++;
 573   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 574   2            g_lock_error_flag = 0;
 575   2        }
 576   1      
 577   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
 578   1      #ifdef __LOCK_WIFI_SUPPORT__
 579   1          && (mmi_dq_wifi_get_running_flag() == 0)
 580   1      #endif
 581   1        )
 582   1        {
 583   2          unsigned char flag = 0;
 584   2          g_timer2_sleep_count++;
 585   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 586   2      #ifdef __LOCK_FP_SUPPORT__
                    || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
              #endif
 589   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 590   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 591   2      #endif
 592   2          )
 593   2          {
 594   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 595   3            {
 596   4              flag = 1;
 597   4            }
 598   3          }
 599   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 600   2          {
 601   3            flag = 1;
 602   3          }
 603   2      
 604   2          if (flag)
 605   2          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 11  

 606   3            mmi_dq_sys_time_out_handle();
 607   3          }
 608   2        }
 609   1        else
 610   1          g_timer2_sleep_count = 0;
 611   1      }
 612          
 613          /*
 614          function: 
 615          parameter: 
 616            none
 617          return :
 618            none
 619          */
 620          unsigned char mmi_dq_sys_get_rfid_flag(void)
 621          {
 622   1        if (g_rfid_flag == 1)
 623   1        {
 624   2          g_rfid_flag = 0;
 625   2          return 1;
 626   2        }
 627   1        return 0;
 628   1      }
 629          
 630          /*
 631          function: 
 632          parameter: 
 633            none
 634          return :
 635            none
 636          */
 637          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 638          {
 639   1        if (g_wifi_check_flag == 2)
 640   1        {
 641   2          g_wifi_check_flag = 0;
 642   2          return 1;
 643   2        }
 644   1        return 0;
 645   1      }
 646          
 647          /*
 648          function: 
 649          parameter: 
 650            none
 651          return :
 652            none
 653          */
 654          void mmi_dq_sys_set_wifi_check(unsigned char type)
 655          {
 656   1        g_wifi_check_count = 0;
 657   1        g_wifi_check_flag = 1;
 658   1        g_wifi_check_type = type;
 659   1      }
 660          
 661          /*
 662          function: 
 663          parameter: 
 664            none
 665          return :
 666            none
 667          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 12  

 668          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 669          {
 670   1        return g_wifi_check_type;
 671   1      }
 672          
 673          /*
 674          function: 
 675          parameter: 
 676            none
 677          return :
 678            none
 679          */
 680          void mmi_dq_sys_sleep_timer_reset(void)
 681          {
 682   1        g_timer2_sleep_count = 0;
 683   1        return;
 684   1      }
 685          
 686          /*
 687          function: 
 688          parameter: 
 689            none
 690          return :
 691            none
 692          */
 693          unsigned char mmi_dq_sys_get_timer2_flag(void)
 694          {
 695   1        if (g_timer2_flag == 2)
 696   1        {
 697   2          g_timer2_flag = 0;
 698   2          return 1;
 699   2        }
 700   1        return 0;
 701   1      }
 702          
 703          /*
 704          function: 
 705          parameter: 
 706            none
 707          return :
 708            none
 709          */
 710          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 711          {
 712   1        if (count != 0)
 713   1        {
 714   2          g_timer2_count = 0;
 715   2          g_timer2_set_count = count;
 716   2          g_timer2_delay_pro = pro;
 717   2          g_timer2_flag = 1;
 718   2        }
 719   1        else
 720   1          pro();
 721   1      }
 722          
 723          /*
 724          function: 
 725          parameter: 
 726            none
 727          return :
 728            none
 729          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 13  

 730          void mmi_dq_sys_delay_event_pro(void)
 731          {
 732   1        if (g_timer2_delay_pro != 0)
 733   1          g_timer2_delay_pro();
 734   1      }
 735          
 736          /*
 737          function: 
 738          parameter: 
 739            none
 740          return :
 741            none
 742          */
 743          unsigned char mmi_dq_sys_check_vbat(void)
 744          {
 745   1        unsigned char state = adc_VolT();
 746   1        if (state > 0)
 747   1        {
 748   2      #ifdef __LOCK_AUDIO_SUPPORT__
 749   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 750   2      #endif
 751   2      #ifdef __LOCK_WIFI_SUPPORT__
 752   2          mmi_dq_wifi_lowpower_alarm();
 753   2      #endif
 754   2          if (state == 2)
 755   2          {
 756   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 757   3            return 1;
 758   3          }
 759   2        }
 760   1      
 761   1        return 0;
 762   1      }
 763          
 764          /**
 765            * @brief  远程开门
 766            * @param  none
 767            * @return none
 768            * @note   none
 769            * @see    none
 770            */
 771          void mmi_dq_sys_wifi_open(void)
 772          {
 773   1      #ifdef __LOCK_WIFI_SUPPORT__
 774   1        if (mmi_dq_wifi_open_ask() == 0)
 775   1      #ifdef __LOCK_AUDIO_SUPPORT__
 776   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 777   1      #else
                  ;
              #endif
 780   1      #endif
 781   1      }
 782          
 783          /*
 784          parameter: 
 785            none
 786          return :
 787            none
 788          */
 789          void mmi_dq_sys_add_admin_pwd(void)
 790          {
 791   1      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 14  

 792   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 793   1      #endif
 794   1        mmi_ms_pwd_init_var();
 795   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 796   1        return;
 797   1      }
 798          
 799          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 800          //********************************************************************************************************
             -***********************************************************************************
 801          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 802          //
 803          //        menu part
 804          //
 805          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 806          //********************************************************************************************************
             -***********************************************************************************
 807          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 808          
 809          /*
 810          parameter: 
 811            none
 812          return :
 813            none
 814          */
 815          void mmi_dq_sys_add_pwd(void)
 816          {
 817   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 818   1        {
 819   2      #ifdef __LOCK_AUDIO_SUPPORT__
 820   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 821   2      #endif
 822   2          mmi_dq_sys_show_cur_menu_list();
 823   2        }
 824   1        else
 825   1        {
 826   2      #ifdef __LOCK_AUDIO_SUPPORT__
 827   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 828   2      #endif
 829   2          mmi_ms_pwd_init_var();
 830   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 831   2        }
 832   1        return;
 833   1      }
 834          
 835          void mmi_dq_sys_add_pwd_con(void)
 836          {
 837   1      #ifdef __LOCK_AUDIO_SUPPORT__
 838   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 839   1      #endif
 840   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 841   1        return;
 842   1      }
 843          
 844          #ifdef __LOCK_110_SUPPORT__
 845          /*
 846          parameter: 
 847            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 15  

 848          return :
 849            none
 850          */
 851          void mmi_dq_sys_add_110_pwd(void)
 852          {
 853   1        mmi_dq_wifi_wakeup();
 854   1        if (mmi_dq_wifi_check() == 1)
 855   1        {
 856   2      #ifdef __LOCK_AUDIO_SUPPORT__
 857   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 858   2      #endif
 859   2          mmi_dq_sys_show_cur_menu_list();
 860   2          return;
 861   2        }
 862   1      #ifdef __LOCK_AUDIO_SUPPORT__
 863   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 864   1      #endif
 865   1        mmi_ms_pwd_init_var();
 866   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 867   1        return;
 868   1      }
 869          #endif
 870          /*
 871          parameter: 
 872            none
 873          return :
 874            none
 875          */
 876          static void mmi_dq_sys_chg_pwd(void)
 877          {
 878   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 879   1        return;
 880   1      }
 881          
 882          /*
 883          parameter: 
 884            none
 885          return :
 886            none
 887          */
 888          void mmi_dq_sys_del_pwd(void)
 889          {
 890   1      #ifdef __LOCK_AUDIO_SUPPORT__
 891   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 892   1      #endif
 893   1        mmi_ms_pwd_init_var();
 894   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 895   1        return;
 896   1      }
 897          
 898          void mmi_dq_sys_del_pwd_con(void)
 899          {
 900   1      #ifdef __LOCK_AUDIO_SUPPORT__
 901   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 902   1      #endif
 903   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 904   1        return;
 905   1      }
 906          
 907          /*
 908          parameter: 
 909            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 16  

 910          return :
 911            none
 912          */
 913          static void mmi_dq_sys_clear_pwd(void)
 914          {
 915   1      #ifdef __LOCK_AUDIO_SUPPORT__
 916   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 917   1      #endif
 918   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 919   1        return;
 920   1      }
 921          
 922          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_fp(void)
              {
                if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                }
                else
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                  mmi_dq_fp_light(FP_BLUE);
                  mmi_ms_opt_time_init();
                  mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
                }
                return;
              }
              
              void mmi_dq_sys_add_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
                return;
              }
              
              #ifdef __LOCK_110_SUPPORT__
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 17  

                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
                return;
              }
              
              #endif
              
              /*
              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_chg_fp(void)
              {
                //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_fp(void)
              {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 18  

              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
                return;
              }
              
              void mmi_dq_sys_del_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_clear_fp(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
                return;
              }
              #endif
1067          #ifdef __LOCK_RFID_CARD_SUPPORT__
1068          /*
1069          parameter: 
1070            none
1071          return :
1072            none
1073          */
1074          void mmi_dq_sys_add_rf(void)
1075          {
1076   1      
1077   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
1078   1        {
1079   2      #ifdef __LOCK_AUDIO_SUPPORT__
1080   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
1081   2      #endif
1082   2          mmi_dq_sys_show_cur_menu_list();
1083   2        }
1084   1        else
1085   1        {
1086   2      #ifdef __LOCK_AUDIO_SUPPORT__
1087   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
1088   2      #endif
1089   2          mmi_ms_opt_time_init();
1090   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
1091   2        }
1092   1        return;
1093   1      }
1094          
1095          void mmi_dq_sys_add_rf_con(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 19  

1096          {
1097   1      #ifdef __LOCK_AUDIO_SUPPORT__
1098   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
1099   1      #endif
1100   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
1101   1        return;
1102   1      }
1103          
1104          /*
1105          parameter: 
1106            none
1107          return :
1108            none
1109          */
1110          static void mmi_dq_sys_chg_rf(void)
1111          {
1112   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
1113   1        return;
1114   1      }
1115          
1116          /*
1117          parameter: 
1118            none
1119          return :
1120            none
1121          */
1122          void mmi_dq_sys_del_rf(void)
1123          {
1124   1      #ifdef __LOCK_AUDIO_SUPPORT__
1125   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
1126   1      #endif
1127   1        mmi_ms_opt_time_init();
1128   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
1129   1        return;
1130   1      }
1131          
1132          void mmi_dq_sys_del_rf_con(void)
1133          {
1134   1      #ifdef __LOCK_AUDIO_SUPPORT__
1135   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
1136   1      #endif
1137   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
1138   1        return;
1139   1      }
1140          
1141          /*
1142          parameter: 
1143            none
1144          return :
1145            none
1146          */
1147          static void mmi_dq_sys_clear_rf(void)
1148          {
1149   1      #ifdef __LOCK_AUDIO_SUPPORT__
1150   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
1151   1      #endif
1152   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
1153   1        return;
1154   1      }
1155          #endif
1156          
1157          #ifdef __LOCK_DECODE_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 20  

1158          /**
1159            * @brief  add 8key from decode
1160            * @param  none
1161            * @return none
1162            * @note   none
1163            * @see    none
1164            */
1165          void mmi_dq_sys_add_decode(void)
1166          {
1167   1        dqiot_drv_uart0A_init();
1168   1        printf("###############\n");
1169   1        printf("A %04d-%02d-%02d %02d:%02d:%02d\r\n", t.tm_year, t.tm_mon + 1, t.tm_mday, t.tm_hour + 8, t.tm_min
             -, t.tm_sec);
1170   1        dqiot_drv_uart0B_init();
1171   1      
1172   1        if (mmi_dq_fs_get_decode_unuse_index() == 0xFF)
1173   1        {
1174   2      #ifdef __LOCK_AUDIO_SUPPORT__
1175   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
1176   2      #endif
1177   2          mmi_dq_sys_show_cur_menu_list();
1178   2        }
1179   1        else
1180   1        {
1181   2      #ifdef __LOCK_AUDIO_SUPPORT__
1182   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
1183   2      #endif
1184   2          mmi_ms_opt_time_init();
1185   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_DECODE_RANDOM);
1186   2        }
1187   1        return;
1188   1      }
1189          #endif
1190          
1191          /*
1192          parameter: 
1193            none
1194          return :
1195            none
1196          */
1197          static void mmi_dq_sys_open_pro_sound(void)
1198          {
1199   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1200   1      
1201   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
1202   1      #ifdef __LOCK_AUDIO_SUPPORT__
1203   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS)
1204   1      #endif
1205   1            ;
1206   1        else
1207   1      #ifdef __LOCK_AUDIO_SUPPORT__
1208   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL)
1209   1      #endif
1210   1            ;
1211   1      
1212   1        mmi_dq_sys_show_cur_menu_list();
1213   1        return;
1214   1      }
1215          
1216          /*
1217          parameter: 
1218            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 21  

1219          return :
1220            none
1221          */
1222          static void mmi_dq_sys_close_pro_sound(void)
1223          {
1224   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1225   1      
1226   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
1227   1      #ifdef __LOCK_AUDIO_SUPPORT__
1228   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS)
1229   1      #endif
1230   1            ;
1231   1        else
1232   1      #ifdef __LOCK_AUDIO_SUPPORT__
1233   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL)
1234   1      #endif
1235   1            ;
1236   1      
1237   1        mmi_dq_sys_show_cur_menu_list();
1238   1        return;
1239   1      }
1240          
1241          /*
1242          parameter: 
1243            none
1244          return :
1245            none
1246          */
1247          static void mmi_dq_sys_sin_open_mode(void)
1248          {
1249   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1250   1      
1251   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
1252   1      #ifdef __LOCK_AUDIO_SUPPORT__
1253   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS)
1254   1      #endif
1255   1            ;
1256   1        else
1257   1      #ifdef __LOCK_AUDIO_SUPPORT__
1258   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL)
1259   1      #endif
1260   1            ;
1261   1      
1262   1        mmi_dq_sys_show_cur_menu_list();
1263   1        return;
1264   1      }
1265          
1266          /*
1267          parameter: 
1268            none
1269          return :
1270            none
1271          */
1272          static void mmi_dq_sys_dbl_open_mode(void)
1273          {
1274   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1275   1      
1276   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1277   1      #ifdef __LOCK_AUDIO_SUPPORT__
1278   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS)
1279   1      #endif
1280   1            ;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 22  

1281   1        else
1282   1      #ifdef __LOCK_AUDIO_SUPPORT__
1283   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL)
1284   1      #endif
1285   1            ;
1286   1      
1287   1        mmi_dq_sys_show_cur_menu_list();
1288   1        return;
1289   1      }
1290          
1291          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No1(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No2(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
                return;
              }
              #endif
1326          
1327          /*
1328          parameter: 
1329            none
1330          return :
1331            none
1332          */
1333          void mmi_dq_sys_chg_admin_pwd(void)
1334          {
1335   1      #ifdef __LOCK_AUDIO_SUPPORT__
1336   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1337   1      #endif
1338   1        mmi_ms_pwd_init_var();
1339   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1340   1        return;
1341   1      }
1342          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 23  

1343          /*
1344          parameter: 
1345            none
1346          return :
1347            none
1348          */
1349          void mmi_dq_sys_restore_lock(void)
1350          {
1351   1        unsigned char retval = 0;
1352   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1353   1      
1354   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1355   1          retval = 1;
1356   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1357   1          retval = 1;
1358   1      #ifdef __LOCK_FP_SUPPORT__
                if (RET_SUCESS != mmi_dq_fs_clr_fp())
                  retval = 1;
              #endif
1362   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1363   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1364   1          retval = 1;
1365   1      #endif
1366   1      
1367   1        if (retval == 0)
1368   1      #ifdef __LOCK_AUDIO_SUPPORT__
1369   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS)
1370   1      #endif
1371   1            ;
1372   1        else
1373   1      #ifdef __LOCK_AUDIO_SUPPORT__
1374   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
1375   1      #endif
1376   1            ;
1377   1      
1378   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1379   1        return;
1380   1      }
1381          
1382          /*
1383          parameter: 
1384            none
1385          return :
1386            none
1387          */
1388          static void mmi_dq_sys_restore_lock_con(void)
1389          {
1390   1      #ifdef __LOCK_AUDIO_SUPPORT__
1391   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1392   1      #endif
1393   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1394   1      }
1395          
1396          #ifdef __LOCK_WIFI_SUPPORT__
1397          
1398          /**
1399            * @brief  智能能配网
1400            * @param  none
1401            * @return none
1402            * @note   none
1403            * @see    none
1404            */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 24  

1405          static void mmi_dq_sys_wifi_setting(void)
1406          {
1407   1        if (0 == mmi_dq_wifi_setting())
1408   1        {
1409   2      #ifdef __LOCK_AUDIO_SUPPORT__
1410   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1411   2      #endif
1412   2          mmi_dq_sys_show_cur_menu_list();
1413   2        }
1414   1        else
1415   1        {
1416   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1417   2      #ifdef __LOCK_AUDIO_SUPPORT__
1418   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1419   2      #endif
1420   2        }
1421   1      }
1422          
1423          /**
1424            * @brief  AirKiss配网
1425            * @param  none
1426            * @return none
1427            * @note   none
1428            * @see    none
1429            */
1430          static void mmi_dq_sys_wifi_airkiss_setting(void)
1431          {
1432   1        if (0 == mmi_dq_wifi_arikiss_con())
1433   1        {
1434   2      #ifdef __LOCK_AUDIO_SUPPORT__
1435   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1436   2      #endif
1437   2          mmi_dq_sys_show_cur_menu_list();
1438   2        }
1439   1        else
1440   1        {
1441   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1442   2      #ifdef __LOCK_AUDIO_SUPPORT__
1443   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1444   2      #endif
1445   2        }
1446   1      }
1447          
1448          /**
1449            * @brief  二维码配网
1450            * @param  none
1451            * @return none
1452            * @note   none
1453            * @see    none
1454            */
1455          static void mmi_dq_sys_wifi_code_setting(void)
1456          {
1457   1        if (0 == mmi_dq_wifi_code_con())
1458   1        {
1459   2      #ifdef __LOCK_AUDIO_SUPPORT__
1460   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1461   2      #endif
1462   2          mmi_dq_sys_show_cur_menu_list();
1463   2        }
1464   1        else
1465   1        {
1466   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 25  

1467   2      #ifdef __LOCK_AUDIO_SUPPORT__
1468   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1469   2      #endif
1470   2        }
1471   1      }
1472          #endif
1473          
1474          #ifdef __LOCK_DECODE_SUPPORT__
1475          static void mmi_dq_sys_sync_start_time(void)
1476          {
1477   1      }
1478          #endif
1479          
1480          typedef struct sys_menu_t
1481          {
1482            unsigned char menu_father_id;
1483            unsigned char menu_sub_id;
1484            void (*sys_menu_node_function)(void);
1485          } sys_menu_t;
1486          
1487          typedef struct sys_menu_list
1488          {
1489            unsigned char id;
1490            unsigned char menu_id;
1491          } sys_menu_list;
1492          
1493          const sys_menu_t sys_menu_tree[] =
1494            {
1495              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1496          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
              #endif
1499          #ifdef __LOCK_RFID_CARD_SUPPORT__
1500              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1501          #endif
1502              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1503              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1504              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1505          #ifdef __LOCK_WIFI_SUPPORT__
1506              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1507              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1508          #ifdef __LOCK_DECODE_SUPPORT__
1509              {STR_ID_SYSTEM, STR_ID_DECODE, mmi_dq_sys_add_decode},
1510          #endif
1511          
1512          #endif
1513          #ifdef __LOCK_110_SUPPORT__
1514              {STR_ID_SYSTEM, STR_ID_110, 0},
1515          
1516              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1517          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
              #endif
1520          #endif
1521          
1522              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1523              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1524              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1525          
1526              //PWD
1527              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1528              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 26  

1529              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1530              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1531          //FP
1532          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
                  //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
                  {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
                  {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
              #ifdef __LOCK_110_SUPPORT__
                  {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
                  {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
              #endif
              #endif
1542          #ifdef __LOCK_RFID_CARD_SUPPORT__
1543              //RF
1544              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1545              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1546              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1547              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1548          #endif
1549              //admin
1550              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1551          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
              #endif
1556              //setting
1557              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1558              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1559          
1560              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1561              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1562              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1563              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1564          };
1565          
1566          static unsigned char g_dq_menu_father_id;
1567          static sys_menu_list g_dq_menu_list_id[10];
1568          static unsigned char g_dq_menu_count;
1569          
1570          /*
1571          parameter: 
1572            none
1573          return :
1574            none
1575          */
1576          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1577          {
1578   1        g_dq_menu_father_id = father_id;
1579   1        return;
1580   1      }
1581          
1582          /*
1583          parameter: 
1584            none
1585          return :
1586            none
1587          */
1588          unsigned char mmi_dq_sys_get_menu_count(void)
1589          {
1590   1        return g_dq_menu_count;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 27  

1591   1      }
1592          
1593          /*
1594          parameter: 
1595            none
1596          return :
1597            none
1598          */
1599          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1600          {
1601   1        unsigned char i = 0, j = 0;
1602   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1603   1      
1604   1        g_dq_menu_father_id = father_id;
1605   1      
1606   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1607   1        g_dq_menu_count = 0;
1608   1      
1609   1        for (i = 0; i < menu_tree_size; i++)
1610   1        {
1611   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1612   2          {
1613   3            g_dq_menu_list_id[j].id = i;
1614   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1615   3            j++;
1616   3            g_dq_menu_count++;
1617   3          }
1618   2        }
1619   1        return;
1620   1      }
1621          
1622          /*
1623          parameter: 
1624            none
1625          return :
1626            none
1627          */
1628          void mmi_dq_sys_show_cur_menu_list(void)
1629          {
1630   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1631   1      
1632   1      #ifdef __LOCK_AUDIO_SUPPORT__
1633   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1634   1      #endif
1635   1      #ifdef __LOCK_FP_SUPPORT__
                mmi_dq_fp_light(FP_NONE_COLOR);
              #endif
1638   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1639   1        return;
1640   1      }
1641          
1642          /*
1643          parameter: 
1644            none
1645          return :
1646            current machine status
1647          */
1648          void mmi_dq_sys_get_pre_menu_list(void)
1649          {
1650   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1651   1        {
1652   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 28  

1653   2        }
1654   1        else
1655   1        {
1656   2          unsigned char i = 0;
1657   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1658   2      
1659   2          for (i = 0; i < menu_tree_size; i++)
1660   2          {
1661   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1662   3            {
1663   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1664   4              break;
1665   4            }
1666   3          }
1667   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1668   2      #ifdef __LOCK_AUDIO_SUPPORT__
1669   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1670   2      #endif
1671   2        }
1672   1        return;
1673   1      }
1674          
1675          /*
1676          parameter: 
1677            none
1678          return :
1679            none
1680          */
1681          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1682          {
1683   1        unsigned char i = 0;
1684   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1685   1        if (menu_id >= g_dq_menu_count)
1686   1          return RET_FAIL;
1687   1        i = g_dq_menu_list_id[menu_id].id;
1688   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1689   1        {
1690   2          sys_menu_tree[i].sys_menu_node_function();
1691   2        }
1692   1        else
1693   1        {
1694   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1695   2      
1696   2      #ifdef __LOCK_AUDIO_SUPPORT__
1697   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1698   2      #endif
1699   2        }
1700   1      
1701   1        return RET_SUCESS;
1702   1      }
1703          
1704          /************************************************************************************
1705           *                     Own function                     *
1706           ************************************************************************************/
1707          #if 0 //def __LOCK_VIRTUAL_PASSWORD__
              void mmi_dq_sys_show_message_with_id(unsigned char tile_id, unsigned char bmp_id, unsigned char text_id, u
             -int32_t time_msec, BASE_STATUS_MACHINE status)
              {
                unsigned char i = 0;
              #ifdef __LOCK_OLED_SUPPORT__
                mmi_dq_oled_show_input_dialog(tile_id, bmp_id, text_id);
              #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 29  

              
              #ifdef __NBDQIOT_PROJECT_B06_SUPPORT__
                if (text_id == STR_ID_OPEN_DOOR)
                {
                  //power_off();
                  lock_inside_lock = 0;
                  lock_easy_open_mode = 0;
                  mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN, 0);
                  // mmi_dq_entry_sleep_delay_time();
                  mmi_dq_show_msg_timer_start(10000);
                  timer_ms_status = status;
                  mmi_dq_ms_set_machine_status(BASE_STATUS_M_LOCK_OPEN);
                  mmi_dq_moto_lock_open();
                }
                else
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  for (i = 0; msg_aud_list[i].msg_id < STR_ID_MAX_COUNT; i++)
                  {
                    if (msg_aud_list[i].msg_id == text_id)
                    {
                      break;
                    }
                  }
                  if (msg_aud_list[i].aud_id != 0xFF)
                  {
                    mmi_dq_aud_play_with_id(msg_aud_list[i].aud_id, 0);
                  }
              #endif
                  if (time_msec > 0)
                  {
                    mmi_dq_show_msg_timer_start(time_msec);
                    timer_ms_status = status;
                    mmi_dq_ms_set_machine_status(BASE_STATUS_M_INVALID);
                  }
                  else
                    mmi_dq_ms_set_machine_status(status);
                }
              #else
              
              #ifdef __LOCK_AUDIO_SUPPORT__
                for (i = 0; msg_aud_list[i].msg_id < STR_ID_MAX_COUNT; i++)
                {
                  if (msg_aud_list[i].msg_id == text_id)
                  {
                    break;
                  }
                }
                if (msg_aud_list[i].aud_id != 0xFF)
                {
              //    mmi_dq_aud_play_with_id(msg_aud_list[i].aud_id, 0);
                }
              #endif
              
              //  if (time_msec > 0)
              //  {
              //    mmi_dq_show_msg_timer_start(time_msec);
              //    timer_ms_status = status;
              //    mmi_dq_ms_set_machine_status(BASE_STATUS_M_INVALID);
              //  }
              //  else
              //    mmi_dq_ms_set_machine_status(status);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 30  

              
                if (text_id == STR_ID_OPEN_DOOR)
                {
                  mmi_dq_moto_lock_open();
                }
              #endif
                return;
              }
              #endif
1785          #ifdef __LOCK_VIRTUAL_PASSWORD__
              uint8_t mmi_dq_sys_lock_error(void)
              {
                uint32_t time = mmi_dq_rtc_get_sys_sec_info();
                if (time - g_last_error_time > MMI_ERROR_LOCK_TIME)
                {
                  g_multiple_error_times = 1;
                  g_last_error_time = time;
                }
                else
                {
                  g_last_error_time = time;
                  g_multiple_error_times++;
                  if (g_multiple_error_times >= MMI_MAX_ERROR_TIMES)
                  {
                    //multiple error
              #ifdef __LOCK_APP_COMM_SUPPORT__
                    if (mmi_dq_fs_app_init_sucess() == 1)
                    {
                      dq_otp_add_alarm_log(DQ_ALART_LOG_MULTIPLE_ERROR);
                    }
              #endif
                    return 1;
                  }
                }
                return 0;
              }
              
              void mmi_dq_sys_lock_correct(void)
              {
                g_last_error_time = 0;
                g_multiple_error_times = 0;
              }
              
              void mmi_dq_entry_sleep_delay_time(void)
              {
                //  g_enter_sleep_set_time = MMI_TIMER_ENTER_SLEEP_DELAY_COUNT;
              }
              
              void mmi_dq_show_msg_timer_start(uint32_t time_msec)
              {
                uint32_t time_ms = MMI_TIMER_BASE_TIME;
                uint32_t time_ticks;
              
                //  g_show_msg_time_voval_count = time_msec/MMI_TIMER_BASE_TIME;
                //  g_show_msg_time_count = 0;
                //  time_ticks = nrf_drv_timer_ms_to_ticks(&TIMER2_MMI_TIMER, time_ms);
                //  nrf_drv_timer_extended_compare(&TIMER2_MMI_TIMER, NRF_TIMER_CC_CHANNEL1, time_ticks, NRF_TIMER_SHORT_C
             -OMPARE1_CLEAR_MASK, true);
                //  nrf_drv_timer_enable(&TIMER2_MMI_TIMER);
                return;
              }
              
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/28/2021 12:55:16 PAGE 31  

              #endif //__LOCK_VIRTUAL_PASSWORD__
1838          /************************************************************************************
1839           *                     End function                     *
1840           ************************************************************************************/
1841          
1842          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2742    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =    171      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
