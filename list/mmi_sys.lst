C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          // extern void printfS(char *show, char *status);
  18          // extern void printfV(char *show, int value);
  19          
  20          static unsigned char g_sys_door_open_flag = 0;
  21          
  22          static unsigned int g_timer2_sleep_count = 0;
  23          static unsigned int g_timer2_count = 0;
  24          static unsigned int g_timer2_set_count = 0;
  25          static unsigned char g_timer2_flag = 0;
  26          
  27          static unsigned char g_wifi_check_flag = 0;
  28          static unsigned char g_wifi_check_count = 0;
  29          static unsigned char g_wifi_check_type = 0;
  30          
  31          /* RFID */
  32          static unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_TIMER_WIFI_CHECK 1000
  50          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  51          #define MMI_WIFI_SETTING_DELAY 60000
  52          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  53          #define MMI_LOCK_ERROR_DELAY 60000
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 2   

  54          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  55          /*
  56          parameter: 
  57            none
  58          return :
  59            none
  60          */
  61          void mmi_dq_sys_init(void)
  62          {
  63   1        mmi_InitQueue();
  64   1        mmi_ms_pwd_init_var();
  65   1        mmi_dq_fs_init();
  66   1      }
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  74          {
  75   1        unsigned char audio_id = 0;
  76   1      
  77   1        time_msec = 0;
  78   1      
  79   1      #ifdef __LOCK_AUDIO_SUPPORT__
  80   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  81   1      
  82   1        mmi_dq_aud_play_with_id(audio_id);
  83   1      
  84   1      #endif
  85   1        return;
  86   1      }
  87          
  88          /*
  89          parameter: 
  90            none
  91          return :
  92            none
  93          */
  94          void mmi_dq_sys_lock_add_admin_suc(void)
  95          {
  96   1        mmi_dq_fs_set_admin_status(1);
  97   1      
  98   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  99   1      }
 100          
 101          /*
 102          function: system enter sleep
 103          parameter: 
 104            none
 105          return :
 106            none
 107          */
 108          void mmi_dq_sys_enter_sleep(void)
 109          {
 110   1        mmi_dq_bsp_enter_sleep();
 111   1      
 112   1        g_timer2_flag = 0;
 113   1        g_sys_door_open_flag = 0;
 114   1      
 115   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 3   

 116   1      }
 117          
 118          /*
 119          function: system wake up
 120          parameter: 
 121            none
 122          return :
 123            none
 124          */
 125          void mmi_dq_sys_wake_up(void)
 126          {
 127   1      
 128   1        mmi_dq_bsp_wake_up();
 129   1        if (mmi_dq_sys_check_vbat() == 0)
 130   1        {
 131   2      #ifdef __LOCK_WIFI_SUPPORT__
 132   2          mmi_dq_wifi_wakeup();
 133   2      #endif
 134   2      #ifdef __LOCK_FP_SUPPORT__
 135   2          mmi_dq_fp_init(); //握手、点灯
 136   2      #endif
 137   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 138   2        }
 139   1      }
 140          
 141          /*
 142          function: 
 143          parameter: 
 144            none
 145          return :
 146            none
 147          */
 148          void mmi_dq_sys_door_open_cb(void)
 149          {
 150   1      #ifdef __LOCK_MOTOR_SUPPORT__
 151   1        mmi_dq_motor_stop();
 152   1      #endif
 153   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 154   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 155   1      }
 156          
 157          /*
 158          function: 
 159          parameter: 
 160            none
 161          return :
 162            none
 163          */
 164          void mmi_dq_sys_door_open(sys_open_type type)
 165          {
 166   1      #ifdef __LOCK_BUS_SUPPORT__
 167   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 168   1        {
 169   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 170   2      #ifdef __LOCK_WIFI_SUPPORT__
 171   2          switch (type)
 172   2          {
 173   3          case SYS_OPEN_BY_PASSWORD:
 174   3            mmi_dq_wifi_pw_alarm();
 175   3            break;
 176   3          case SYS_OPEN_BY_FP:
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 4   

 177   3            mmi_dq_wifi_fp_alarm();
 178   3            break;
 179   3          case SYS_OPEN_BY_RFID:
 180   3            mmi_dq_wifi_rfid_alarm();
 181   3            break;
 182   3          }
 183   2      #endif
 184   2          return;
 185   2        }
 186   1      #endif
 187   1        g_lock_error_flag = 0;
 188   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 189   1        {
 190   2          if ((g_sys_door_open_flag & (~type)) != 0)
 191   2          {
 192   3            g_sys_door_open_flag = 0;
 193   3          }
 194   2          else
 195   2          {
 196   3            g_sys_door_open_flag |= type;
 197   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 198   3            return;
 199   3          }
 200   2        }
 201   1      
 202   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 203   1      
 204   1        mmi_dq_motor_turn_right();
 205   1        //mmi_dq_wifi_open_door();
 206   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 207   1      
 208   1      #ifdef __LOCK_WIFI_SUPPORT__
 209   1        switch (type)
 210   1        {
 211   2      #ifdef __LOCK_110_SUPPORT__
 212   2        case SYS_OPEN_BY_110_PASSWORD:
 213   2          mmi_dq_wifi_send_pwd_110(get_index);
 214   2          // printfV("get_index",(int)get_index);
 215   2          break;
 216   2        case SYS_OPEN_BY_110_FP:
 217   2          mmi_dq_wifi_send_fp_110(get_index);
 218   2          // printfV("get_index",(int)get_index);
 219   2          break;
 220   2      #endif
 221   2        case SYS_OPEN_BY_PASSWORD:
 222   2          mmi_dq_wifi_open_by_password(get_index);
 223   2          // printfV("get_index",(int)get_index);
 224   2          break;
 225   2      #ifdef __LOCK_FP_SUPPORT__
 226   2        case SYS_OPEN_BY_FP:
 227   2          mmi_dq_wifi_open_by_fp(get_index);
 228   2          // printfV("get_index",(int)get_index);
 229   2          break;
 230   2      #endif
 231   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 232   2        case SYS_OPEN_BY_RFID:
 233   2          mmi_dq_wifi_open_by_rfid(get_index);
 234   2          // printfV("get_index",(int)get_index);
 235   2          break;
 236   2      #endif
 237   2        case SYS_OPEN_BY_WIFI:
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 5   

 238   2          mmi_dq_wifi_open_by_wifi();
 239   2          break;
 240   2        }
 241   1      
 242   1        mmi_dq_wifi_take_photos(); //拍照
 243   1      #endif
 244   1      }
 245          
 246          /*
 247          function: 
 248          parameter: 
 249            none
 250          return :
 251            none
 252          */
 253          void mmi_dq_sys_door_open_fail(sys_open_type type)
 254          {
 255   1        g_lock_error_count = 0;
 256   1        g_lock_error_flag++;
 257   1        switch (type)
 258   1        {
 259   2        case SYS_OPEN_BY_PASSWORD:
 260   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 261   2      #ifdef __LOCK_WIFI_SUPPORT__
 262   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 263   2            mmi_dq_wifi_pw_alarm();
 264   2      #endif
 265   2          break;
 266   2      #ifdef __LOCK_FP_SUPPORT__
 267   2        case SYS_OPEN_BY_FP:
 268   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 269   2      #ifdef __LOCK_WIFI_SUPPORT__
 270   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 271   2            mmi_dq_wifi_fp_alarm();
 272   2      #endif
 273   2          break;
 274   2      #endif
 275   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 276   2        case SYS_OPEN_BY_RFID:
 277   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 278   2      #ifdef __LOCK_WIFI_SUPPORT__
 279   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 280   2            mmi_dq_wifi_rfid_alarm();
 281   2      #endif
 282   2          break;
 283   2      #endif
 284   2        }
 285   1      }
 286          
 287          /*
 288          function: 
 289          parameter: 
 290            none
 291          return :
 292            none
 293          */
 294          unsigned char mmi_dq_sys_door_state_check(void)
 295          {
 296   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 297   1          return 1;
 298   1        return 0;
 299   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 6   

 300          
 301          /*
 302          function: 
 303          parameter: 
 304            none
 305          return :
 306            none
 307          */
 308          void mmi_dq_sys_door_close_cb(void)
 309          {
 310   1      #ifdef __LOCK_MOTOR_SUPPORT__
 311   1        mmi_dq_motor_stop();
 312   1      #endif
 313   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 314   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 315   1      }
 316          
 317          /*
 318          function: 
 319          parameter: 
 320            none
 321          return :
 322            none
 323          */
 324          void mmi_dq_sys_door_close(void)
 325          {
 326   1        mmi_dq_motor_turn_back();
 327   1        //mmi_dq_wifi_close_door();
 328   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 329   1      }
 330          
 331          /*
 332          function: 
 333          parameter: 
 334            none
 335          return :
 336            none
 337          */
 338          void mmi_dq_sys_aud_end(void)
 339          {
 340   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 341   1      }
 342          
 343          /*
 344          function: 
 345          parameter: 
 346            none
 347          return :
 348            none
 349          */
 350          void mmi_dq_sys_time_out_handle(void)
 351          {
 352   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 353   1      
 354   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 355   1        {
 356   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 357   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 358   2        }
 359   1      #ifdef __LOCK_FP_SUPPORT__
 360   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 7   

 361   1        {
 362   2          if (mmi_dq_fs_get_admin_status() == 0)
 363   2            g_timer2_sleep_count = 0;
 364   2          else
 365   2          {
 366   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 367   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 368   3          }
 369   2        }
 370   1      #endif
 371   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 372   1        {
 373   2          g_timer2_sleep_count = 0;
 374   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 375   2        }
 376   1        else
 377   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 378   1      }
 379          
 380          /*
 381          function: 
 382          parameter: 
 383            none
 384          return :
 385            none
 386          */
 387          void System_timer_event_handler(void)
 388          {
 389   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 390   1      
 391   1        g_rfid_flag = 1; /* RFID */
 392   1      
 393   1        if (g_timer2_flag == 1)
 394   1        {
 395   2          g_timer2_count++;
 396   2          if (g_timer2_count >= g_timer2_set_count)
 397   2          {
 398   3            g_timer2_flag = 2;
 399   3            g_timer2_count = 0;
 400   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 401   3          }
 402   2        }
 403   1      
 404   1        if (g_wifi_check_flag == 1)
 405   1        {
 406   2          g_wifi_check_count++;
 407   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 408   2          {
 409   3            g_wifi_check_flag = 2;
 410   3            g_wifi_check_count = 0;
 411   3          }
 412   2        }
 413   1      
 414   1        if (g_lock_error_flag > 0)
 415   1        {
 416   2          g_lock_error_count++;
 417   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 418   2            g_lock_error_flag = 0;
 419   2        }
 420   1      
 421   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 8   

 422   1      #ifdef __LOCK_WIFI_SUPPORT__
 423   1          && (mmi_dq_wifi_get_running_flag() == 0)
 424   1      #endif
 425   1        )
 426   1        {
 427   2          unsigned char flag = 0;
 428   2          g_timer2_sleep_count++;
 429   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 430   2      #ifdef __LOCK_FP_SUPPORT__
 431   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 432   2      #endif
 433   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 434   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 435   2      #endif
 436   2          )
 437   2          {
 438   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 439   3            {
 440   4              flag = 1;
 441   4            }
 442   3          }
 443   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 444   2          {
 445   3            flag = 1;
 446   3          }
 447   2      
 448   2          if (flag)
 449   2          {
 450   3            mmi_dq_sys_time_out_handle();
 451   3          }
 452   2        }
 453   1        else
 454   1          g_timer2_sleep_count = 0;
 455   1      }
 456          
 457          /*
 458          function: 
 459          parameter: 
 460            none
 461          return :
 462            none
 463          */
 464          unsigned char mmi_dq_sys_get_rfid_flag(void)
 465          {
 466   1        if (g_rfid_flag == 1)
 467   1        {
 468   2          g_rfid_flag = 0;
 469   2          return 1;
 470   2        }
 471   1        return 0;
 472   1      }
 473          
 474          /*
 475          function: 
 476          parameter: 
 477            none
 478          return :
 479            none
 480          */
 481          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 482          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 9   

 483   1        if (g_wifi_check_flag == 2)
 484   1        {
 485   2          g_wifi_check_flag = 0;
 486   2          return 1;
 487   2        }
 488   1        return 0;
 489   1      }
 490          
 491          /*
 492          function: 
 493          parameter: 
 494            none
 495          return :
 496            none
 497          */
 498          void mmi_dq_sys_set_wifi_check(unsigned char type)
 499          {
 500   1        g_wifi_check_count = 0;
 501   1        g_wifi_check_flag = 1;
 502   1        g_wifi_check_type = type;
 503   1      }
 504          
 505          /*
 506          function: 
 507          parameter: 
 508            none
 509          return :
 510            none
 511          */
 512          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 513          {
 514   1        return g_wifi_check_type;
 515   1      }
 516          
 517          /*
 518          function: 
 519          parameter: 
 520            none
 521          return :
 522            none
 523          */
 524          void mmi_dq_sys_sleep_timer_reset(void)
 525          {
 526   1        g_timer2_sleep_count = 0;
 527   1        return;
 528   1      }
 529          
 530          /*
 531          function: 
 532          parameter: 
 533            none
 534          return :
 535            none
 536          */
 537          unsigned char mmi_dq_sys_get_timer2_flag(void)
 538          {
 539   1        if (g_timer2_flag == 2)
 540   1        {
 541   2          g_timer2_flag = 0;
 542   2          return 1;
 543   2        }
 544   1        return 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 10  

 545   1      }
 546          
 547          /*
 548          function: 
 549          parameter: 
 550            none
 551          return :
 552            none
 553          */
 554          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 555          {
 556   1        if (count != 0)
 557   1        {
 558   2          g_timer2_count = 0;
 559   2          g_timer2_set_count = count;
 560   2          g_timer2_delay_pro = pro;
 561   2          g_timer2_flag = 1;
 562   2        }
 563   1        else
 564   1          pro();
 565   1      }
 566          
 567          /*
 568          function: 
 569          parameter: 
 570            none
 571          return :
 572            none
 573          */
 574          void mmi_dq_sys_delay_event_pro(void)
 575          {
 576   1        if (g_timer2_delay_pro != 0)
 577   1          g_timer2_delay_pro();
 578   1      }
 579          
 580          /*
 581          function: 
 582          parameter: 
 583            none
 584          return :
 585            none
 586          */
 587          unsigned char mmi_dq_sys_check_vbat(void)
 588          {
 589   1        unsigned char state = adc_VolT();
 590   1        if (state > 0)
 591   1        {
 592   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 593   2      #ifdef __LOCK_WIFI_SUPPORT__
 594   2          mmi_dq_wifi_lowpower_alarm();
 595   2      #endif
 596   2          if (state == 2)
 597   2          {
 598   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 599   3            return 1;
 600   3          }
 601   2        }
 602   1      
 603   1        return 0;
 604   1      }
 605          
 606          #ifdef __LOCK_WIFI_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 11  

 607          /**
 608            * @brief  远程开门
 609            * @param  none
 610            * @return none
 611            * @note   none
 612            * @see    none
 613            */
 614          void mmi_dq_sys_wifi_open(void)
 615          {
 616   1        if (mmi_dq_wifi_open_ask() == 0)
 617   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 618   1      }
 619          #endif
 620          
 621          /*
 622          parameter: 
 623            none
 624          return :
 625            none
 626          */
 627          void mmi_dq_sys_add_admin_pwd(void)
 628          {
 629   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 630   1        mmi_ms_pwd_init_var();
 631   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 632   1        return;
 633   1      }
 634          
 635          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 636          //********************************************************************************************************
             -***********************************************************************************
 637          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 638          //
 639          //        menu part
 640          //
 641          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 642          //********************************************************************************************************
             -***********************************************************************************
 643          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 644          
 645          /*
 646          parameter: 
 647            none
 648          return :
 649            none
 650          */
 651          void mmi_dq_sys_add_pwd(void)
 652          {
 653   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 654   1        {
 655   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 656   2          mmi_dq_sys_show_cur_menu_list();
 657   2        }
 658   1        else
 659   1        {
 660   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 661   2          mmi_ms_pwd_init_var();
 662   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 12  

 663   2        }
 664   1        return;
 665   1      }
 666          
 667          void mmi_dq_sys_add_pwd_con(void)
 668          {
 669   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 670   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 671   1        return;
 672   1      }
 673          
 674          #ifdef __LOCK_110_SUPPORT__
 675          /*
 676          parameter: 
 677            none
 678          return :
 679            none
 680          */
 681          void mmi_dq_sys_add_110_pwd(void)
 682          {
 683   1        mmi_dq_wifi_wakeup();
 684   1        if (mmi_dq_wifi_check() == 1)
 685   1        {
 686   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 687   2          mmi_dq_sys_show_cur_menu_list();
 688   2          return;
 689   2        }
 690   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 691   1        mmi_ms_pwd_init_var();
 692   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 693   1        return;
 694   1      }
 695          #endif
 696          /*
 697          parameter: 
 698            none
 699          return :
 700            none
 701          */
 702          static void mmi_dq_sys_chg_pwd(void)
 703          {
 704   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 705   1        return;
 706   1      }
 707          
 708          /*
 709          parameter: 
 710            none
 711          return :
 712            none
 713          */
 714          void mmi_dq_sys_del_pwd(void)
 715          {
 716   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 717   1        mmi_ms_pwd_init_var();
 718   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 719   1        return;
 720   1      }
 721          
 722          void mmi_dq_sys_del_pwd_con(void)
 723          {
 724   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 13  

 725   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 726   1        return;
 727   1      }
 728          
 729          /*
 730          parameter: 
 731            none
 732          return :
 733            none
 734          */
 735          static void mmi_dq_sys_clear_pwd(void)
 736          {
 737   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 738   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 739   1        return;
 740   1      }
 741          
 742          #if defined(__LOCK_FP_SUPPORT__)
 743          /*
 744          parameter: 
 745            none
 746          return :
 747            none
 748          */
 749          void mmi_dq_sys_add_fp(void)
 750          {
 751   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 752   1        {
 753   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 754   2          mmi_dq_sys_show_cur_menu_list();
 755   2        }
 756   1        else
 757   1        {
 758   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 759   2          mmi_dq_fp_light(FP_BLUE);
 760   2          mmi_ms_opt_time_init();
 761   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 762   2        }
 763   1        return;
 764   1      }
 765          
 766          void mmi_dq_sys_add_fp_con(void)
 767          {
 768   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 769   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 770   1        return;
 771   1      }
 772          
 773          #ifdef __LOCK_110_SUPPORT__
 774          /*
 775          parameter: 
 776            none
 777          return :
 778            none
 779          */
 780          void mmi_dq_sys_add_110_fp(void)
 781          {
 782   1        mmi_dq_wifi_wakeup();
 783   1        if (mmi_dq_wifi_check() == 1)
 784   1        {
 785   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 786   2          mmi_dq_sys_show_cur_menu_list();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 14  

 787   2          return;
 788   2        }
 789   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 790   1        mmi_dq_fp_light(FP_BLUE);
 791   1        mmi_ms_opt_time_init();
 792   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
 793   1        return;
 794   1      }
 795          
 796          /*
 797          parameter: 
 798            none
 799          return :
 800            none
 801          */
 802          void mmi_dq_sys_del_110_fp(void)
 803          {
 804   1        mmi_dq_wifi_wakeup();
 805   1        if (mmi_dq_wifi_check() == 1)
 806   1        {
 807   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 808   2          mmi_dq_sys_show_cur_menu_list();
 809   2          return;
 810   2        }
 811   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 812   1        mmi_dq_fp_light(FP_BLUE);
 813   1        mmi_ms_opt_time_init();
 814   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 815   1        return;
 816   1      }
 817          
 818          #endif
 819          
 820          /*
 821          parameter: 
 822            none
 823          return :
 824            none
 825          */
 826          static void mmi_dq_sys_chg_fp(void)
 827          {
 828   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 829   1        return;
 830   1      }
 831          
 832          /*
 833          parameter: 
 834            none
 835          return :
 836            none
 837          */
 838          void mmi_dq_sys_del_fp(void)
 839          {
 840   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 841   1        mmi_dq_fp_light(FP_BLUE);
 842   1        mmi_ms_opt_time_init();
 843   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 844   1        return;
 845   1      }
 846          
 847          void mmi_dq_sys_del_fp_con(void)
 848          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 15  

 849   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 850   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 851   1        return;
 852   1      }
 853          
 854          /*
 855          parameter: 
 856            none
 857          return :
 858            none
 859          */
 860          static void mmi_dq_sys_clear_fp(void)
 861          {
 862   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 863   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 864   1        return;
 865   1      }
 866          #endif
 867          #ifdef __LOCK_RFID_CARD_SUPPORT__
 868          /*
 869          parameter: 
 870            none
 871          return :
 872            none
 873          */
 874          void mmi_dq_sys_add_rf(void)
 875          {
 876   1      
 877   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 878   1        {
 879   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 880   2          mmi_dq_sys_show_cur_menu_list();
 881   2        }
 882   1        else
 883   1        {
 884   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 885   2          mmi_ms_opt_time_init();
 886   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 887   2        }
 888   1        return;
 889   1      }
 890          
 891          void mmi_dq_sys_add_rf_con(void)
 892          {
 893   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 894   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 895   1        return;
 896   1      }
 897          
 898          /*
 899          parameter: 
 900            none
 901          return :
 902            none
 903          */
 904          static void mmi_dq_sys_chg_rf(void)
 905          {
 906   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 907   1        return;
 908   1      }
 909          
 910          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 16  

 911          parameter: 
 912            none
 913          return :
 914            none
 915          */
 916          void mmi_dq_sys_del_rf(void)
 917          {
 918   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 919   1        mmi_ms_opt_time_init();
 920   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 921   1        return;
 922   1      }
 923          
 924          void mmi_dq_sys_del_rf_con(void)
 925          {
 926   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 927   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 928   1        return;
 929   1      }
 930          
 931          /*
 932          parameter: 
 933            none
 934          return :
 935            none
 936          */
 937          static void mmi_dq_sys_clear_rf(void)
 938          {
 939   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 940   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 941   1        return;
 942   1      }
 943          #endif
 944          
 945          /*
 946          parameter: 
 947            none
 948          return :
 949            none
 950          */
 951          static void mmi_dq_sys_open_pro_sound(void)
 952          {
 953   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 954   1      
 955   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 956   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 957   1        else
 958   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 959   1      
 960   1        mmi_dq_sys_show_cur_menu_list();
 961   1        return;
 962   1      }
 963          
 964          /*
 965          parameter: 
 966            none
 967          return :
 968            none
 969          */
 970          static void mmi_dq_sys_close_pro_sound(void)
 971          {
 972   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 17  

 973   1      
 974   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 975   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 976   1        else
 977   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 978   1      
 979   1        mmi_dq_sys_show_cur_menu_list();
 980   1        return;
 981   1      }
 982          
 983          /*
 984          parameter: 
 985            none
 986          return :
 987            none
 988          */
 989          static void mmi_dq_sys_sin_open_mode(void)
 990          {
 991   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 992   1      
 993   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 994   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 995   1        else
 996   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 997   1      
 998   1        mmi_dq_sys_show_cur_menu_list();
 999   1        return;
1000   1      }
1001          
1002          /*
1003          parameter: 
1004            none
1005          return :
1006            none
1007          */
1008          static void mmi_dq_sys_dbl_open_mode(void)
1009          {
1010   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1011   1      
1012   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1013   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
1014   1        else
1015   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
1016   1      
1017   1        mmi_dq_sys_show_cur_menu_list();
1018   1        return;
1019   1      }
1020          
1021          #if defined(__LOCK_FP_SUPPORT__)
1022          /*
1023          parameter: 
1024            none
1025          return :
1026            none
1027          */
1028          void mmi_dq_sys_chg_admin_fp_No1(void)
1029          {
1030   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1031   1        mmi_dq_fp_light(FP_BLUE);
1032   1        mmi_ms_opt_time_init();
1033   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1034   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 18  

1035   1      }
1036          
1037          /*
1038          parameter: 
1039            none
1040          return :
1041            none
1042          */
1043          void mmi_dq_sys_chg_admin_fp_No2(void)
1044          {
1045   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1046   1        mmi_dq_fp_light(FP_BLUE);
1047   1        mmi_ms_opt_time_init();
1048   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1049   1        return;
1050   1      }
1051          #endif
1052          
1053          /*
1054          parameter: 
1055            none
1056          return :
1057            none
1058          */
1059          void mmi_dq_sys_chg_admin_pwd(void)
1060          {
1061   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1062   1        mmi_ms_pwd_init_var();
1063   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1064   1        return;
1065   1      }
1066          
1067          /*
1068          parameter: 
1069            none
1070          return :
1071            none
1072          */
1073          void mmi_dq_sys_restore_lock(void)
1074          {
1075   1        unsigned char retval = 0;
1076   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1077   1      
1078   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1079   1          retval = 1;
1080   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1081   1          retval = 1;
1082   1      #ifdef __LOCK_FP_SUPPORT__
1083   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1084   1          retval = 1;
1085   1      #endif
1086   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1087   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1088   1          retval = 1;
1089   1      #endif
1090   1      
1091   1        if (retval == 0)
1092   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1093   1        else
1094   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
1095   1      
1096   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 19  

1097   1        return;
1098   1      }
1099          
1100          /*
1101          parameter: 
1102            none
1103          return :
1104            none
1105          */
1106          static void mmi_dq_sys_restore_lock_con(void)
1107          {
1108   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1109   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1110   1      }
1111          
1112          #ifdef __LOCK_WIFI_SUPPORT__
1113          /*
1114          parameter: 
1115            none
1116          return :
1117            none
1118          */
1119          static void mmi_dq_sys_wifi_setting(void)
1120          {
1121   1        if (0 == mmi_dq_wifi_setting())
1122   1        {
1123   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1124   2          mmi_dq_sys_show_cur_menu_list();
1125   2        }
1126   1        else
1127   1        {
1128   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1129   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1130   2        }
1131   1      }
1132          
1133          /*
1134          parameter: 
1135            none
1136          return :
1137            none
1138          */
1139          static void mmi_dq_sys_wifi_airkiss_setting(void)
1140          {
1141   1        if (0 == mmi_dq_wifi_arikiss_con())
1142   1        {
1143   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1144   2          mmi_dq_sys_show_cur_menu_list();
1145   2        }
1146   1        else
1147   1        {
1148   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1149   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1150   2        }
1151   1      }
1152          
1153          /*
1154          parameter: 
1155            none
1156          return :
1157            none
1158          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 20  

1159          static void mmi_dq_sys_wifi_code_setting(void)
1160          {
1161   1        if (0 == mmi_dq_wifi_code_con())
1162   1        {
1163   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1164   2          mmi_dq_sys_show_cur_menu_list();
1165   2        }
1166   1        else
1167   1        {
1168   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1169   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1170   2        }
1171   1      }
1172          #endif
1173          
1174          typedef struct sys_menu_t
1175          {
1176            unsigned char menu_father_id;
1177            unsigned char menu_sub_id;
1178            void (*sys_menu_node_function)(void);
1179          } sys_menu_t;
1180          
1181          typedef struct sys_menu_list
1182          {
1183            unsigned char id;
1184            unsigned char menu_id;
1185          } sys_menu_list;
1186          
1187          const sys_menu_t sys_menu_tree[] =
1188            {
1189              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1190          #if defined(__LOCK_FP_SUPPORT__)
1191              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1192          #endif
1193          #ifdef __LOCK_RFID_CARD_SUPPORT__
1194              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1195          #endif
1196              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1197              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1198              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1199          #ifdef __LOCK_WIFI_SUPPORT__
1200              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1201              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1202              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_code_setting},
1203          #endif
1204          #ifdef __LOCK_110_SUPPORT__
1205              {STR_ID_SYSTEM, STR_ID_110, 0},
1206          
1207              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1208          #if defined(__LOCK_FP_SUPPORT__)
1209              {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
1210          #endif
1211          #endif
1212          
1213              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1214              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1215              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1216          
1217              //PWD
1218              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1219              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1220              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 21  

1221              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1222          //FP
1223          #if defined(__LOCK_FP_SUPPORT__)
1224              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1225              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1226              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1227              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1228          #ifdef __LOCK_110_SUPPORT__
1229              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1230              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1231          #endif
1232          #endif
1233          #ifdef __LOCK_RFID_CARD_SUPPORT__
1234              //RF
1235              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1236              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1237              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1238              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1239          #endif
1240              //admin
1241              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1242          #if defined(__LOCK_FP_SUPPORT__)
1243              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1244              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1245              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1246          #endif
1247              //setting
1248              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1249              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1250          
1251              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1252              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1253              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1254              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1255          };
1256          
1257          static unsigned char g_dq_menu_father_id;
1258          static sys_menu_list g_dq_menu_list_id[10];
1259          static unsigned char g_dq_menu_count;
1260          
1261          /*
1262          parameter: 
1263            none
1264          return :
1265            none
1266          */
1267          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1268          {
1269   1        g_dq_menu_father_id = father_id;
1270   1        return;
1271   1      }
1272          
1273          /*
1274          parameter: 
1275            none
1276          return :
1277            none
1278          */
1279          unsigned char mmi_dq_sys_get_menu_count(void)
1280          {
1281   1        return g_dq_menu_count;
1282   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 22  

1283          
1284          /*
1285          parameter: 
1286            none
1287          return :
1288            none
1289          */
1290          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1291          {
1292   1        unsigned char i = 0, j = 0;
1293   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1294   1      
1295   1        g_dq_menu_father_id = father_id;
1296   1      
1297   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1298   1        g_dq_menu_count = 0;
1299   1      
1300   1        for (i = 0; i < menu_tree_size; i++)
1301   1        {
1302   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1303   2          {
1304   3            g_dq_menu_list_id[j].id = i;
1305   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1306   3            j++;
1307   3            g_dq_menu_count++;
1308   3          }
1309   2        }
1310   1        return;
1311   1      }
1312          
1313          /*
1314          parameter: 
1315            none
1316          return :
1317            none
1318          */
1319          void mmi_dq_sys_show_cur_menu_list(void)
1320          {
1321   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1322   1      
1323   1      #ifdef __LOCK_AUDIO_SUPPORT__
1324   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1325   1      #endif
1326   1      #ifdef __LOCK_FP_SUPPORT__
1327   1        mmi_dq_fp_light(FP_NONE_COLOR);
1328   1      #endif
1329   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1330   1        return;
1331   1      }
1332          
1333          /*
1334          parameter: 
1335            none
1336          return :
1337            current machine status
1338          */
1339          void mmi_dq_sys_get_pre_menu_list(void)
1340          {
1341   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1342   1        {
1343   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1344   2        }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 23  

1345   1        else
1346   1        {
1347   2          unsigned char i = 0;
1348   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1349   2      
1350   2          for (i = 0; i < menu_tree_size; i++)
1351   2          {
1352   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1353   3            {
1354   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1355   4              break;
1356   4            }
1357   3          }
1358   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1359   2      #ifdef __LOCK_AUDIO_SUPPORT__
1360   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1361   2      #endif
1362   2        }
1363   1        return;
1364   1      }
1365          
1366          /*
1367          parameter: 
1368            none
1369          return :
1370            none
1371          */
1372          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1373          {
1374   1        unsigned char i = 0;
1375   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1376   1        if (menu_id >= g_dq_menu_count)
1377   1          return RET_FAIL;
1378   1        i = g_dq_menu_list_id[menu_id].id;
1379   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1380   1        {
1381   2          sys_menu_tree[i].sys_menu_node_function();
1382   2        }
1383   1        else
1384   1        {
1385   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1386   2      
1387   2      #ifdef __LOCK_AUDIO_SUPPORT__
1388   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1389   2      #endif
1390   2        }
1391   1      
1392   1        return RET_SUCESS;
1393   1      }
1394          
1395          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    224      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/16/2021 17:36:24 PAGE 24  

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
