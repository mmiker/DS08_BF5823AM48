C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          #include "delay.h"
  16          #include "dqiot_fp_sy.h"
  17          
  18          static unsigned char g_sys_door_open_flag = 0;
  19          
  20          static unsigned int g_timer2_sleep_count = 0;
  21          static unsigned int g_timer2_count = 0;
  22          static unsigned int g_timer2_set_count = 0;
  23          static unsigned char g_timer2_flag = 0;
  24          
  25          static unsigned char g_wifi_check_flag = 0;
  26          static unsigned char g_wifi_check_count = 0;
  27          static unsigned char g_wifi_check_type = 0;
  28          
  29          #define LOCK_MAX_EEROR_TIMES 5
  30          static unsigned char g_lock_error_flag = 0;
  31          static unsigned int g_lock_error_count = 0;
  32          
  33          timer2_delay_pro g_timer2_delay_pro = 0;
  34          
  35          #define MMI_TIMER_BASE_TIME 100
  36          #define MMI_TIMER_ENTER_SLEEP 10000
  37          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  38          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  39          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  40          #define MMI_TIMER_DOOR_OPEN 6000
  41          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  42          #define MMI_TIMER_MOTOR 300
  43          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  44          #define MMI_WIFI_SETTING_DELAY 60000
  45          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  46          #define MMI_LOCK_ERROR_DELAY 60000
  47          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  48          /*
  49          parameter: 
  50            none
  51          return :
  52            none
  53          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 2   

  54          void mmi_dq_sys_init(void)
  55          {
  56   1        mmi_InitQueue();
  57   1        mmi_ms_pwd_init_var();
  58   1        mmi_dq_fs_init();
  59   1      }
  60          /*
  61          parameter: 
  62            none
  63          return :
  64            none
  65          */
  66          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  67          {
  68   1        unsigned char audio_id = 0;
  69   1      
  70   1        time_msec = 0;
  71   1      
  72   1      #ifdef __LOCK_AUDIO_SUPPORT__
  73   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  74   1      
  75   1        mmi_dq_aud_play_with_id(audio_id);
  76   1      
  77   1      #endif
  78   1        return;
  79   1      }
  80          
  81          /*
  82          parameter: 
  83            none
  84          return :
  85            none
  86          */
  87          void mmi_dq_sys_lock_add_admin_suc(void)
  88          {
  89   1        mmi_dq_fs_set_admin_status(1);
  90   1      
  91   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  92   1      }
  93          
  94          /*
  95          function: system enter sleep
  96          parameter: 
  97            none
  98          return :
  99            none
 100          */
 101          void mmi_dq_sys_enter_sleep(void)
 102          {
 103   1        mmi_dq_bsp_enter_sleep();
 104   1      
 105   1        g_timer2_flag = 0;
 106   1        g_sys_door_open_flag = 0;
 107   1        FP_Set_Light(FP_NONE_COLOR);
 108   1      
 109   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 110   1      }
 111          
 112          /*
 113          function: system wake up
 114          parameter: 
 115            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 3   

 116          return :
 117            none
 118          */
 119          void mmi_dq_sys_wake_up(void)
 120          {
 121   1      
 122   1        mmi_dq_bsp_wake_up();
 123   1        if (mmi_dq_sys_check_vbat() == 0)
 124   1        {
 125   2          mmi_dq_wifi_wakeup();
*** WARNING C206 IN LINE 125 OF mmi_src\mmi_sys.c: 'mmi_dq_wifi_wakeup': missing function-prototype
 126   2      #ifdef __LOCK_FP_SUPPORT__
 127   2          mmi_dq_fp_init(); //ÎÕÊÖ¡¢µãµÆ
 128   2      #endif
 129   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 130   2        }
 131   1      }
 132          
 133          /*
 134          function: 
 135          parameter: 
 136            none
 137          return :
 138            none
 139          */
 140          void mmi_dq_sys_door_open_cb(void)
 141          {
 142   1        mmi_dq_motor_stop();
 143   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 144   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 145   1      }
 146          
 147          /*
 148          function: 
 149          parameter: 
 150            none
 151          return :
 152            none
 153          */
 154          void mmi_dq_sys_door_open(sys_open_type type)
 155          {
 156   1        g_lock_error_flag = 0;
 157   1        if (mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL && SYS_OPEN_BY_WIFI != type)
 158   1        {
 159   2          if (g_sys_door_open_flag & (~type) != 0)
 160   2          {
 161   3            g_sys_door_open_flag = 0;
 162   3          }
 163   2          else
 164   2          {
 165   3            g_sys_door_open_flag &= type;
 166   3            return;
 167   3          }
 168   2        }
 169   1      
 170   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 171   1      
 172   1        mmi_dq_motor_turn_right();
 173   1        //mmi_dq_wifi_open_door();
 174   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 175   1      
 176   1        switch (type)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 4   

 177   1        {
 178   2        case SYS_OPEN_BY_PASSWORD:
 179   2          mmi_dq_wifi_open_by_password();
 180   2          break;
 181   2        case SYS_OPEN_BY_FP:
 182   2          mmi_dq_wifi_open_by_fp();
 183   2          break;
 184   2        case SYS_OPEN_BY_RFID:
 185   2          mmi_dq_wifi_open_by_rfid();
 186   2          break;
 187   2        case SYS_OPEN_BY_WIFI:
 188   2          mmi_dq_wifi_open_by_wifi();
 189   2          break;
 190   2        }
 191   1      }
 192          
 193          /*
 194          function: 
 195          parameter: 
 196            none
 197          return :
 198            none
 199          */
 200          void mmi_dq_sys_door_open_fail(sys_open_type type)
 201          {
 202   1        g_lock_error_count = 0;
 203   1        g_lock_error_flag++;
 204   1        switch (type)
 205   1        {
 206   2        case SYS_OPEN_BY_PASSWORD:
 207   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 208   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 209   2            mmi_dq_wifi_pw_alarm();
 210   2          break;
 211   2        case SYS_OPEN_BY_FP:
 212   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 213   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 214   2            mmi_dq_wifi_fp_alarm();
 215   2          break;
 216   2        case SYS_OPEN_BY_RFID:
 217   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 218   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 219   2            mmi_dq_wifi_rfid_alarm();
 220   2          break;
 221   2        }
 222   1      }
 223          
 224          /*
 225          function: 
 226          parameter: 
 227            none
 228          return :
 229            none
 230          */
 231          unsigned char mmi_dq_sys_door_state_check(void)
 232          {
 233   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 234   1          return 1;
 235   1        return 0;
 236   1      }
 237          
 238          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 5   

 239          function: 
 240          parameter: 
 241            none
 242          return :
 243            none
 244          */
 245          void mmi_dq_sys_door_close_cb(void)
 246          {
 247   1        mmi_dq_motor_stop();
 248   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 249   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 250   1      }
 251          
 252          /*
 253          function: 
 254          parameter: 
 255            none
 256          return :
 257            none
 258          */
 259          void mmi_dq_sys_door_close(void)
 260          {
 261   1        mmi_dq_motor_turn_back();
 262   1        //mmi_dq_wifi_close_door();
 263   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 264   1      }
 265          
 266          /*
 267          function: 
 268          parameter: 
 269            none
 270          return :
 271            none
 272          */
 273          void mmi_dq_sys_aud_end(void)
 274          {
 275   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 276   1      }
 277          
 278          /*
 279          function: 
 280          parameter: 
 281            none
 282          return :
 283            none
 284          */
 285          void mmi_dq_sys_time_out_handle(void)
 286          {
 287   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 288   1      
 289   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 290   1        {
 291   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 292   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 293   2        }
 294   1      #ifdef __LOCK_FP_SUPPORT__
 295   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 296   1        {
 297   2          if (mmi_dq_fs_get_admin_status() == 0)
 298   2            g_timer2_sleep_count = 0;
 299   2          else
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 6   

 300   2          {
 301   3            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 302   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 303   3          }
 304   2        }
 305   1      #endif
 306   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 307   1        {
 308   2          g_timer2_sleep_count = 0;
 309   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 310   2        }
 311   1        else
 312   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 313   1      }
 314          
 315          /*
 316          function: 
 317          parameter: 
 318            none
 319          return :
 320            none
 321          */
 322          void System_timer_event_handler(void)
 323          {
 324   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 325   1      
 326   1        if (g_timer2_flag == 1)
 327   1        {
 328   2          g_timer2_count++;
 329   2          if (g_timer2_count >= g_timer2_set_count)
 330   2          {
 331   3            g_timer2_flag = 2;
 332   3            g_timer2_count = 0;
 333   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 334   3          }
 335   2        }
 336   1      
 337   1        if (g_wifi_check_flag == 1)
 338   1        {
 339   2          g_wifi_check_count++;
 340   2          if (g_wifi_check_count >= 4)
 341   2          {
 342   3            g_wifi_check_flag = 2;
 343   3            g_wifi_check_count = 0;
 344   3          }
 345   2        }
 346   1      
 347   1        if (g_lock_error_flag > 0)
 348   1        {
 349   2          g_lock_error_count++;
 350   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 351   2            g_lock_error_flag = 0;
 352   2        }
 353   1      
 354   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 1) && (mmi_dq_wifi_get_running_flag() == 0))
 355   1        {
 356   2          unsigned char flag = 0;
 357   2          g_timer2_sleep_count++;
 358   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 359   2      #ifdef __LOCK_FP_SUPPORT__
 360   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 7   

             - || state == SYS_STATUS_DEL_FP
 361   2      #endif
 362   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 363   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 364   2      #endif
 365   2          )
 366   2          {
 367   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 368   3            {
 369   4              flag = 1;
 370   4            }
 371   3          }
 372   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP)
 373   2          {
 374   3            flag = 1;
 375   3          }
 376   2      
 377   2          if (flag)
 378   2          {
 379   3            mmi_dq_sys_time_out_handle();
 380   3          }
 381   2        }
 382   1        else
 383   1          g_timer2_sleep_count = 0;
 384   1      }
 385          
 386          /*
 387          function: 
 388          parameter: 
 389            none
 390          return :
 391            none
 392          */
 393          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 394          {
 395   1        if (g_wifi_check_flag == 2)
 396   1        {
 397   2          g_wifi_check_flag = 0;
 398   2          return 1;
 399   2        }
 400   1        return 0;
 401   1      }
 402          
 403          /*
 404          function: 
 405          parameter: 
 406            none
 407          return :
 408            none
 409          */
 410          void mmi_dq_sys_set_wifi_check(unsigned char type)
 411          {
 412   1        g_wifi_check_count = 0;
 413   1        g_wifi_check_flag = 1;
 414   1        g_wifi_check_type = type;
 415   1      }
 416          
 417          /*
 418          function: 
 419          parameter: 
 420            none
 421          return :
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 8   

 422            none
 423          */
 424          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 425          {
 426   1        return g_wifi_check_type;
 427   1      }
 428          
 429          /*
 430          function: 
 431          parameter: 
 432            none
 433          return :
 434            none
 435          */
 436          void mmi_dq_sys_sleep_timer_reset(void)
 437          {
 438   1        g_timer2_sleep_count = 0;
 439   1        return;
 440   1      }
 441          
 442          /*
 443          function: 
 444          parameter: 
 445            none
 446          return :
 447            none
 448          */
 449          unsigned char mmi_dq_sys_get_timer2_flag(void)
 450          {
 451   1        if (g_timer2_flag == 2)
 452   1        {
 453   2          g_timer2_flag = 0;
 454   2          return 1;
 455   2        }
 456   1        return 0;
 457   1      }
 458          
 459          /*
 460          function: 
 461          parameter: 
 462            none
 463          return :
 464            none
 465          */
 466          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 467          {
 468   1        g_timer2_count = 0;
 469   1        g_timer2_set_count = count;
 470   1        g_timer2_delay_pro = pro;
 471   1        g_timer2_flag = 1;
 472   1        //dqiot_drv_timer2_start();
 473   1      }
 474          
 475          /*
 476          function: 
 477          parameter: 
 478            none
 479          return :
 480            none
 481          */
 482          void mmi_dq_sys_delay_event_pro(void)
 483          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 9   

 484   1        g_timer2_delay_pro();
 485   1      }
 486          
 487          /*
 488          function: 
 489          parameter: 
 490            none
 491          return :
 492            none
 493          */
 494          unsigned char mmi_dq_sys_check_vbat(void)
 495          {
 496   1        unsigned char state = adc_VolT();
*** WARNING C206 IN LINE 496 OF mmi_src\mmi_sys.c: 'adc_VolT': missing function-prototype
 497   1        if (state > 0)
 498   1        {
 499   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 500   2          mmi_dq_wifi_lowpower_alarm();
 501   2          if (state == 2)
 502   2          {
 503   3      #if __Normal_handling__
                    mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
                    return 1;
              #endif
 507   3          }
 508   2        }
 509   1      
 510   1        return 0;
 511   1      }
 512          
 513          /*
 514          function: 
 515          parameter: 
 516            none
 517          return :
 518            none
 519          */
 520          void mmi_dq_sys_wifi_open(void)
 521          {
 522   1        if ((mmi_dq_fs_get_wifi_setting() == 0) || (mmi_dq_wifi_open_ask() == 0))
 523   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 524   1      }
 525          
 526          /*
 527          parameter: 
 528            none
 529          return :
 530            none
 531          */
 532          void mmi_dq_sys_add_admin_pwd(void)
 533          {
 534   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 535   1        mmi_ms_pwd_init_var();
 536   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 537   1        return;
 538   1      }
 539          
 540          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 541          //********************************************************************************************************
             -***********************************************************************************
 542          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 10  

             ------------------------------------------------------------------------------------
 543          //
 544          //        menu part
 545          //
 546          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 547          //********************************************************************************************************
             -***********************************************************************************
 548          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 549          
 550          /*
 551          parameter: 
 552            none
 553          return :
 554            none
 555          */
 556          void mmi_dq_sys_add_pwd(void)
 557          {
 558   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 559   1        {
 560   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 561   2          mmi_dq_sys_show_cur_menu_list();
 562   2        }
 563   1        else
 564   1        {
 565   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 566   2          mmi_ms_pwd_init_var();
 567   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 568   2        }
 569   1        return;
 570   1      }
 571          
 572          void mmi_dq_sys_add_pwd_con(void)
 573          {
 574   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 575   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 576   1        return;
 577   1      }
 578          
 579          /*
 580          parameter: 
 581            none
 582          return :
 583            none
 584          */
 585          static void mmi_dq_sys_chg_pwd(void)
 586          {
 587   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 588   1        return;
 589   1      }
 590          
 591          /*
 592          parameter: 
 593            none
 594          return :
 595            none
 596          */
 597          void mmi_dq_sys_del_pwd(void)
 598          {
 599   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 600   1        mmi_ms_pwd_init_var();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 11  

 601   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 602   1        return;
 603   1      }
 604          
 605          void mmi_dq_sys_del_pwd_con(void)
 606          {
 607   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 608   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 609   1        return;
 610   1      }
 611          
 612          /*
 613          parameter: 
 614            none
 615          return :
 616            none
 617          */
 618          static void mmi_dq_sys_clear_pwd(void)
 619          {
 620   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 621   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 622   1        return;
 623   1      }
 624          
 625          #if defined(__LOCK_FP_SUPPORT__)
 626          /*
 627          parameter: 
 628            none
 629          return :
 630            none
 631          */
 632          void mmi_dq_sys_add_fp(void)
 633          {
 634   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 635   1        {
 636   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 637   2          mmi_dq_sys_show_cur_menu_list();
 638   2        }
 639   1        else
 640   1        {
 641   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 642   2          mmi_dq_fp_light(FP_BLUE);
 643   2          mmi_ms_opt_time_init();
 644   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 645   2        }
 646   1        return;
 647   1      }
 648          
 649          void mmi_dq_sys_add_fp_con(void)
 650          {
 651   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 652   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 653   1        return;
 654   1      }
 655          
 656          /*
 657          parameter: 
 658            none
 659          return :
 660            none
 661          */
 662          static void mmi_dq_sys_chg_fp(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 12  

 663          {
 664   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 665   1        return;
 666   1      }
 667          
 668          /*
 669          parameter: 
 670            none
 671          return :
 672            none
 673          */
 674          void mmi_dq_sys_del_fp(void)
 675          {
 676   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 677   1        mmi_dq_fp_light(FP_BLUE);
 678   1        mmi_ms_opt_time_init();
 679   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 680   1        return;
 681   1      }
 682          
 683          void mmi_dq_sys_del_fp_con(void)
 684          {
 685   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 686   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 687   1        return;
 688   1      }
 689          
 690          /*
 691          parameter: 
 692            none
 693          return :
 694            none
 695          */
 696          static void mmi_dq_sys_clear_fp(void)
 697          {
 698   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 699   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 700   1        return;
 701   1      }
 702          #endif
 703          #ifdef __LOCK_RFID_CARD_SUPPORT__
 704          /*
 705          parameter: 
 706            none
 707          return :
 708            none
 709          */
 710          void mmi_dq_sys_add_rf(void)
 711          {
 712   1      
 713   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 714   1        {
 715   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 716   2          mmi_dq_sys_show_cur_menu_list();
 717   2        }
 718   1        else
 719   1        {
 720   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 721   2          mmi_ms_opt_time_init();
 722   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 723   2        }
 724   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 13  

 725   1      }
 726          
 727          void mmi_dq_sys_add_rf_con(void)
 728          {
 729   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 730   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 731   1        return;
 732   1      }
 733          
 734          /*
 735          parameter: 
 736            none
 737          return :
 738            none
 739          */
 740          static void mmi_dq_sys_chg_rf(void)
 741          {
 742   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 743   1        return;
 744   1      }
 745          
 746          /*
 747          parameter: 
 748            none
 749          return :
 750            none
 751          */
 752          void mmi_dq_sys_del_rf(void)
 753          {
 754   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 755   1        mmi_ms_opt_time_init();
 756   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 757   1        return;
 758   1      }
 759          
 760          void mmi_dq_sys_del_rf_con(void)
 761          {
 762   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 763   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 764   1        return;
 765   1      }
 766          
 767          /*
 768          parameter: 
 769            none
 770          return :
 771            none
 772          */
 773          static void mmi_dq_sys_clear_rf(void)
 774          {
 775   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 776   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 777   1        return;
 778   1      }
 779          #endif
 780          
 781          /*
 782          parameter: 
 783            none
 784          return :
 785            none
 786          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 14  

 787          static void mmi_dq_sys_open_pro_sound(void)
 788          {
 789   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 790   1      
 791   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 792   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 793   1        else
 794   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 795   1      
 796   1        mmi_dq_sys_show_cur_menu_list();
 797   1        return;
 798   1      }
 799          
 800          /*
 801          parameter: 
 802            none
 803          return :
 804            none
 805          */
 806          static void mmi_dq_sys_close_pro_sound(void)
 807          {
 808   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 809   1      
 810   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 811   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 812   1        else
 813   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 814   1      
 815   1        mmi_dq_sys_show_cur_menu_list();
 816   1        return;
 817   1      }
 818          
 819          /*
 820          parameter: 
 821            none
 822          return :
 823            none
 824          */
 825          static void mmi_dq_sys_sin_open_mode(void)
 826          {
 827   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 828   1      
 829   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 830   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 831   1        else
 832   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 833   1      
 834   1        mmi_dq_sys_show_cur_menu_list();
 835   1        return;
 836   1      }
 837          
 838          /*
 839          parameter: 
 840            none
 841          return :
 842            none
 843          */
 844          static void mmi_dq_sys_dbl_open_mode(void)
 845          {
 846   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 847   1      
 848   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 15  

 849   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
 850   1        else
 851   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
 852   1      
 853   1        mmi_dq_sys_show_cur_menu_list();
 854   1        return;
 855   1      }
 856          
 857          #if defined(__LOCK_FP_SUPPORT__)
 858          /*
 859          parameter: 
 860            none
 861          return :
 862            none
 863          */
 864          void mmi_dq_sys_chg_admin_fp_No1(void)
 865          {
 866   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 867   1        mmi_dq_fp_light(FP_BLUE);
 868   1        mmi_ms_opt_time_init();
 869   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
 870   1        return;
 871   1      }
 872          
 873          /*
 874          parameter: 
 875            none
 876          return :
 877            none
 878          */
 879          void mmi_dq_sys_chg_admin_fp_No2(void)
 880          {
 881   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 882   1        mmi_dq_fp_light(FP_BLUE);
 883   1        mmi_ms_opt_time_init();
 884   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
 885   1        return;
 886   1      }
 887          #endif
 888          
 889          /*
 890          parameter: 
 891            none
 892          return :
 893            none
 894          */
 895          void mmi_dq_sys_chg_admin_pwd(void)
 896          {
 897   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 898   1        mmi_ms_pwd_init_var();
 899   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 900   1        return;
 901   1      }
 902          
 903          /*
 904          parameter: 
 905            none
 906          return :
 907            none
 908          */
 909          void mmi_dq_sys_restore_lock(void)
 910          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 16  

 911   1        unsigned char retval = 0;
 912   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
 913   1      
 914   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
 915   1          retval = 1;
 916   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
 917   1          retval = 1;
 918   1      #ifdef __LOCK_FP_SUPPORT__
 919   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
 920   1          retval = 1;
 921   1      #endif
 922   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 923   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
 924   1          retval = 1;
 925   1      #endif
 926   1      
 927   1        if (retval == 0)
 928   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SYS_RESTORE_SUCCESS);
 929   1        else
 930   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 931   1      
 932   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 933   1        return;
 934   1      }
 935          
 936          /*
 937          parameter: 
 938            none
 939          return :
 940            none
 941          */
 942          static void mmi_dq_sys_restore_lock_con(void)
 943          {
 944   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
 945   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
 946   1      }
 947          
 948          /*
 949          parameter: 
 950            none
 951          return :
 952            none
 953          */
 954          static void mmi_dq_sys_wifi_setting(void)
 955          {
 956   1        if (0 == mmi_dq_wifi_setting())
 957   1        {
 958   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 959   2          mmi_dq_sys_show_cur_menu_list();
 960   2        }
 961   1        else
 962   1        {
 963   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
 964   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 965   2        }
 966   1      }
 967          
 968          typedef struct sys_menu_t
 969          {
 970            unsigned char menu_father_id;
 971            unsigned char menu_sub_id;
 972            void (*sys_menu_node_function)(void);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 17  

 973          } sys_menu_t;
 974          
 975          typedef struct sys_menu_list
 976          {
 977            unsigned char id;
 978            unsigned char menu_id;
 979          } sys_menu_list;
 980          
 981          const sys_menu_t sys_menu_tree[] =
 982            {
 983              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
 984          #if defined(__LOCK_FP_SUPPORT__)
 985              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
 986          #endif
 987          #ifdef __LOCK_RFID_CARD_SUPPORT__
 988              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
 989          #endif
 990              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
 991              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
 992              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
 993              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
 994          
 995              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
 996              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
 997              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
 998          
 999              //PWD
1000              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1001              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1002              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1003              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1004          //FP
1005          #if defined(__LOCK_FP_SUPPORT__)
1006              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1007              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1008              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1009              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1010          #endif
1011          #ifdef __LOCK_RFID_CARD_SUPPORT__
1012              //RF
1013              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1014              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1015              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1016              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1017          #endif
1018              //admin
1019              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1020          #if defined(__LOCK_FP_SUPPORT__)
1021              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1022              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1023              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1024          #endif
1025              //setting
1026              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1027              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1028          
1029              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1030              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1031              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1032              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1033          };
1034          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 18  

1035          static unsigned char g_dq_menu_father_id;
1036          static sys_menu_list g_dq_menu_list_id[8];
1037          static unsigned char g_dq_menu_count;
1038          
1039          /*
1040          parameter: 
1041            none
1042          return :
1043            none
1044          */
1045          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1046          {
1047   1        g_dq_menu_father_id = father_id;
1048   1        return;
1049   1      }
1050          
1051          /*
1052          parameter: 
1053            none
1054          return :
1055            none
1056          */
1057          unsigned char mmi_dq_sys_get_menu_count(void)
1058          {
1059   1        return g_dq_menu_count;
1060   1      }
1061          
1062          /*
1063          parameter: 
1064            none
1065          return :
1066            none
1067          */
1068          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1069          {
1070   1        unsigned char i = 0, j = 0;
1071   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1072   1      
1073   1        g_dq_menu_father_id = father_id;
1074   1      
1075   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1076   1        g_dq_menu_count = 0;
1077   1      
1078   1        for (i = 0; i < menu_tree_size; i++)
1079   1        {
1080   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1081   2          {
1082   3            g_dq_menu_list_id[j].id = i;
1083   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1084   3            j++;
1085   3            g_dq_menu_count++;
1086   3          }
1087   2        }
1088   1        return;
1089   1      }
1090          
1091          /*
1092          parameter: 
1093            none
1094          return :
1095            none
1096          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 19  

1097          void mmi_dq_sys_show_cur_menu_list(void)
1098          {
1099   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1100   1      
1101   1      #ifdef __LOCK_AUDIO_SUPPORT__
1102   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1103   1      #endif
1104   1      #ifdef __LOCK_FP_SUPPORT__
1105   1        mmi_dq_fp_light(FP_NONE_COLOR);
1106   1      #endif
1107   1      
1108   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1109   1        return;
1110   1      }
1111          
1112          /*
1113          parameter: 
1114            none
1115          return :
1116            current machine status
1117          */
1118          void mmi_dq_sys_get_pre_menu_list(void)
1119          {
1120   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1121   1        {
1122   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1123   2        }
1124   1        else
1125   1        {
1126   2          unsigned char i = 0;
1127   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1128   2      
1129   2          for (i = 0; i < menu_tree_size; i++)
1130   2          {
1131   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1132   3              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1133   3          }
1134   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1135   2      #ifdef __LOCK_AUDIO_SUPPORT__
1136   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1137   2      #endif
1138   2        }
1139   1        return;
1140   1      }
1141          
1142          /*
1143          parameter: 
1144            none
1145          return :
1146            none
1147          */
1148          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1149          {
1150   1        unsigned char i = 0;
1151   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1152   1        if (menu_id >= g_dq_menu_count)
1153   1          return RET_FAIL;
1154   1        i = g_dq_menu_list_id[menu_id].id;
1155   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1156   1        {
1157   2          sys_menu_tree[i].sys_menu_node_function();
1158   2        }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/01/2021 18:11:29 PAGE 20  

1159   1        else
1160   1        {
1161   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1162   2      
1163   2      #ifdef __LOCK_AUDIO_SUPPORT__
1164   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1165   2      #endif
1166   2        }
1167   1      
1168   1        return RET_SUCESS;
1169   1      }
1170          
1171          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1835    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    184      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
