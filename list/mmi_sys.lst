C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          // extern void printfS(char *show, char *status);
  18          // extern void printfV(char *show, int value);
  19          
  20          static unsigned char g_sys_door_open_flag = 0;
  21          
  22          static unsigned int g_timer2_sleep_count = 0;
  23          static unsigned int g_timer2_count = 0;
  24          static unsigned int g_timer2_set_count = 0;
  25          static unsigned char g_timer2_flag = 0;
  26          
  27          static unsigned char g_wifi_check_flag = 0;
  28          static unsigned char g_wifi_check_count = 0;
  29          static unsigned char g_wifi_check_type = 0;
  30          
  31          /* RFID */
  32          static unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_TIMER_WIFI_CHECK 1000
  50          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  51          #define MMI_WIFI_SETTING_DELAY 60000
  52          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  53          #define MMI_LOCK_ERROR_DELAY 60000
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 2   

  54          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  55          /*
  56          parameter: 
  57            none
  58          return :
  59            none
  60          */
  61          void mmi_dq_sys_init(void)
  62          {
  63   1        mmi_InitQueue();
  64   1        mmi_ms_pwd_init_var();
  65   1        mmi_dq_fs_init();
  66   1      }
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  74          {
  75   1        unsigned char audio_id = 0;
  76   1      
  77   1        time_msec = 0;
  78   1      
  79   1      #ifdef __LOCK_AUDIO_SUPPORT__
  80   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  81   1        mmi_dq_aud_play_with_id(audio_id);
  82   1      #endif
  83   1        return;
  84   1      }
  85          
  86          /*
  87          parameter: 
  88            none
  89          return :
  90            none
  91          */
  92          void mmi_dq_sys_lock_add_admin_suc(void)
  93          {
  94   1        mmi_dq_fs_set_admin_status(1);
  95   1      
  96   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  97   1      }
  98          
  99          /*
 100          function: system enter sleep
 101          parameter: 
 102            none
 103          return :
 104            none
 105          */
 106          void mmi_dq_sys_enter_sleep(void)
 107          {
 108   1        mmi_dq_bsp_enter_sleep();
 109   1      
 110   1        g_timer2_flag = 0;
 111   1        g_sys_door_open_flag = 0;
 112   1      
 113   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 114   1      }
 115          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 3   

 116          /*
 117          function: system wake up
 118          parameter: 
 119            none
 120          return :
 121            none
 122          */
 123          void mmi_dq_sys_wake_up(void)
 124          {
 125   1      
 126   1        mmi_dq_bsp_wake_up();
 127   1        if (mmi_dq_sys_check_vbat() == 0)
 128   1        {
 129   2      #ifdef __LOCK_WIFI_SUPPORT__
 130   2          mmi_dq_wifi_wakeup();
 131   2      #endif
 132   2      #ifdef __LOCK_FP_SUPPORT__
 133   2          mmi_dq_fp_init(); //握手、点灯
 134   2      #endif
 135   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 136   2        }
 137   1      }
 138          
 139          /*
 140          function: 
 141          parameter: 
 142            none
 143          return :
 144            none
 145          */
 146          void mmi_dq_sys_door_open_cb(void)
 147          {
 148   1      #ifdef __LOCK_MOTOR_SUPPORT__
 149   1        mmi_dq_motor_stop();
 150   1      #endif
 151   1      #ifdef __LOCK_AUDIO_SUPPORT__
 152   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 153   1      #endif
 154   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 155   1      }
 156          
 157          /*
 158          function: 
 159          parameter: 
 160            none
 161          return :
 162            none
 163          */
 164          void mmi_dq_sys_door_open(sys_open_type type)
 165          {
 166   1      #ifdef __LOCK_BUS_SUPPORT__
 167   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 168   1        {
 169   2      #ifdef __LOCK_AUDIO_SUPPORT__
 170   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 171   2      #endif
 172   2      #ifdef __LOCK_WIFI_SUPPORT__
 173   2          switch (type)
 174   2          {
 175   3          case SYS_OPEN_BY_PASSWORD:
 176   3            mmi_dq_wifi_pw_alarm();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 4   

 177   3            break;
 178   3          case SYS_OPEN_BY_FP:
 179   3            mmi_dq_wifi_fp_alarm();
 180   3            break;
 181   3          case SYS_OPEN_BY_RFID:
 182   3            mmi_dq_wifi_rfid_alarm();
 183   3            break;
 184   3          }
 185   2      #endif
 186   2          return;
 187   2        }
 188   1      #endif
 189   1        g_lock_error_flag = 0;
 190   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 191   1        {
 192   2          if ((g_sys_door_open_flag & (~type)) != 0)
 193   2          {
 194   3            g_sys_door_open_flag = 0;
 195   3          }
 196   2          else
 197   2          {
 198   3            g_sys_door_open_flag |= type;
 199   3      #ifdef __LOCK_AUDIO_SUPPORT__
 200   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 201   3      #endif
 202   3            return;
 203   3          }
 204   2        }
 205   1      
 206   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 207   1      
 208   1      #ifdef __LOCK_MOTOR_SUPPORT__
 209   1        mmi_dq_motor_turn_right();
 210   1      #endif
 211   1        //mmi_dq_wifi_open_door();
 212   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 213   1      
 214   1      #ifdef __LOCK_WIFI_SUPPORT__
 215   1        switch (type)
 216   1        {
 217   2      #ifdef __LOCK_110_SUPPORT__
 218   2        case SYS_OPEN_BY_110_PASSWORD:
 219   2          mmi_dq_wifi_send_pwd_110(get_index);
 220   2          // printfV("get_index",(int)get_index);
 221   2          break;
 222   2        case SYS_OPEN_BY_110_FP:
 223   2          mmi_dq_wifi_send_fp_110(get_index);
 224   2          // printfV("get_index",(int)get_index);
 225   2          break;
 226   2      #endif
 227   2        case SYS_OPEN_BY_PASSWORD:
 228   2          mmi_dq_wifi_open_by_password(get_index);
 229   2          // printfV("get_index",(int)get_index);
 230   2          break;
 231   2      #ifdef __LOCK_FP_SUPPORT__
 232   2        case SYS_OPEN_BY_FP:
 233   2          mmi_dq_wifi_open_by_fp(get_index);
 234   2          // printfV("get_index",(int)get_index);
 235   2          break;
 236   2      #endif
 237   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 5   

 238   2        case SYS_OPEN_BY_RFID:
 239   2          mmi_dq_wifi_open_by_rfid(get_index);
 240   2          // printfV("get_index",(int)get_index);
 241   2          break;
 242   2      #endif
 243   2        case SYS_OPEN_BY_WIFI:
 244   2          mmi_dq_wifi_open_by_wifi();
 245   2          break;
 246   2        }
 247   1      
 248   1        mmi_dq_wifi_take_photos(); //拍照
 249   1      #endif
 250   1      }
 251          
 252          /*
 253          function: 
 254          parameter: 
 255            none
 256          return :
 257            none
 258          */
 259          void mmi_dq_sys_door_open_fail(sys_open_type type)
 260          {
 261   1        g_lock_error_count = 0;
 262   1        g_lock_error_flag++;
 263   1        switch (type)
 264   1        {
 265   2        case SYS_OPEN_BY_PASSWORD:
 266   2      #ifdef __LOCK_AUDIO_SUPPORT__
 267   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 268   2      #endif
 269   2      #ifdef __LOCK_WIFI_SUPPORT__
 270   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 271   2            mmi_dq_wifi_pw_alarm();
 272   2      #endif
 273   2          break;
 274   2      #ifdef __LOCK_FP_SUPPORT__
 275   2        case SYS_OPEN_BY_FP:
 276   2      #ifdef __LOCK_AUDIO_SUPPORT__
 277   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 278   2      #endif
 279   2      #ifdef __LOCK_WIFI_SUPPORT__
 280   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 281   2            mmi_dq_wifi_fp_alarm();
 282   2      #endif
 283   2          break;
 284   2      #endif
 285   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 286   2        case SYS_OPEN_BY_RFID:
 287   2      #ifdef __LOCK_AUDIO_SUPPORT__
 288   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 289   2      #endif
 290   2      #ifdef __LOCK_WIFI_SUPPORT__
 291   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 292   2            mmi_dq_wifi_rfid_alarm();
 293   2      #endif
 294   2          break;
 295   2      #endif
 296   2        }
 297   1      }
 298          
 299          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 6   

 300          function: 
 301          parameter: 
 302            none
 303          return :
 304            none
 305          */
 306          unsigned char mmi_dq_sys_door_state_check(void)
 307          {
 308   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 309   1          return 1;
 310   1        return 0;
 311   1      }
 312          
 313          /*
 314          function: 
 315          parameter: 
 316            none
 317          return :
 318            none
 319          */
 320          void mmi_dq_sys_door_close_cb(void)
 321          {
 322   1      #ifdef __LOCK_MOTOR_SUPPORT__
 323   1        mmi_dq_motor_stop();
 324   1      #endif
 325   1      #ifdef __LOCK_AUDIO_SUPPORT__
 326   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 327   1      #endif
 328   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 329   1      }
 330          
 331          /*
 332          function: 
 333          parameter: 
 334            none
 335          return :
 336            none
 337          */
 338          void mmi_dq_sys_door_close(void)
 339          {
 340   1      #ifdef __LOCK_MOTOR_SUPPORT__
 341   1        mmi_dq_motor_turn_back();
 342   1      #endif
 343   1        //mmi_dq_wifi_close_door();
 344   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 345   1      }
 346          
 347          /*
 348          function: 
 349          parameter: 
 350            none
 351          return :
 352            none
 353          */
 354          void mmi_dq_sys_aud_end(void)
 355          {
 356   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 357   1      }
 358          
 359          /*
 360          function: 
 361          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 7   

 362            none
 363          return :
 364            none
 365          */
 366          void mmi_dq_sys_time_out_handle(void)
 367          {
 368   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 369   1      
 370   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 371   1        {
 372   2      #ifdef __LOCK_AUDIO_SUPPORT__
 373   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 374   2      #endif
 375   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 376   2        }
 377   1      #ifdef __LOCK_FP_SUPPORT__
 378   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 379   1        {
 380   2          if (mmi_dq_fs_get_admin_status() == 0)
 381   2            g_timer2_sleep_count = 0;
 382   2          else
 383   2          {
 384   3      #ifdef __LOCK_AUDIO_SUPPORT__
 385   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 386   3      #endif
 387   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 388   3          }
 389   2        }
 390   1      #endif
 391   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 392   1        {
 393   2          g_timer2_sleep_count = 0;
 394   2      #ifdef __LOCK_AUDIO_SUPPORT__
 395   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 396   2      #endif
 397   2        }
 398   1        else
 399   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 400   1      }
 401          
 402          /*
 403          function: 
 404          parameter: 
 405            none
 406          return :
 407            none
 408          */
 409          void System_timer_event_handler(void)
 410          {
 411   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 412   1      
 413   1        g_rfid_flag = 1; /* RFID */
 414   1      
 415   1        if (g_timer2_flag == 1)
 416   1        {
 417   2          g_timer2_count++;
 418   2          if (g_timer2_count >= g_timer2_set_count)
 419   2          {
 420   3            g_timer2_flag = 2;
 421   3            g_timer2_count = 0;
 422   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 8   

 423   3          }
 424   2        }
 425   1      
 426   1        if (g_wifi_check_flag == 1)
 427   1        {
 428   2          g_wifi_check_count++;
 429   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 430   2          {
 431   3            g_wifi_check_flag = 2;
 432   3            g_wifi_check_count = 0;
 433   3          }
 434   2        }
 435   1      
 436   1        if (g_lock_error_flag > 0)
 437   1        {
 438   2          g_lock_error_count++;
 439   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 440   2            g_lock_error_flag = 0;
 441   2        }
 442   1      
 443   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
 444   1      #ifdef __LOCK_WIFI_SUPPORT__
 445   1          && (mmi_dq_wifi_get_running_flag() == 0)
 446   1      #endif
 447   1        )
 448   1        {
 449   2          unsigned char flag = 0;
 450   2          g_timer2_sleep_count++;
 451   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 452   2      #ifdef __LOCK_FP_SUPPORT__
 453   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 454   2      #endif
 455   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 456   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 457   2      #endif
 458   2          )
 459   2          {
 460   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 461   3            {
 462   4              flag = 1;
 463   4            }
 464   3          }
 465   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 466   2          {
 467   3            flag = 1;
 468   3          }
 469   2      
 470   2          if (flag)
 471   2          {
 472   3            mmi_dq_sys_time_out_handle();
 473   3          }
 474   2        }
 475   1        else
 476   1          g_timer2_sleep_count = 0;
 477   1      }
 478          
 479          /*
 480          function: 
 481          parameter: 
 482            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 9   

 483          return :
 484            none
 485          */
 486          unsigned char mmi_dq_sys_get_rfid_flag(void)
 487          {
 488   1        if (g_rfid_flag == 1)
 489   1        {
 490   2          g_rfid_flag = 0;
 491   2          return 1;
 492   2        }
 493   1        return 0;
 494   1      }
 495          
 496          /*
 497          function: 
 498          parameter: 
 499            none
 500          return :
 501            none
 502          */
 503          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 504          {
 505   1        if (g_wifi_check_flag == 2)
 506   1        {
 507   2          g_wifi_check_flag = 0;
 508   2          return 1;
 509   2        }
 510   1        return 0;
 511   1      }
 512          
 513          /*
 514          function: 
 515          parameter: 
 516            none
 517          return :
 518            none
 519          */
 520          void mmi_dq_sys_set_wifi_check(unsigned char type)
 521          {
 522   1        g_wifi_check_count = 0;
 523   1        g_wifi_check_flag = 1;
 524   1        g_wifi_check_type = type;
 525   1      }
 526          
 527          /*
 528          function: 
 529          parameter: 
 530            none
 531          return :
 532            none
 533          */
 534          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 535          {
 536   1        return g_wifi_check_type;
 537   1      }
 538          
 539          /*
 540          function: 
 541          parameter: 
 542            none
 543          return :
 544            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 10  

 545          */
 546          void mmi_dq_sys_sleep_timer_reset(void)
 547          {
 548   1        g_timer2_sleep_count = 0;
 549   1        return;
 550   1      }
 551          
 552          /*
 553          function: 
 554          parameter: 
 555            none
 556          return :
 557            none
 558          */
 559          unsigned char mmi_dq_sys_get_timer2_flag(void)
 560          {
 561   1        if (g_timer2_flag == 2)
 562   1        {
 563   2          g_timer2_flag = 0;
 564   2          return 1;
 565   2        }
 566   1        return 0;
 567   1      }
 568          
 569          /*
 570          function: 
 571          parameter: 
 572            none
 573          return :
 574            none
 575          */
 576          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 577          {
 578   1        if (count != 0)
 579   1        {
 580   2          g_timer2_count = 0;
 581   2          g_timer2_set_count = count;
 582   2          g_timer2_delay_pro = pro;
 583   2          g_timer2_flag = 1;
 584   2        }
 585   1        else
 586   1          pro();
 587   1      }
 588          
 589          /*
 590          function: 
 591          parameter: 
 592            none
 593          return :
 594            none
 595          */
 596          void mmi_dq_sys_delay_event_pro(void)
 597          {
 598   1        if (g_timer2_delay_pro != 0)
 599   1          g_timer2_delay_pro();
 600   1      }
 601          
 602          /*
 603          function: 
 604          parameter: 
 605            none
 606          return :
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 11  

 607            none
 608          */
 609          unsigned char mmi_dq_sys_check_vbat(void)
 610          {
 611   1        unsigned char state = adc_VolT();
 612   1        if (state > 0)
 613   1        {
 614   2      #ifdef __LOCK_AUDIO_SUPPORT__
 615   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 616   2      #endif
 617   2      #ifdef __LOCK_WIFI_SUPPORT__
 618   2          mmi_dq_wifi_lowpower_alarm();
 619   2      #endif
 620   2          if (state == 2)
 621   2          {
 622   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 623   3            return 1;
 624   3          }
 625   2        }
 626   1      
 627   1        return 0;
 628   1      }
 629          
 630          /**
 631            * @brief  远程开门
 632            * @param  none
 633            * @return none
 634            * @note   none
 635            * @see    none
 636            */
 637          void mmi_dq_sys_wifi_open(void)
 638          {
 639   1      #ifdef __LOCK_WIFI_SUPPORT__
 640   1        if (mmi_dq_wifi_open_ask() == 0)
 641   1      #ifdef __LOCK_AUDIO_SUPPORT__
 642   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 643   1      #else
                  ;
              #endif
 646   1      #endif
 647   1      }
 648          
 649          /*
 650          parameter: 
 651            none
 652          return :
 653            none
 654          */
 655          void mmi_dq_sys_add_admin_pwd(void)
 656          {
 657   1      #ifdef __LOCK_AUDIO_SUPPORT__
 658   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 659   1      #endif
 660   1        mmi_ms_pwd_init_var();
 661   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 662   1        return;
 663   1      }
 664          
 665          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 666          //********************************************************************************************************
             -***********************************************************************************
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 12  

 667          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 668          //
 669          //        menu part
 670          //
 671          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 672          //********************************************************************************************************
             -***********************************************************************************
 673          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 674          
 675          /*
 676          parameter: 
 677            none
 678          return :
 679            none
 680          */
 681          void mmi_dq_sys_add_pwd(void)
 682          {
 683   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 684   1        {
 685   2      #ifdef __LOCK_AUDIO_SUPPORT__
 686   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 687   2      #endif
 688   2          mmi_dq_sys_show_cur_menu_list();
 689   2        }
 690   1        else
 691   1        {
 692   2      #ifdef __LOCK_AUDIO_SUPPORT__
 693   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 694   2      #endif
 695   2          mmi_ms_pwd_init_var();
 696   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 697   2        }
 698   1        return;
 699   1      }
 700          
 701          void mmi_dq_sys_add_pwd_con(void)
 702          {
 703   1      #ifdef __LOCK_AUDIO_SUPPORT__
 704   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 705   1      #endif
 706   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 707   1        return;
 708   1      }
 709          
 710          #ifdef __LOCK_110_SUPPORT__
 711          /*
 712          parameter: 
 713            none
 714          return :
 715            none
 716          */
 717          void mmi_dq_sys_add_110_pwd(void)
 718          {
 719   1        mmi_dq_wifi_wakeup();
 720   1        if (mmi_dq_wifi_check() == 1)
 721   1        {
 722   2      #ifdef __LOCK_AUDIO_SUPPORT__
 723   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 724   2      #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 13  

 725   2          mmi_dq_sys_show_cur_menu_list();
 726   2          return;
 727   2        }
 728   1      #ifdef __LOCK_AUDIO_SUPPORT__
 729   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 730   1      #endif
 731   1        mmi_ms_pwd_init_var();
 732   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 733   1        return;
 734   1      }
 735          #endif
 736          /*
 737          parameter: 
 738            none
 739          return :
 740            none
 741          */
 742          static void mmi_dq_sys_chg_pwd(void)
 743          {
 744   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 745   1        return;
 746   1      }
 747          
 748          /*
 749          parameter: 
 750            none
 751          return :
 752            none
 753          */
 754          void mmi_dq_sys_del_pwd(void)
 755          {
 756   1      #ifdef __LOCK_AUDIO_SUPPORT__
 757   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 758   1      #endif
 759   1        mmi_ms_pwd_init_var();
 760   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 761   1        return;
 762   1      }
 763          
 764          void mmi_dq_sys_del_pwd_con(void)
 765          {
 766   1      #ifdef __LOCK_AUDIO_SUPPORT__
 767   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 768   1      #endif
 769   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 770   1        return;
 771   1      }
 772          
 773          /*
 774          parameter: 
 775            none
 776          return :
 777            none
 778          */
 779          static void mmi_dq_sys_clear_pwd(void)
 780          {
 781   1      #ifdef __LOCK_AUDIO_SUPPORT__
 782   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 783   1      #endif
 784   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 785   1        return;
 786   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 14  

 787          
 788          #if defined(__LOCK_FP_SUPPORT__)
 789          /*
 790          parameter: 
 791            none
 792          return :
 793            none
 794          */
 795          void mmi_dq_sys_add_fp(void)
 796          {
 797   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 798   1        {
 799   2      #ifdef __LOCK_AUDIO_SUPPORT__
 800   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 801   2      #endif
 802   2          mmi_dq_sys_show_cur_menu_list();
 803   2        }
 804   1        else
 805   1        {
 806   2      #ifdef __LOCK_AUDIO_SUPPORT__
 807   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 808   2      #endif
 809   2          mmi_dq_fp_light(FP_BLUE);
 810   2          mmi_ms_opt_time_init();
 811   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 812   2        }
 813   1        return;
 814   1      }
 815          
 816          void mmi_dq_sys_add_fp_con(void)
 817          {
 818   1      #ifdef __LOCK_AUDIO_SUPPORT__
 819   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 820   1      #endif
 821   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 822   1        return;
 823   1      }
 824          
 825          #ifdef __LOCK_110_SUPPORT__
 826          /*
 827          parameter: 
 828            none
 829          return :
 830            none
 831          */
 832          void mmi_dq_sys_add_110_fp(void)
 833          {
 834   1        mmi_dq_wifi_wakeup();
 835   1        if (mmi_dq_wifi_check() == 1)
 836   1        {
 837   2      #ifdef __LOCK_AUDIO_SUPPORT__
 838   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 839   2      #endif
 840   2          mmi_dq_sys_show_cur_menu_list();
 841   2          return;
 842   2        }
 843   1      #ifdef __LOCK_AUDIO_SUPPORT__
 844   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 845   1      #endif
 846   1        mmi_dq_fp_light(FP_BLUE);
 847   1        mmi_ms_opt_time_init();
 848   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 15  

 849   1        return;
 850   1      }
 851          
 852          /*
 853          parameter: 
 854            none
 855          return :
 856            none
 857          */
 858          void mmi_dq_sys_del_110_fp(void)
 859          {
 860   1        mmi_dq_wifi_wakeup();
 861   1        if (mmi_dq_wifi_check() == 1)
 862   1        {
 863   2      #ifdef __LOCK_AUDIO_SUPPORT__
 864   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 865   2      #endif
 866   2          mmi_dq_sys_show_cur_menu_list();
 867   2          return;
 868   2        }
 869   1      #ifdef __LOCK_AUDIO_SUPPORT__
 870   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 871   1      #endif
 872   1        mmi_dq_fp_light(FP_BLUE);
 873   1        mmi_ms_opt_time_init();
 874   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 875   1        return;
 876   1      }
 877          
 878          #endif
 879          
 880          /*
 881          parameter: 
 882            none
 883          return :
 884            none
 885          */
 886          static void mmi_dq_sys_chg_fp(void)
 887          {
 888   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 889   1        return;
 890   1      }
 891          
 892          /*
 893          parameter: 
 894            none
 895          return :
 896            none
 897          */
 898          void mmi_dq_sys_del_fp(void)
 899          {
 900   1      #ifdef __LOCK_AUDIO_SUPPORT__
 901   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 902   1      #endif
 903   1        mmi_dq_fp_light(FP_BLUE);
 904   1        mmi_ms_opt_time_init();
 905   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 906   1        return;
 907   1      }
 908          
 909          void mmi_dq_sys_del_fp_con(void)
 910          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 16  

 911   1      #ifdef __LOCK_AUDIO_SUPPORT__
 912   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 913   1      #endif
 914   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 915   1        return;
 916   1      }
 917          
 918          /*
 919          parameter: 
 920            none
 921          return :
 922            none
 923          */
 924          static void mmi_dq_sys_clear_fp(void)
 925          {
 926   1      #ifdef __LOCK_AUDIO_SUPPORT__
 927   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 928   1      #endif
 929   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 930   1        return;
 931   1      }
 932          #endif
 933          #ifdef __LOCK_RFID_CARD_SUPPORT__
 934          /*
 935          parameter: 
 936            none
 937          return :
 938            none
 939          */
 940          void mmi_dq_sys_add_rf(void)
 941          {
 942   1      
 943   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 944   1        {
 945   2      #ifdef __LOCK_AUDIO_SUPPORT__
 946   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 947   2      #endif
 948   2          mmi_dq_sys_show_cur_menu_list();
 949   2        }
 950   1        else
 951   1        {
 952   2      #ifdef __LOCK_AUDIO_SUPPORT__
 953   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 954   2      #endif
 955   2          mmi_ms_opt_time_init();
 956   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 957   2        }
 958   1        return;
 959   1      }
 960          
 961          void mmi_dq_sys_add_rf_con(void)
 962          {
 963   1      #ifdef __LOCK_AUDIO_SUPPORT__
 964   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 965   1      #endif
 966   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 967   1        return;
 968   1      }
 969          
 970          /*
 971          parameter: 
 972            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 17  

 973          return :
 974            none
 975          */
 976          static void mmi_dq_sys_chg_rf(void)
 977          {
 978   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 979   1        return;
 980   1      }
 981          
 982          /*
 983          parameter: 
 984            none
 985          return :
 986            none
 987          */
 988          void mmi_dq_sys_del_rf(void)
 989          {
 990   1      #ifdef __LOCK_AUDIO_SUPPORT__
 991   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 992   1      #endif
 993   1        mmi_ms_opt_time_init();
 994   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 995   1        return;
 996   1      }
 997          
 998          void mmi_dq_sys_del_rf_con(void)
 999          {
1000   1      #ifdef __LOCK_AUDIO_SUPPORT__
1001   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
1002   1      #endif
1003   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
1004   1        return;
1005   1      }
1006          
1007          /*
1008          parameter: 
1009            none
1010          return :
1011            none
1012          */
1013          static void mmi_dq_sys_clear_rf(void)
1014          {
1015   1      #ifdef __LOCK_AUDIO_SUPPORT__
1016   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
1017   1      #endif
1018   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
1019   1        return;
1020   1      }
1021          #endif
1022          
1023          /*
1024          parameter: 
1025            none
1026          return :
1027            none
1028          */
1029          static void mmi_dq_sys_open_pro_sound(void)
1030          {
1031   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1032   1      
1033   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
1034   1      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 18  

1035   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS)
1036   1      #endif
1037   1            ;
1038   1        else
1039   1      #ifdef __LOCK_AUDIO_SUPPORT__
1040   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL)
1041   1      #endif
1042   1            ;
1043   1      
1044   1        mmi_dq_sys_show_cur_menu_list();
1045   1        return;
1046   1      }
1047          
1048          /*
1049          parameter: 
1050            none
1051          return :
1052            none
1053          */
1054          static void mmi_dq_sys_close_pro_sound(void)
1055          {
1056   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1057   1      
1058   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
1059   1      #ifdef __LOCK_AUDIO_SUPPORT__
1060   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS)
1061   1      #endif
1062   1            ;
1063   1        else
1064   1      #ifdef __LOCK_AUDIO_SUPPORT__
1065   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL)
1066   1      #endif
1067   1            ;
1068   1      
1069   1        mmi_dq_sys_show_cur_menu_list();
1070   1        return;
1071   1      }
1072          
1073          /*
1074          parameter: 
1075            none
1076          return :
1077            none
1078          */
1079          static void mmi_dq_sys_sin_open_mode(void)
1080          {
1081   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1082   1      
1083   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
1084   1      #ifdef __LOCK_AUDIO_SUPPORT__
1085   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS)
1086   1      #endif
1087   1            ;
1088   1        else
1089   1      #ifdef __LOCK_AUDIO_SUPPORT__
1090   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL)
1091   1      #endif
1092   1            ;
1093   1      
1094   1        mmi_dq_sys_show_cur_menu_list();
1095   1        return;
1096   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 19  

1097          
1098          /*
1099          parameter: 
1100            none
1101          return :
1102            none
1103          */
1104          static void mmi_dq_sys_dbl_open_mode(void)
1105          {
1106   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1107   1      
1108   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1109   1      #ifdef __LOCK_AUDIO_SUPPORT__
1110   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS)
1111   1      #endif
1112   1            ;
1113   1        else
1114   1      #ifdef __LOCK_AUDIO_SUPPORT__
1115   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL)
1116   1      #endif
1117   1            ;
1118   1      
1119   1        mmi_dq_sys_show_cur_menu_list();
1120   1        return;
1121   1      }
1122          
1123          #if defined(__LOCK_FP_SUPPORT__)
1124          /*
1125          parameter: 
1126            none
1127          return :
1128            none
1129          */
1130          void mmi_dq_sys_chg_admin_fp_No1(void)
1131          {
1132   1      #ifdef __LOCK_AUDIO_SUPPORT__
1133   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1134   1      #endif
1135   1        mmi_dq_fp_light(FP_BLUE);
1136   1        mmi_ms_opt_time_init();
1137   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1138   1        return;
1139   1      }
1140          
1141          /*
1142          parameter: 
1143            none
1144          return :
1145            none
1146          */
1147          void mmi_dq_sys_chg_admin_fp_No2(void)
1148          {
1149   1      #ifdef __LOCK_AUDIO_SUPPORT__
1150   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1151   1      #endif
1152   1        mmi_dq_fp_light(FP_BLUE);
1153   1        mmi_ms_opt_time_init();
1154   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1155   1        return;
1156   1      }
1157          #endif
1158          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 20  

1159          /*
1160          parameter: 
1161            none
1162          return :
1163            none
1164          */
1165          void mmi_dq_sys_chg_admin_pwd(void)
1166          {
1167   1      #ifdef __LOCK_AUDIO_SUPPORT__
1168   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1169   1      #endif
1170   1        mmi_ms_pwd_init_var();
1171   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1172   1        return;
1173   1      }
1174          
1175          /*
1176          parameter: 
1177            none
1178          return :
1179            none
1180          */
1181          void mmi_dq_sys_restore_lock(void)
1182          {
1183   1        unsigned char retval = 0;
1184   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1185   1      
1186   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1187   1          retval = 1;
1188   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1189   1          retval = 1;
1190   1      #ifdef __LOCK_FP_SUPPORT__
1191   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1192   1          retval = 1;
1193   1      #endif
1194   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1195   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1196   1          retval = 1;
1197   1      #endif
1198   1      
1199   1        if (retval == 0)
1200   1      #ifdef __LOCK_AUDIO_SUPPORT__
1201   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS)
1202   1      #endif
1203   1            ;
1204   1        else
1205   1      #ifdef __LOCK_AUDIO_SUPPORT__
1206   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
1207   1      #endif
1208   1            ;
1209   1      
1210   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1211   1        return;
1212   1      }
1213          
1214          /*
1215          parameter: 
1216            none
1217          return :
1218            none
1219          */
1220          static void mmi_dq_sys_restore_lock_con(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 21  

1221          {
1222   1      #ifdef __LOCK_AUDIO_SUPPORT__
1223   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1224   1      #endif
1225   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1226   1      }
1227          
1228          #ifdef __LOCK_WIFI_SUPPORT__
1229          /*
1230          parameter: 
1231            none
1232          return :
1233            none
1234          */
1235          static void mmi_dq_sys_wifi_setting(void)
1236          {
1237   1        if (0 == mmi_dq_wifi_setting())
1238   1        {
1239   2      #ifdef __LOCK_AUDIO_SUPPORT__
1240   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1241   2      #endif
1242   2          mmi_dq_sys_show_cur_menu_list();
1243   2        }
1244   1        else
1245   1        {
1246   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1247   2      #ifdef __LOCK_AUDIO_SUPPORT__
1248   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1249   2      #endif
1250   2        }
1251   1      }
1252          
1253          /*
1254          parameter: 
1255            none
1256          return :
1257            none
1258          */
1259          static void mmi_dq_sys_wifi_airkiss_setting(void)
1260          {
1261   1        if (0 == mmi_dq_wifi_arikiss_con())
1262   1        {
1263   2      #ifdef __LOCK_AUDIO_SUPPORT__
1264   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1265   2      #endif
1266   2          mmi_dq_sys_show_cur_menu_list();
1267   2        }
1268   1        else
1269   1        {
1270   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1271   2      #ifdef __LOCK_AUDIO_SUPPORT__
1272   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1273   2      #endif
1274   2        }
1275   1      }
1276          
1277          /*
1278          parameter: 
1279            none
1280          return :
1281            none
1282          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 22  

1283          static void mmi_dq_sys_wifi_code_setting(void)
1284          {
1285   1        if (0 == mmi_dq_wifi_code_con())
1286   1        {
1287   2      #ifdef __LOCK_AUDIO_SUPPORT__
1288   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1289   2      #endif
1290   2          mmi_dq_sys_show_cur_menu_list();
1291   2        }
1292   1        else
1293   1        {
1294   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1295   2      #ifdef __LOCK_AUDIO_SUPPORT__
1296   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1297   2      #endif
1298   2        }
1299   1      }
1300          #endif
1301          
1302          typedef struct sys_menu_t
1303          {
1304            unsigned char menu_father_id;
1305            unsigned char menu_sub_id;
1306            void (*sys_menu_node_function)(void);
1307          } sys_menu_t;
1308          
1309          typedef struct sys_menu_list
1310          {
1311            unsigned char id;
1312            unsigned char menu_id;
1313          } sys_menu_list;
1314          
1315          const sys_menu_t sys_menu_tree[] =
1316            {
1317              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1318          #if defined(__LOCK_FP_SUPPORT__)
1319              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1320          #endif
1321          #ifdef __LOCK_RFID_CARD_SUPPORT__
1322              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1323          #endif
1324              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1325              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1326              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1327          #ifdef __LOCK_WIFI_SUPPORT__
1328              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1329              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1330              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_code_setting},
1331          #endif
1332          #ifdef __LOCK_110_SUPPORT__
1333              {STR_ID_SYSTEM, STR_ID_110, 0},
1334          
1335              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1336          #if defined(__LOCK_FP_SUPPORT__)
1337              {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
1338          #endif
1339          #endif
1340          
1341              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1342              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1343              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1344          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 23  

1345              //PWD
1346              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1347              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1348              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1349              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1350          //FP
1351          #if defined(__LOCK_FP_SUPPORT__)
1352              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1353              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1354              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1355              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1356          #ifdef __LOCK_110_SUPPORT__
1357              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1358              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1359          #endif
1360          #endif
1361          #ifdef __LOCK_RFID_CARD_SUPPORT__
1362              //RF
1363              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1364              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1365              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1366              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1367          #endif
1368              //admin
1369              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1370          #if defined(__LOCK_FP_SUPPORT__)
1371              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1372              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1373              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1374          #endif
1375              //setting
1376              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1377              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1378          
1379              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1380              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1381              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1382              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1383          };
1384          
1385          static unsigned char g_dq_menu_father_id;
1386          static sys_menu_list g_dq_menu_list_id[10];
1387          static unsigned char g_dq_menu_count;
1388          
1389          /*
1390          parameter: 
1391            none
1392          return :
1393            none
1394          */
1395          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1396          {
1397   1        g_dq_menu_father_id = father_id;
1398   1        return;
1399   1      }
1400          
1401          /*
1402          parameter: 
1403            none
1404          return :
1405            none
1406          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 24  

1407          unsigned char mmi_dq_sys_get_menu_count(void)
1408          {
1409   1        return g_dq_menu_count;
1410   1      }
1411          
1412          /*
1413          parameter: 
1414            none
1415          return :
1416            none
1417          */
1418          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1419          {
1420   1        unsigned char i = 0, j = 0;
1421   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1422   1      
1423   1        g_dq_menu_father_id = father_id;
1424   1      
1425   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1426   1        g_dq_menu_count = 0;
1427   1      
1428   1        for (i = 0; i < menu_tree_size; i++)
1429   1        {
1430   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1431   2          {
1432   3            g_dq_menu_list_id[j].id = i;
1433   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1434   3            j++;
1435   3            g_dq_menu_count++;
1436   3          }
1437   2        }
1438   1        return;
1439   1      }
1440          
1441          /*
1442          parameter: 
1443            none
1444          return :
1445            none
1446          */
1447          void mmi_dq_sys_show_cur_menu_list(void)
1448          {
1449   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1450   1      
1451   1      #ifdef __LOCK_AUDIO_SUPPORT__
1452   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1453   1      #endif
1454   1      #ifdef __LOCK_FP_SUPPORT__
1455   1        mmi_dq_fp_light(FP_NONE_COLOR);
1456   1      #endif
1457   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1458   1        return;
1459   1      }
1460          
1461          /*
1462          parameter: 
1463            none
1464          return :
1465            current machine status
1466          */
1467          void mmi_dq_sys_get_pre_menu_list(void)
1468          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 25  

1469   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1470   1        {
1471   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1472   2        }
1473   1        else
1474   1        {
1475   2          unsigned char i = 0;
1476   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1477   2      
1478   2          for (i = 0; i < menu_tree_size; i++)
1479   2          {
1480   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1481   3            {
1482   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1483   4              break;
1484   4            }
1485   3          }
1486   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1487   2      #ifdef __LOCK_AUDIO_SUPPORT__
1488   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1489   2      #endif
1490   2        }
1491   1        return;
1492   1      }
1493          
1494          /*
1495          parameter: 
1496            none
1497          return :
1498            none
1499          */
1500          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1501          {
1502   1        unsigned char i = 0;
1503   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1504   1        if (menu_id >= g_dq_menu_count)
1505   1          return RET_FAIL;
1506   1        i = g_dq_menu_list_id[menu_id].id;
1507   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1508   1        {
1509   2          sys_menu_tree[i].sys_menu_node_function();
1510   2        }
1511   1        else
1512   1        {
1513   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1514   2      
1515   2      #ifdef __LOCK_AUDIO_SUPPORT__
1516   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1517   2      #endif
1518   2        }
1519   1      
1520   1        return RET_SUCESS;
1521   1      }
1522          
1523          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    224      20
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/19/2021 17:37:54 PAGE 26  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
