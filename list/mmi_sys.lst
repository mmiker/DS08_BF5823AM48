C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          static unsigned char g_sys_door_open_flag = 0;
  18          
  19          static unsigned int g_timer2_sleep_count = 0;
  20          static unsigned int g_timer2_count = 0;
  21          static unsigned int g_timer2_set_count = 0;
  22          static unsigned char g_timer2_flag = 0;
  23          
  24          static unsigned char g_wifi_check_flag = 0;
  25          static unsigned char g_wifi_check_count = 0;
  26          static unsigned char g_wifi_check_type = 0;
  27          
  28          /* RFID */
  29          static unsigned char g_rfid_flag = 0;
  30          
  31          #define LOCK_MAX_EEROR_TIMES 5
  32          static unsigned char g_lock_error_flag = 0;
  33          static unsigned int g_lock_error_count = 0;
  34          
  35          timer2_delay_pro g_timer2_delay_pro = 0;
  36          
  37          #define MMI_TIMER_BASE_TIME 100
  38          #define MMI_TIMER_ENTER_SLEEP 10000
  39          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  40          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  41          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  42          #define MMI_TIMER_DOOR_OPEN 6000
  43          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  44          #define MMI_TIMER_MOTOR 300
  45          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  46          #define MMI_TIMER_WIFI_CHECK 1000
  47          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  48          #define MMI_WIFI_SETTING_DELAY 60000
  49          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  50          #define MMI_LOCK_ERROR_DELAY 60000
  51          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  52          /*
  53          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 2   

  54            none
  55          return :
  56            none
  57          */
  58          void mmi_dq_sys_init(void)
  59          {
  60   1        mmi_InitQueue();
  61   1        mmi_ms_pwd_init_var();
  62   1        mmi_dq_fs_init();
  63   1      }
  64          /*
  65          parameter: 
  66            none
  67          return :
  68            none
  69          */
  70          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  71          {
  72   1        unsigned char audio_id = 0;
  73   1      
  74   1        time_msec = 0;
  75   1      
  76   1      #ifdef __LOCK_AUDIO_SUPPORT__
  77   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  78   1      
  79   1        mmi_dq_aud_play_with_id(audio_id);
  80   1      
  81   1      #endif
  82   1        return;
  83   1      }
  84          
  85          /*
  86          parameter: 
  87            none
  88          return :
  89            none
  90          */
  91          void mmi_dq_sys_lock_add_admin_suc(void)
  92          {
  93   1        mmi_dq_fs_set_admin_status(1);
  94   1      
  95   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  96   1      }
  97          
  98          /*
  99          function: system enter sleep
 100          parameter: 
 101            none
 102          return :
 103            none
 104          */
 105          void mmi_dq_sys_enter_sleep(void)
 106          {
 107   1        mmi_dq_bsp_enter_sleep();
 108   1      
 109   1        g_timer2_flag = 0;
 110   1        g_sys_door_open_flag = 0;
 111   1      
 112   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 113   1      }
 114          
 115          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 3   

 116          function: system wake up
 117          parameter: 
 118            none
 119          return :
 120            none
 121          */
 122          void mmi_dq_sys_wake_up(void)
 123          {
 124   1      
 125   1        mmi_dq_bsp_wake_up();
 126   1        if (mmi_dq_sys_check_vbat() == 0)
 127   1        {
 128   2          mmi_dq_wifi_wakeup();
 129   2      #ifdef __LOCK_FP_SUPPORT__
 130   2          mmi_dq_fp_init(); //���֡����
 131   2      #endif
 132   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 133   2        }
 134   1      }
 135          
 136          /*
 137          function: 
 138          parameter: 
 139            none
 140          return :
 141            none
 142          */
 143          void mmi_dq_sys_door_open_cb(void)
 144          {
 145   1      #ifdef __LOCK_MOTOR_SUPPORT__
 146   1        mmi_dq_motor_stop();
 147   1      #endif
 148   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 149   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 150   1      }
 151          
 152          /*
 153          function: 
 154          parameter: 
 155            none
 156          return :
 157            none
 158          */
 159          void mmi_dq_sys_door_open(sys_open_type type)
 160          {
 161   1      #ifdef __LOCK_BUS_SUPPORT__
 162   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 163   1        {
 164   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 165   2      #ifdef __LOCK_WIFI_SUPPORT__
 166   2          switch (type)
 167   2          {
 168   3          case SYS_OPEN_BY_PASSWORD:
 169   3            mmi_dq_wifi_pw_alarm();
 170   3            break;
 171   3          case SYS_OPEN_BY_FP:
 172   3            mmi_dq_wifi_fp_alarm();
 173   3            break;
 174   3          case SYS_OPEN_BY_RFID:
 175   3            mmi_dq_wifi_rfid_alarm();
 176   3            break;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 4   

 177   3          }
 178   2      #endif
 179   2          return;
 180   2        }
 181   1      #endif
 182   1        g_lock_error_flag = 0;
 183   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 184   1        {
 185   2          if ((g_sys_door_open_flag & (~type)) != 0)
 186   2          {
 187   3            g_sys_door_open_flag = 0;
 188   3          }
 189   2          else
 190   2          {
 191   3            g_sys_door_open_flag |= type;
 192   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 193   3            return;
 194   3          }
 195   2        }
 196   1      
 197   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 198   1      
 199   1        mmi_dq_motor_turn_right();
 200   1        //mmi_dq_wifi_open_door();
 201   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 202   1      
 203   1      #ifdef __LOCK_WIFI_SUPPORT__
 204   1        switch (type)
 205   1        {
 206   2      #ifdef __LOCK_110_SUPPORT__
 207   2        case SYS_OPEN_BY_110_PASSWORD:
 208   2          mmi_dq_wifi_send_pwd_110();
 209   2          break;
 210   2        case SYS_OPEN_BY_110_FP:
 211   2          mmi_dq_wifi_send_fp_110();
 212   2          break;
 213   2      #endif
 214   2        case SYS_OPEN_BY_PASSWORD:
 215   2          mmi_dq_wifi_open_by_password();
 216   2          break;
 217   2      #ifdef __LOCK_FP_SUPPORT__
 218   2        case SYS_OPEN_BY_FP:
 219   2          mmi_dq_wifi_open_by_fp();
 220   2          break;
 221   2      #endif
 222   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 223   2        case SYS_OPEN_BY_RFID:
 224   2          mmi_dq_wifi_open_by_rfid();
 225   2          break;
 226   2      #endif
 227   2        case SYS_OPEN_BY_WIFI:
 228   2          mmi_dq_wifi_open_by_wifi();
 229   2          break;
 230   2        }
 231   1      
 232   1      #endif
 233   1      }
 234          
 235          /*
 236          function: 
 237          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 5   

 238            none
 239          return :
 240            none
 241          */
 242          void mmi_dq_sys_door_open_fail(sys_open_type type)
 243          {
 244   1        g_lock_error_count = 0;
 245   1        g_lock_error_flag++;
 246   1        switch (type)
 247   1        {
 248   2        case SYS_OPEN_BY_PASSWORD:
 249   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 250   2      #ifdef __LOCK_WIFI_SUPPORT__
 251   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 252   2            mmi_dq_wifi_pw_alarm();
 253   2      #endif
 254   2          break;
 255   2      #ifdef __LOCK_FP_SUPPORT__
 256   2        case SYS_OPEN_BY_FP:
 257   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 258   2      #ifdef __LOCK_WIFI_SUPPORT__
 259   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 260   2            mmi_dq_wifi_fp_alarm();
 261   2      #endif
 262   2          break;
 263   2      #endif
 264   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 265   2        case SYS_OPEN_BY_RFID:
 266   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 267   2      #ifdef __LOCK_WIFI_SUPPORT__
 268   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 269   2            mmi_dq_wifi_rfid_alarm();
 270   2      #endif
 271   2          break;
 272   2      #endif
 273   2        }
 274   1      }
 275          
 276          /*
 277          function: 
 278          parameter: 
 279            none
 280          return :
 281            none
 282          */
 283          unsigned char mmi_dq_sys_door_state_check(void)
 284          {
 285   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 286   1          return 1;
 287   1        return 0;
 288   1      }
 289          
 290          /*
 291          function: 
 292          parameter: 
 293            none
 294          return :
 295            none
 296          */
 297          void mmi_dq_sys_door_close_cb(void)
 298          {
 299   1      #ifdef __LOCK_MOTOR_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 6   

 300   1        mmi_dq_motor_stop();
 301   1      #endif
 302   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 303   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 304   1      }
 305          
 306          /*
 307          function: 
 308          parameter: 
 309            none
 310          return :
 311            none
 312          */
 313          void mmi_dq_sys_door_close(void)
 314          {
 315   1        mmi_dq_motor_turn_back();
 316   1        //mmi_dq_wifi_close_door();
 317   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 318   1      }
 319          
 320          /*
 321          function: 
 322          parameter: 
 323            none
 324          return :
 325            none
 326          */
 327          void mmi_dq_sys_aud_end(void)
 328          {
 329   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 330   1      }
 331          
 332          /*
 333          function: 
 334          parameter: 
 335            none
 336          return :
 337            none
 338          */
 339          void mmi_dq_sys_time_out_handle(void)
 340          {
 341   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 342   1      
 343   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 344   1        {
 345   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 346   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 347   2        }
 348   1      #ifdef __LOCK_FP_SUPPORT__
 349   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 350   1        {
 351   2          if (mmi_dq_fs_get_admin_status() == 0)
 352   2            g_timer2_sleep_count = 0;
 353   2          else
 354   2          {
 355   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 356   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 357   3          }
 358   2        }
 359   1      #endif
 360   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 7   

 361   1        {
 362   2          g_timer2_sleep_count = 0;
 363   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 364   2        }
 365   1        else
 366   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 367   1      }
 368          
 369          /*
 370          function: 
 371          parameter: 
 372            none
 373          return :
 374            none
 375          */
 376          void System_timer_event_handler(void)
 377          {
 378   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 379   1      
 380   1        g_rfid_flag = 1; /* RFID */
 381   1      
 382   1        if (g_timer2_flag == 1)
 383   1        {
 384   2          g_timer2_count++;
 385   2          if (g_timer2_count >= g_timer2_set_count)
 386   2          {
 387   3            g_timer2_flag = 2;
 388   3            g_timer2_count = 0;
 389   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 390   3          }
 391   2        }
 392   1      
 393   1        if (g_wifi_check_flag == 1)
 394   1        {
 395   2          g_wifi_check_count++;
 396   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 397   2          {
 398   3            g_wifi_check_flag = 2;
 399   3            g_wifi_check_count = 0;
 400   3          }
 401   2        }
 402   1      
 403   1        if (g_lock_error_flag > 0)
 404   1        {
 405   2          g_lock_error_count++;
 406   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 407   2            g_lock_error_flag = 0;
 408   2        }
 409   1      
 410   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0) && (mmi_dq_wifi_get_running_flag() == 0))
 411   1        {
 412   2          unsigned char flag = 0;
 413   2          g_timer2_sleep_count++;
 414   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 415   2      #ifdef __LOCK_FP_SUPPORT__
 416   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 417   2      #endif
 418   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 419   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 420   2      #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 8   

 421   2          )
 422   2          {
 423   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 424   3            {
 425   4              flag = 1;
 426   4            }
 427   3          }
 428   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 429   2          {
 430   3            flag = 1;
 431   3          }
 432   2      
 433   2          if (flag)
 434   2          {
 435   3            mmi_dq_sys_time_out_handle();
 436   3          }
 437   2        }
 438   1        else
 439   1          g_timer2_sleep_count = 0;
 440   1      }
 441          
 442          unsigned char mmi_dq_sys_get_rfid_flag(void)
 443          {
 444   1        if (g_rfid_flag == 1)
 445   1        {
 446   2          g_rfid_flag = 0;
 447   2          return 1;
 448   2        }
 449   1        return 0;
 450   1      }
 451          
 452          /*
 453          function: 
 454          parameter: 
 455            none
 456          return :
 457            none
 458          */
 459          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 460          {
 461   1        if (g_wifi_check_flag == 2)
 462   1        {
 463   2          g_wifi_check_flag = 0;
 464   2          return 1;
 465   2        }
 466   1        return 0;
 467   1      }
 468          
 469          /*
 470          function: 
 471          parameter: 
 472            none
 473          return :
 474            none
 475          */
 476          void mmi_dq_sys_set_wifi_check(unsigned char type)
 477          {
 478   1        g_wifi_check_count = 0;
 479   1        g_wifi_check_flag = 1;
 480   1        g_wifi_check_type = type;
 481   1      }
 482          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 9   

 483          /*
 484          function: 
 485          parameter: 
 486            none
 487          return :
 488            none
 489          */
 490          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 491          {
 492   1        return g_wifi_check_type;
 493   1      }
 494          
 495          /*
 496          function: 
 497          parameter: 
 498            none
 499          return :
 500            none
 501          */
 502          void mmi_dq_sys_sleep_timer_reset(void)
 503          {
 504   1        g_timer2_sleep_count = 0;
 505   1        return;
 506   1      }
 507          
 508          /*
 509          function: 
 510          parameter: 
 511            none
 512          return :
 513            none
 514          */
 515          unsigned char mmi_dq_sys_get_timer2_flag(void)
 516          {
 517   1        if (g_timer2_flag == 2)
 518   1        {
 519   2          g_timer2_flag = 0;
 520   2          return 1;
 521   2        }
 522   1        return 0;
 523   1      }
 524          
 525          /*
 526          function: 
 527          parameter: 
 528            none
 529          return :
 530            none
 531          */
 532          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 533          {
 534   1        if (count != 0)
 535   1        {
 536   2          g_timer2_count = 0;
 537   2          g_timer2_set_count = count;
 538   2          g_timer2_delay_pro = pro;
 539   2          g_timer2_flag = 1;
 540   2        }
 541   1        else
 542   1          pro();
 543   1      }
 544          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 10  

 545          /*
 546          function: 
 547          parameter: 
 548            none
 549          return :
 550            none
 551          */
 552          void mmi_dq_sys_delay_event_pro(void)
 553          {
 554   1        if (g_timer2_delay_pro != 0)
 555   1          g_timer2_delay_pro();
 556   1      }
 557          
 558          /*
 559          function: 
 560          parameter: 
 561            none
 562          return :
 563            none
 564          */
 565          unsigned char mmi_dq_sys_check_vbat(void)
 566          {
 567   1        unsigned char state = adc_VolT();
 568   1        if (state > 0)
 569   1        {
 570   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 571   2          mmi_dq_wifi_lowpower_alarm();
 572   2          if (state == 2)
 573   2          {
 574   3            // mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 575   3            // return 1;
 576   3          }
 577   2        }
 578   1      
 579   1        return 0;
 580   1      }
 581          
 582          /*
 583          function: 
 584          parameter: 
 585            none
 586          return :
 587            none
 588          */
 589          void mmi_dq_sys_wifi_open(void)
 590          {
 591   1        if (mmi_dq_wifi_open_ask() == 0)
 592   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 593   1      }
 594          
 595          /*
 596          parameter: 
 597            none
 598          return :
 599            none
 600          */
 601          void mmi_dq_sys_add_admin_pwd(void)
 602          {
 603   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 604   1        mmi_ms_pwd_init_var();
 605   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 606   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 11  

 607   1      }
 608          
 609          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 610          //********************************************************************************************************
             -***********************************************************************************
 611          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 612          //
 613          //        menu part
 614          //
 615          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 616          //********************************************************************************************************
             -***********************************************************************************
 617          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 618          
 619          /*
 620          parameter: 
 621            none
 622          return :
 623            none
 624          */
 625          void mmi_dq_sys_add_pwd(void)
 626          {
 627   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 628   1        {
 629   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 630   2          mmi_dq_sys_show_cur_menu_list();
 631   2        }
 632   1        else
 633   1        {
 634   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 635   2          mmi_ms_pwd_init_var();
 636   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 637   2        }
 638   1        return;
 639   1      }
 640          
 641          void mmi_dq_sys_add_pwd_con(void)
 642          {
 643   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 644   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 645   1        return;
 646   1      }
 647          
 648          #ifdef __LOCK_110_SUPPORT__
 649          /*
 650          parameter: 
 651            none
 652          return :
 653            none
 654          */
 655          void mmi_dq_sys_add_110_pwd(void)
 656          {
 657   1        mmi_dq_wifi_wakeup();
 658   1        if (mmi_dq_wifi_check() == 1)
 659   1        {
 660   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 661   2          mmi_dq_sys_show_cur_menu_list();
 662   2          return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 12  

 663   2        }
 664   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 665   1        mmi_ms_pwd_init_var();
 666   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 667   1        return;
 668   1      }
 669          #endif
 670          /*
 671          parameter: 
 672            none
 673          return :
 674            none
 675          */
 676          static void mmi_dq_sys_chg_pwd(void)
 677          {
 678   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 679   1        return;
 680   1      }
 681          
 682          /*
 683          parameter: 
 684            none
 685          return :
 686            none
 687          */
 688          void mmi_dq_sys_del_pwd(void)
 689          {
 690   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 691   1        mmi_ms_pwd_init_var();
 692   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 693   1        return;
 694   1      }
 695          
 696          void mmi_dq_sys_del_pwd_con(void)
 697          {
 698   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 699   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 700   1        return;
 701   1      }
 702          
 703          /*
 704          parameter: 
 705            none
 706          return :
 707            none
 708          */
 709          static void mmi_dq_sys_clear_pwd(void)
 710          {
 711   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 712   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 713   1        return;
 714   1      }
 715          
 716          #if defined(__LOCK_FP_SUPPORT__)
 717          /*
 718          parameter: 
 719            none
 720          return :
 721            none
 722          */
 723          void mmi_dq_sys_add_fp(void)
 724          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 13  

 725   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 726   1        {
 727   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 728   2          mmi_dq_sys_show_cur_menu_list();
 729   2        }
 730   1        else
 731   1        {
 732   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 733   2          mmi_dq_fp_light(FP_BLUE);
 734   2          mmi_ms_opt_time_init();
 735   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 736   2        }
 737   1        return;
 738   1      }
 739          
 740          void mmi_dq_sys_add_fp_con(void)
 741          {
 742   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 743   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 744   1        return;
 745   1      }
 746          
 747          #ifdef __LOCK_110_SUPPORT__
 748          /*
 749          parameter: 
 750            none
 751          return :
 752            none
 753          */
 754          void mmi_dq_sys_add_110_fp(void)
 755          {
 756   1        mmi_dq_wifi_wakeup();
 757   1        if (mmi_dq_wifi_check() == 1)
 758   1        {
 759   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 760   2          mmi_dq_sys_show_cur_menu_list();
 761   2          return;
 762   2        }
 763   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 764   1        mmi_dq_fp_light(FP_BLUE);
 765   1        mmi_ms_opt_time_init();
 766   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
 767   1        return;
 768   1      }
 769          
 770          /*
 771          parameter: 
 772            none
 773          return :
 774            none
 775          */
 776          void mmi_dq_sys_del_110_fp(void)
 777          {
 778   1        mmi_dq_wifi_wakeup();
 779   1        if (mmi_dq_wifi_check() == 1)
 780   1        {
 781   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 782   2          mmi_dq_sys_show_cur_menu_list();
 783   2          return;
 784   2        }
 785   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 786   1        mmi_dq_fp_light(FP_BLUE);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 14  

 787   1        mmi_ms_opt_time_init();
 788   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 789   1        return;
 790   1      }
 791          
 792          #endif
 793          
 794          /*
 795          parameter: 
 796            none
 797          return :
 798            none
 799          */
 800          static void mmi_dq_sys_chg_fp(void)
 801          {
 802   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 803   1        return;
 804   1      }
 805          
 806          /*
 807          parameter: 
 808            none
 809          return :
 810            none
 811          */
 812          void mmi_dq_sys_del_fp(void)
 813          {
 814   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 815   1        mmi_dq_fp_light(FP_BLUE);
 816   1        mmi_ms_opt_time_init();
 817   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 818   1        return;
 819   1      }
 820          
 821          void mmi_dq_sys_del_fp_con(void)
 822          {
 823   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 824   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 825   1        return;
 826   1      }
 827          
 828          /*
 829          parameter: 
 830            none
 831          return :
 832            none
 833          */
 834          static void mmi_dq_sys_clear_fp(void)
 835          {
 836   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 837   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 838   1        return;
 839   1      }
 840          #endif
 841          #ifdef __LOCK_RFID_CARD_SUPPORT__
 842          /*
 843          parameter: 
 844            none
 845          return :
 846            none
 847          */
 848          void mmi_dq_sys_add_rf(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 15  

 849          {
 850   1      
 851   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 852   1        {
 853   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 854   2          mmi_dq_sys_show_cur_menu_list();
 855   2        }
 856   1        else
 857   1        {
 858   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 859   2          mmi_ms_opt_time_init();
 860   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 861   2        }
 862   1        return;
 863   1      }
 864          
 865          void mmi_dq_sys_add_rf_con(void)
 866          {
 867   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 868   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 869   1        return;
 870   1      }
 871          
 872          /*
 873          parameter: 
 874            none
 875          return :
 876            none
 877          */
 878          static void mmi_dq_sys_chg_rf(void)
 879          {
 880   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 881   1        return;
 882   1      }
 883          
 884          /*
 885          parameter: 
 886            none
 887          return :
 888            none
 889          */
 890          void mmi_dq_sys_del_rf(void)
 891          {
 892   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 893   1        mmi_ms_opt_time_init();
 894   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 895   1        return;
 896   1      }
 897          
 898          void mmi_dq_sys_del_rf_con(void)
 899          {
 900   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 901   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 902   1        return;
 903   1      }
 904          
 905          /*
 906          parameter: 
 907            none
 908          return :
 909            none
 910          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 16  

 911          static void mmi_dq_sys_clear_rf(void)
 912          {
 913   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 914   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 915   1        return;
 916   1      }
 917          #endif
 918          
 919          /*
 920          parameter: 
 921            none
 922          return :
 923            none
 924          */
 925          static void mmi_dq_sys_open_pro_sound(void)
 926          {
 927   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 928   1      
 929   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 930   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 931   1        else
 932   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 933   1      
 934   1        mmi_dq_sys_show_cur_menu_list();
 935   1        return;
 936   1      }
 937          
 938          /*
 939          parameter: 
 940            none
 941          return :
 942            none
 943          */
 944          static void mmi_dq_sys_close_pro_sound(void)
 945          {
 946   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 947   1      
 948   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 949   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 950   1        else
 951   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 952   1      
 953   1        mmi_dq_sys_show_cur_menu_list();
 954   1        return;
 955   1      }
 956          
 957          /*
 958          parameter: 
 959            none
 960          return :
 961            none
 962          */
 963          static void mmi_dq_sys_sin_open_mode(void)
 964          {
 965   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 966   1      
 967   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 968   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 969   1        else
 970   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 971   1      
 972   1        mmi_dq_sys_show_cur_menu_list();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 17  

 973   1        return;
 974   1      }
 975          
 976          /*
 977          parameter: 
 978            none
 979          return :
 980            none
 981          */
 982          static void mmi_dq_sys_dbl_open_mode(void)
 983          {
 984   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 985   1      
 986   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
 987   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
 988   1        else
 989   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
 990   1      
 991   1        mmi_dq_sys_show_cur_menu_list();
 992   1        return;
 993   1      }
 994          
 995          #if defined(__LOCK_FP_SUPPORT__)
 996          /*
 997          parameter: 
 998            none
 999          return :
1000            none
1001          */
1002          void mmi_dq_sys_chg_admin_fp_No1(void)
1003          {
1004   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1005   1        mmi_dq_fp_light(FP_BLUE);
1006   1        mmi_ms_opt_time_init();
1007   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1008   1        return;
1009   1      }
1010          
1011          /*
1012          parameter: 
1013            none
1014          return :
1015            none
1016          */
1017          void mmi_dq_sys_chg_admin_fp_No2(void)
1018          {
1019   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1020   1        mmi_dq_fp_light(FP_BLUE);
1021   1        mmi_ms_opt_time_init();
1022   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1023   1        return;
1024   1      }
1025          #endif
1026          
1027          /*
1028          parameter: 
1029            none
1030          return :
1031            none
1032          */
1033          void mmi_dq_sys_chg_admin_pwd(void)
1034          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 18  

1035   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1036   1        mmi_ms_pwd_init_var();
1037   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1038   1        return;
1039   1      }
1040          
1041          /*
1042          parameter: 
1043            none
1044          return :
1045            none
1046          */
1047          void mmi_dq_sys_restore_lock(void)
1048          {
1049   1        unsigned char retval = 0;
1050   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1051   1      
1052   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1053   1          retval = 1;
1054   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1055   1          retval = 1;
1056   1      #ifdef __LOCK_FP_SUPPORT__
1057   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1058   1          retval = 1;
1059   1      #endif
1060   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1061   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1062   1          retval = 1;
1063   1      #endif
1064   1      
1065   1        if (retval == 0)
1066   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1067   1        else
1068   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
1069   1      
1070   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1071   1        return;
1072   1      }
1073          
1074          /*
1075          parameter: 
1076            none
1077          return :
1078            none
1079          */
1080          static void mmi_dq_sys_restore_lock_con(void)
1081          {
1082   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1083   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1084   1      }
1085          
1086          /*
1087          parameter: 
1088            none
1089          return :
1090            none
1091          */
1092          static void mmi_dq_sys_wifi_setting(void)
1093          {
1094   1        if (0 == mmi_dq_wifi_setting())
1095   1        {
1096   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 19  

1097   2          mmi_dq_sys_show_cur_menu_list();
1098   2        }
1099   1        else
1100   1        {
1101   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1102   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1103   2        }
1104   1      }
1105          
1106          typedef struct sys_menu_t
1107          {
1108            unsigned char menu_father_id;
1109            unsigned char menu_sub_id;
1110            void (*sys_menu_node_function)(void);
1111          } sys_menu_t;
1112          
1113          typedef struct sys_menu_list
1114          {
1115            unsigned char id;
1116            unsigned char menu_id;
1117          } sys_menu_list;
1118          
1119          const sys_menu_t sys_menu_tree[] =
1120            {
1121              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1122          #if defined(__LOCK_FP_SUPPORT__)
1123              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1124          #endif
1125          #ifdef __LOCK_RFID_CARD_SUPPORT__
1126              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1127          #endif
1128              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1129              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1130              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1131              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1132          #ifdef __LOCK_110_SUPPORT__
1133              {STR_ID_SYSTEM, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1134          #if defined(__LOCK_FP_SUPPORT__)
1135              {STR_ID_SYSTEM, STR_ID_FINGERPRINT_110, 0},
1136          #endif
1137          #endif
1138          
1139              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1140              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1141              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1142          
1143              //PWD
1144              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1145              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1146              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1147              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1148          //FP
1149          #if defined(__LOCK_FP_SUPPORT__)
1150              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1151              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1152              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1153              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1154          #ifdef __LOCK_110_SUPPORT__
1155              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1156              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1157          #endif
1158          #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 20  

1159          #ifdef __LOCK_RFID_CARD_SUPPORT__
1160              //RF
1161              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1162              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1163              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1164              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1165          #endif
1166              //admin
1167              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1168          #if defined(__LOCK_FP_SUPPORT__)
1169              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1170              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1171              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1172          #endif
1173              //setting
1174              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1175              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1176          
1177              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1178              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1179              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1180              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1181          };
1182          
1183          static unsigned char g_dq_menu_father_id;
1184          static sys_menu_list g_dq_menu_list_id[10];
1185          static unsigned char g_dq_menu_count;
1186          
1187          /*
1188          parameter: 
1189            none
1190          return :
1191            none
1192          */
1193          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1194          {
1195   1        g_dq_menu_father_id = father_id;
1196   1        return;
1197   1      }
1198          
1199          /*
1200          parameter: 
1201            none
1202          return :
1203            none
1204          */
1205          unsigned char mmi_dq_sys_get_menu_count(void)
1206          {
1207   1        return g_dq_menu_count;
1208   1      }
1209          
1210          /*
1211          parameter: 
1212            none
1213          return :
1214            none
1215          */
1216          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1217          {
1218   1        unsigned char i = 0, j = 0;
1219   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1220   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 21  

1221   1        g_dq_menu_father_id = father_id;
1222   1      
1223   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1224   1        g_dq_menu_count = 0;
1225   1      
1226   1        for (i = 0; i < menu_tree_size; i++)
1227   1        {
1228   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1229   2          {
1230   3            g_dq_menu_list_id[j].id = i;
1231   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1232   3            j++;
1233   3            g_dq_menu_count++;
1234   3          }
1235   2        }
1236   1        return;
1237   1      }
1238          
1239          /*
1240          parameter: 
1241            none
1242          return :
1243            none
1244          */
1245          void mmi_dq_sys_show_cur_menu_list(void)
1246          {
1247   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1248   1      
1249   1      #ifdef __LOCK_AUDIO_SUPPORT__
1250   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1251   1      #endif
1252   1      #ifdef __LOCK_FP_SUPPORT__
1253   1        mmi_dq_fp_light(FP_NONE_COLOR);
1254   1      #endif
1255   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1256   1        return;
1257   1      }
1258          
1259          /*
1260          parameter: 
1261            none
1262          return :
1263            current machine status
1264          */
1265          void mmi_dq_sys_get_pre_menu_list(void)
1266          {
1267   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1268   1        {
1269   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1270   2        }
1271   1        else
1272   1        {
1273   2          unsigned char i = 0;
1274   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1275   2      
1276   2          for (i = 0; i < menu_tree_size; i++)
1277   2          {
1278   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1279   3            {
1280   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1281   4              break;
1282   4            }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/11/2021 15:25:41 PAGE 22  

1283   3          }
1284   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1285   2      #ifdef __LOCK_AUDIO_SUPPORT__
1286   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1287   2      #endif
1288   2        }
1289   1        return;
1290   1      }
1291          
1292          /*
1293          parameter: 
1294            none
1295          return :
1296            none
1297          */
1298          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1299          {
1300   1        unsigned char i = 0;
1301   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1302   1        if (menu_id >= g_dq_menu_count)
1303   1          return RET_FAIL;
1304   1        i = g_dq_menu_list_id[menu_id].id;
1305   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1306   1        {
1307   2          sys_menu_tree[i].sys_menu_node_function();
1308   2        }
1309   1        else
1310   1        {
1311   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1312   2      
1313   2      #ifdef __LOCK_AUDIO_SUPPORT__
1314   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1315   2      #endif
1316   2        }
1317   1      
1318   1        return RET_SUCESS;
1319   1      }
1320          
1321          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2069    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    209      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
