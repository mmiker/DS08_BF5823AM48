C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          #include "mmi_decode.h"
  16          // #include <stdio.h>
  17          
  18          #ifdef __LOCK_VIRTUAL_PASSWORD__
              #include "mmi_rtc.h"
              #define MMI_MAX_ERROR_TIMES 5
              #define MMI_ERROR_LOCK_TIME 60
              // #define MMI_TIMER_BASE_TIME 4
              #define MMI_TIMER_ENTER_SLEEP 10000
              #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
              #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
              #define MMI_TIMER_ENTER_SLEEP_DELAY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
              static uint32_t g_last_error_time = 0;
              static unsigned char g_multiple_error_times = 0;
              static uint8_t lock_easy_open_mode = 0;
              static uint8_t lock_inside_lock = 0;
              //static unsigned int g_enter_sleep_set_time = MMI_TIMER_ENTER_SLEEP_COUNT;
              #endif //__LOCK_VIRTUAL_PASSWORD__
  33          
  34          // extern void printfS(char *show, char *status);
  35          // extern void printfV(char *show, int value);
  36          
  37          static unsigned char g_sys_door_open_flag = 0;
  38          
  39          static unsigned int g_timer2_sleep_count = 0;
  40          static unsigned int g_timer2_count = 0;
  41          static unsigned int g_timer2_set_count = 0;
  42          static unsigned char g_timer2_flag = 0;
  43          
  44          static unsigned char g_wifi_check_flag = 0;
  45          static unsigned char g_wifi_check_count = 0;
  46          static unsigned char g_wifi_check_type = 0;
  47          
  48          /* RFID */
  49          static unsigned char g_rfid_flag = 0;
  50          
  51          #define LOCK_MAX_EEROR_TIMES 5
  52          static unsigned char g_lock_error_flag = 0;
  53          static unsigned int g_lock_error_count = 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 2   

  54          
  55          timer2_delay_pro g_timer2_delay_pro = 0;
  56          
  57          #define MMI_TIMER_BASE_TIME 100
  58          #define MMI_TIMER_ENTER_SLEEP 10000
  59          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  60          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  61          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  62          #define MMI_TIMER_DOOR_OPEN 6000
  63          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  64          #define MMI_TIMER_MOTOR 300
  65          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  66          #define MMI_TIMER_WIFI_CHECK 1000
  67          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  68          #define MMI_WIFI_SETTING_DELAY 60000
  69          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  70          #define MMI_LOCK_ERROR_DELAY 60000
  71          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  72          /*
  73          parameter: 
  74            none
  75          return :
  76            none
  77          */
  78          void mmi_dq_sys_init(void)
  79          {
  80   1        mmi_InitQueue();
  81   1        mmi_ms_pwd_init_var();
  82   1        mmi_dq_fs_init();
  83   1      }
  84          /*
  85          parameter: 
  86            none
  87          return :
  88            none
  89          */
  90          // #ifndef __LOCK_VIRTUAL_PASSWORD__
  91          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  92          {
  93   1        unsigned char audio_id = 0;
  94   1      
  95   1        time_msec = 0;
  96   1      
  97   1      #ifdef __LOCK_AUDIO_SUPPORT__
  98   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  99   1        mmi_dq_aud_play_with_id(audio_id);
 100   1      #endif
 101   1        return;
 102   1      }
 103          // #endif
 104          
 105          /*
 106          parameter: 
 107            none
 108          return :
 109            none
 110          */
 111          void mmi_dq_sys_lock_add_admin_suc(void)
 112          {
 113   1        mmi_dq_fs_set_admin_status(1);
 114   1      
 115   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 3   

 116   1      }
 117          
 118          /*
 119          function: system enter sleep
 120          parameter: 
 121            none
 122          return :
 123            none
 124          */
 125          void mmi_dq_sys_enter_sleep(void)
 126          {
 127   1        mmi_dq_bsp_enter_sleep();
 128   1      
 129   1        g_timer2_flag = 0;
 130   1        g_sys_door_open_flag = 0;
 131   1      
 132   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 133   1      }
 134          
 135          /*
 136          function: system wake up
 137          parameter: 
 138            none
 139          return :
 140            none
 141          */
 142          void mmi_dq_sys_wake_up(void)
 143          {
 144   1      
 145   1        mmi_dq_bsp_wake_up();
 146   1        if (mmi_dq_sys_check_vbat() == 0)
 147   1        {
 148   2      #ifdef __LOCK_WIFI_SUPPORT__
 149   2          mmi_dq_wifi_wakeup();
 150   2      #endif
 151   2      #ifdef __LOCK_FP_SUPPORT__
                  mmi_dq_fp_init(); //握手、点灯
              #endif
 154   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 155   2        }
 156   1      }
 157          
 158          /*
 159          function: 
 160          parameter: 
 161            none
 162          return :
 163            none
 164          */
 165          void mmi_dq_sys_door_open_cb(void)
 166          {
 167   1      #ifdef __LOCK_MOTOR_SUPPORT__
 168   1        mmi_dq_motor_stop();
 169   1      #endif
 170   1      #ifdef __LOCK_AUDIO_SUPPORT__
 171   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 172   1      #endif
 173   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 174   1      }
 175          
 176          /*
 177          function: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 4   

 178          parameter: 
 179            none
 180          return :
 181            none
 182          */
 183          void mmi_dq_sys_door_open(sys_open_type type)
 184          {
 185   1      #ifdef __LOCK_BUS_SUPPORT__
 186   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 187   1        {
 188   2      #ifdef __LOCK_AUDIO_SUPPORT__
 189   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 190   2      #endif
 191   2      #ifdef __LOCK_WIFI_SUPPORT__
 192   2          switch (type)
 193   2          {
 194   3          case SYS_OPEN_BY_PASSWORD:
 195   3            mmi_dq_wifi_pw_alarm();
 196   3            break;
 197   3          case SYS_OPEN_BY_FP:
 198   3            mmi_dq_wifi_fp_alarm();
 199   3            break;
 200   3          case SYS_OPEN_BY_RFID:
 201   3            mmi_dq_wifi_rfid_alarm();
 202   3            break;
 203   3          }
 204   2      #endif
 205   2          return;
 206   2        }
 207   1      #endif
 208   1        g_lock_error_flag = 0;
 209   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 210   1        {
 211   2          if ((g_sys_door_open_flag & (~type)) != 0)
 212   2          {
 213   3            g_sys_door_open_flag = 0;
 214   3          }
 215   2          else
 216   2          {
 217   3            g_sys_door_open_flag |= type;
 218   3      #ifdef __LOCK_AUDIO_SUPPORT__
 219   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 220   3      #endif
 221   3            return;
 222   3          }
 223   2        }
 224   1      
 225   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 226   1      
 227   1      #ifdef __LOCK_MOTOR_SUPPORT__
 228   1        mmi_dq_motor_turn_right();
 229   1      #endif
 230   1        //mmi_dq_wifi_open_door();
 231   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 232   1      
 233   1      #ifdef __LOCK_WIFI_SUPPORT__
 234   1        switch (type)
 235   1        {
 236   2      #ifdef __LOCK_110_SUPPORT__
 237   2        case SYS_OPEN_BY_110_PASSWORD:
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 5   

 238   2          mmi_dq_wifi_send_pwd_110(get_index);
 239   2          // printfV("get_index",(int)get_index);
 240   2          break;
 241   2        case SYS_OPEN_BY_110_FP:
 242   2          mmi_dq_wifi_send_fp_110(get_index);
 243   2          // printfV("get_index",(int)get_index);
 244   2          break;
 245   2      #endif
 246   2        case SYS_OPEN_BY_PASSWORD:
 247   2          mmi_dq_wifi_open_by_password(get_index);
 248   2          // printfV("get_index",(int)get_index);
 249   2          break;
 250   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
                  mmi_dq_wifi_open_by_fp(get_index);
                  // printfV("get_index",(int)get_index);
                  break;
              #endif
 256   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 257   2        case SYS_OPEN_BY_RFID:
 258   2          mmi_dq_wifi_open_by_rfid(get_index);
 259   2          // printfV("get_index",(int)get_index);
 260   2          break;
 261   2      #endif
 262   2        case SYS_OPEN_BY_WIFI:
 263   2          mmi_dq_wifi_open_by_wifi();
 264   2          break;
 265   2        }
 266   1      
 267   1        if (pv_add_switch == 0)
 268   1          ;
 269   1        else if (pv_add_switch == 1)
 270   1          mmi_dq_wifi_take_photos(); //拍照
 271   1        else if (pv_add_switch == 2)
 272   1          mmi_dq_wifi_take_videos(); //录像
 273   1        else if (pv_add_switch == 3)
 274   1        {
 275   2          mmi_dq_wifi_take_photos(); //拍照
 276   2          mmi_dq_wifi_take_videos(); //录像
 277   2        }
 278   1      
 279   1      #endif
 280   1      }
 281          
 282          /*
 283          function: 
 284          parameter: 
 285            none
 286          return :
 287            none
 288          */
 289          void mmi_dq_sys_door_open_fail(sys_open_type type)
 290          {
 291   1        g_lock_error_count = 0;
 292   1        g_lock_error_flag++;
 293   1        switch (type)
 294   1        {
 295   2        case SYS_OPEN_BY_PASSWORD:
 296   2      #ifdef __LOCK_AUDIO_SUPPORT__
 297   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 298   2      #endif
 299   2      #ifdef __LOCK_WIFI_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 6   

 300   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 301   2            mmi_dq_wifi_pw_alarm();
 302   2      #endif
 303   2          break;
 304   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_OPEN_BY_FP:
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                  if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
                    mmi_dq_wifi_fp_alarm();
              #endif
                  break;
              #endif
 315   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 316   2        case SYS_OPEN_BY_RFID:
 317   2      #ifdef __LOCK_AUDIO_SUPPORT__
 318   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 319   2      #endif
 320   2      #ifdef __LOCK_WIFI_SUPPORT__
 321   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 322   2            mmi_dq_wifi_rfid_alarm();
 323   2      #endif
 324   2          break;
 325   2      #endif
 326   2        }
 327   1      }
 328          
 329          /*
 330          function: 
 331          parameter: 
 332            none
 333          return :
 334            none
 335          */
 336          unsigned char mmi_dq_sys_door_state_check(void)
 337          {
 338   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 339   1          return 1;
 340   1        return 0;
 341   1      }
 342          
 343          /*
 344          function: 
 345          parameter: 
 346            none
 347          return :
 348            none
 349          */
 350          void mmi_dq_sys_door_close_cb(void)
 351          {
 352   1      #ifdef __LOCK_MOTOR_SUPPORT__
 353   1        mmi_dq_motor_stop();
 354   1      #endif
 355   1      #ifdef __LOCK_AUDIO_SUPPORT__
 356   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 357   1      #endif
 358   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 359   1      }
 360          
 361          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 7   

 362          function: 
 363          parameter: 
 364            none
 365          return :
 366            none
 367          */
 368          void mmi_dq_sys_door_close(void)
 369          {
 370   1      #ifdef __LOCK_MOTOR_SUPPORT__
 371   1        mmi_dq_motor_turn_back();
 372   1      #endif
 373   1        //mmi_dq_wifi_close_door();
 374   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 375   1      }
 376          
 377          /*
 378          function: 
 379          parameter: 
 380            none
 381          return :
 382            none
 383          */
 384          void mmi_dq_sys_aud_end(void)
 385          {
 386   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 387   1      }
 388          
 389          /*
 390          function: 
 391          parameter: 
 392            none
 393          return :
 394            none
 395          */
 396          void mmi_dq_sys_time_out_handle(void)
 397          {
 398   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 399   1      
 400   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 401   1        {
 402   2      #ifdef __LOCK_AUDIO_SUPPORT__
 403   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 404   2      #endif
 405   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 406   2        }
 407   1      #ifdef __LOCK_FP_SUPPORT__
                else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
                {
                  if (mmi_dq_fs_get_admin_status() == 0)
                    g_timer2_sleep_count = 0;
                  else
                  {
              #ifdef __LOCK_AUDIO_SUPPORT__
                    mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
              #endif
                    mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
                  }
                }
              #endif
 421   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 422   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 8   

 423   2          g_timer2_sleep_count = 0;
 424   2      #ifdef __LOCK_AUDIO_SUPPORT__
 425   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 426   2      #endif
 427   2        }
 428   1        else
 429   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 430   1      }
 431          
 432          /*
 433          function: 
 434          parameter: 
 435            none
 436          return :
 437            none
 438          */
 439          void System_timer_event_handler(void)
 440          {
 441   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 442   1      
 443   1        g_rfid_flag = 1; /* RFID */
 444   1      
 445   1        if (g_timer2_flag == 1)
 446   1        {
 447   2          g_timer2_count++;
 448   2          if (g_timer2_count >= g_timer2_set_count)
 449   2          {
 450   3            g_timer2_flag = 2;
 451   3            g_timer2_count = 0;
 452   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 453   3          }
 454   2        }
 455   1      
 456   1        if (g_wifi_check_flag == 1)
 457   1        {
 458   2          g_wifi_check_count++;
 459   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 460   2          {
 461   3            g_wifi_check_flag = 2;
 462   3            g_wifi_check_count = 0;
 463   3          }
 464   2        }
 465   1      
 466   1        if (g_lock_error_flag > 0)
 467   1        {
 468   2          g_lock_error_count++;
 469   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 470   2            g_lock_error_flag = 0;
 471   2        }
 472   1      
 473   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0)
 474   1      #ifdef __LOCK_WIFI_SUPPORT__
 475   1          && (mmi_dq_wifi_get_running_flag() == 0)
 476   1      #endif
 477   1        )
 478   1        {
 479   2          unsigned char flag = 0;
 480   2          g_timer2_sleep_count++;
 481   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 482   2      #ifdef __LOCK_FP_SUPPORT__
                    || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 9   

             - || state == SYS_STATUS_DEL_FP
              #endif
 485   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 486   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 487   2      #endif
 488   2          )
 489   2          {
 490   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 491   3            {
 492   4              flag = 1;
 493   4            }
 494   3          }
 495   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 496   2          {
 497   3            flag = 1;
 498   3          }
 499   2      
 500   2          if (flag)
 501   2          {
 502   3            mmi_dq_sys_time_out_handle();
 503   3          }
 504   2        }
 505   1        else
 506   1          g_timer2_sleep_count = 0;
 507   1      }
 508          
 509          /*
 510          function: 
 511          parameter: 
 512            none
 513          return :
 514            none
 515          */
 516          unsigned char mmi_dq_sys_get_rfid_flag(void)
 517          {
 518   1        if (g_rfid_flag == 1)
 519   1        {
 520   2          g_rfid_flag = 0;
 521   2          return 1;
 522   2        }
 523   1        return 0;
 524   1      }
 525          
 526          /*
 527          function: 
 528          parameter: 
 529            none
 530          return :
 531            none
 532          */
 533          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 534          {
 535   1        if (g_wifi_check_flag == 2)
 536   1        {
 537   2          g_wifi_check_flag = 0;
 538   2          return 1;
 539   2        }
 540   1        return 0;
 541   1      }
 542          
 543          /*
 544          function: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 10  

 545          parameter: 
 546            none
 547          return :
 548            none
 549          */
 550          void mmi_dq_sys_set_wifi_check(unsigned char type)
 551          {
 552   1        g_wifi_check_count = 0;
 553   1        g_wifi_check_flag = 1;
 554   1        g_wifi_check_type = type;
 555   1      }
 556          
 557          /*
 558          function: 
 559          parameter: 
 560            none
 561          return :
 562            none
 563          */
 564          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 565          {
 566   1        return g_wifi_check_type;
 567   1      }
 568          
 569          /*
 570          function: 
 571          parameter: 
 572            none
 573          return :
 574            none
 575          */
 576          void mmi_dq_sys_sleep_timer_reset(void)
 577          {
 578   1        g_timer2_sleep_count = 0;
 579   1        return;
 580   1      }
 581          
 582          /*
 583          function: 
 584          parameter: 
 585            none
 586          return :
 587            none
 588          */
 589          unsigned char mmi_dq_sys_get_timer2_flag(void)
 590          {
 591   1        if (g_timer2_flag == 2)
 592   1        {
 593   2          g_timer2_flag = 0;
 594   2          return 1;
 595   2        }
 596   1        return 0;
 597   1      }
 598          
 599          /*
 600          function: 
 601          parameter: 
 602            none
 603          return :
 604            none
 605          */
 606          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 11  

 607          {
 608   1        if (count != 0)
 609   1        {
 610   2          g_timer2_count = 0;
 611   2          g_timer2_set_count = count;
 612   2          g_timer2_delay_pro = pro;
 613   2          g_timer2_flag = 1;
 614   2        }
 615   1        else
 616   1          pro();
 617   1      }
 618          
 619          /*
 620          function: 
 621          parameter: 
 622            none
 623          return :
 624            none
 625          */
 626          void mmi_dq_sys_delay_event_pro(void)
 627          {
 628   1        if (g_timer2_delay_pro != 0)
 629   1          g_timer2_delay_pro();
 630   1      }
 631          
 632          /*
 633          function: 
 634          parameter: 
 635            none
 636          return :
 637            none
 638          */
 639          unsigned char mmi_dq_sys_check_vbat(void)
 640          {
 641   1        unsigned char state = adc_VolT();
 642   1        if (state > 0)
 643   1        {
 644   2      #ifdef __LOCK_AUDIO_SUPPORT__
 645   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 646   2      #endif
 647   2      #ifdef __LOCK_WIFI_SUPPORT__
 648   2          mmi_dq_wifi_lowpower_alarm();
 649   2      #endif
 650   2          if (state == 2)
 651   2          {
 652   3            mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 653   3            return 1;
 654   3          }
 655   2        }
 656   1      
 657   1        return 0;
 658   1      }
 659          
 660          /**
 661            * @brief  远程开门
 662            * @param  none
 663            * @return none
 664            * @note   none
 665            * @see    none
 666            */
 667          void mmi_dq_sys_wifi_open(void)
 668          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 12  

 669   1      #ifdef __LOCK_WIFI_SUPPORT__
 670   1        if (mmi_dq_wifi_open_ask() == 0)
 671   1      #ifdef __LOCK_AUDIO_SUPPORT__
 672   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 673   1      #else
                  ;
              #endif
 676   1      #endif
 677   1      }
 678          
 679          /*
 680          parameter: 
 681            none
 682          return :
 683            none
 684          */
 685          void mmi_dq_sys_add_admin_pwd(void)
 686          {
 687   1      #ifdef __LOCK_AUDIO_SUPPORT__
 688   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 689   1      #endif
 690   1        mmi_ms_pwd_init_var();
 691   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 692   1        return;
 693   1      }
 694          
 695          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 696          //********************************************************************************************************
             -***********************************************************************************
 697          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 698          //
 699          //        menu part
 700          //
 701          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 702          //********************************************************************************************************
             -***********************************************************************************
 703          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 704          
 705          /*
 706          parameter: 
 707            none
 708          return :
 709            none
 710          */
 711          void mmi_dq_sys_add_pwd(void)
 712          {
 713   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 714   1        {
 715   2      #ifdef __LOCK_AUDIO_SUPPORT__
 716   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 717   2      #endif
 718   2          mmi_dq_sys_show_cur_menu_list();
 719   2        }
 720   1        else
 721   1        {
 722   2      #ifdef __LOCK_AUDIO_SUPPORT__
 723   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 724   2      #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 13  

 725   2          mmi_ms_pwd_init_var();
 726   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 727   2        }
 728   1        return;
 729   1      }
 730          
 731          void mmi_dq_sys_add_pwd_con(void)
 732          {
 733   1      #ifdef __LOCK_AUDIO_SUPPORT__
 734   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 735   1      #endif
 736   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 737   1        return;
 738   1      }
 739          
 740          #ifdef __LOCK_110_SUPPORT__
 741          /*
 742          parameter: 
 743            none
 744          return :
 745            none
 746          */
 747          void mmi_dq_sys_add_110_pwd(void)
 748          {
 749   1        mmi_dq_wifi_wakeup();
 750   1        if (mmi_dq_wifi_check() == 1)
 751   1        {
 752   2      #ifdef __LOCK_AUDIO_SUPPORT__
 753   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 754   2      #endif
 755   2          mmi_dq_sys_show_cur_menu_list();
 756   2          return;
 757   2        }
 758   1      #ifdef __LOCK_AUDIO_SUPPORT__
 759   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 760   1      #endif
 761   1        mmi_ms_pwd_init_var();
 762   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 763   1        return;
 764   1      }
 765          #endif
 766          /*
 767          parameter: 
 768            none
 769          return :
 770            none
 771          */
 772          static void mmi_dq_sys_chg_pwd(void)
 773          {
 774   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 775   1        return;
 776   1      }
 777          
 778          /*
 779          parameter: 
 780            none
 781          return :
 782            none
 783          */
 784          void mmi_dq_sys_del_pwd(void)
 785          {
 786   1      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 14  

 787   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 788   1      #endif
 789   1        mmi_ms_pwd_init_var();
 790   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 791   1        return;
 792   1      }
 793          
 794          void mmi_dq_sys_del_pwd_con(void)
 795          {
 796   1      #ifdef __LOCK_AUDIO_SUPPORT__
 797   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 798   1      #endif
 799   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 800   1        return;
 801   1      }
 802          
 803          /*
 804          parameter: 
 805            none
 806          return :
 807            none
 808          */
 809          static void mmi_dq_sys_clear_pwd(void)
 810          {
 811   1      #ifdef __LOCK_AUDIO_SUPPORT__
 812   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 813   1      #endif
 814   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 815   1        return;
 816   1      }
 817          
 818          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_fp(void)
              {
                if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                }
                else
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                  mmi_dq_fp_light(FP_BLUE);
                  mmi_ms_opt_time_init();
                  mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
                }
                return;
              }
              
              void mmi_dq_sys_add_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 15  

                mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
                return;
              }
              
              #ifdef __LOCK_110_SUPPORT__
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_add_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_110_fp(void)
              {
                mmi_dq_wifi_wakeup();
                if (mmi_dq_wifi_check() == 1)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
              #endif
                  mmi_dq_sys_show_cur_menu_list();
                  return;
                }
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
                return;
              }
              
              #endif
              
              /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 16  

              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_chg_fp(void)
              {
                //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_del_fp(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
                return;
              }
              
              void mmi_dq_sys_del_fp_con(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              static void mmi_dq_sys_clear_fp(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
              #endif
                mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
                return;
              }
              #endif
 963          #ifdef __LOCK_RFID_CARD_SUPPORT__
 964          /*
 965          parameter: 
 966            none
 967          return :
 968            none
 969          */
 970          void mmi_dq_sys_add_rf(void)
 971          {
 972   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 17  

 973   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 974   1        {
 975   2      #ifdef __LOCK_AUDIO_SUPPORT__
 976   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 977   2      #endif
 978   2          mmi_dq_sys_show_cur_menu_list();
 979   2        }
 980   1        else
 981   1        {
 982   2      #ifdef __LOCK_AUDIO_SUPPORT__
 983   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 984   2      #endif
 985   2          mmi_ms_opt_time_init();
 986   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 987   2        }
 988   1        return;
 989   1      }
 990          
 991          void mmi_dq_sys_add_rf_con(void)
 992          {
 993   1      #ifdef __LOCK_AUDIO_SUPPORT__
 994   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 995   1      #endif
 996   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 997   1        return;
 998   1      }
 999          
1000          /*
1001          parameter: 
1002            none
1003          return :
1004            none
1005          */
1006          static void mmi_dq_sys_chg_rf(void)
1007          {
1008   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
1009   1        return;
1010   1      }
1011          
1012          /*
1013          parameter: 
1014            none
1015          return :
1016            none
1017          */
1018          void mmi_dq_sys_del_rf(void)
1019          {
1020   1      #ifdef __LOCK_AUDIO_SUPPORT__
1021   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
1022   1      #endif
1023   1        mmi_ms_opt_time_init();
1024   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
1025   1        return;
1026   1      }
1027          
1028          void mmi_dq_sys_del_rf_con(void)
1029          {
1030   1      #ifdef __LOCK_AUDIO_SUPPORT__
1031   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
1032   1      #endif
1033   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
1034   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 18  

1035   1      }
1036          
1037          /*
1038          parameter: 
1039            none
1040          return :
1041            none
1042          */
1043          static void mmi_dq_sys_clear_rf(void)
1044          {
1045   1      #ifdef __LOCK_AUDIO_SUPPORT__
1046   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
1047   1      #endif
1048   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
1049   1        return;
1050   1      }
1051          #endif
1052          
1053          #ifdef __LOCK_DECODE_SUPPORT__
1054          /**
1055            * @brief  add 8key from decode
1056            * @param  none
1057            * @return none
1058            * @note   none
1059            * @see    none
1060            */
1061          void mmi_dq_sys_add_decode(void)
1062          {
1063   1        if (mmi_dq_fs_get_decode_unuse_index() == 0xFF)
1064   1        {
1065   2      #ifdef __LOCK_AUDIO_SUPPORT__
1066   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
1067   2      #endif
1068   2          mmi_dq_sys_show_cur_menu_list();
1069   2        }
1070   1        else
1071   1        {
1072   2      #ifdef __LOCK_AUDIO_SUPPORT__
1073   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
1074   2      #endif
1075   2          mmi_ms_opt_time_init();
1076   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_DECODE_RANDOM);
1077   2        }
1078   1        return;
1079   1      }
1080          #endif
1081          
1082          /*
1083          parameter: 
1084            none
1085          return :
1086            none
1087          */
1088          static void mmi_dq_sys_open_pro_sound(void)
1089          {
1090   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1091   1      
1092   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
1093   1      #ifdef __LOCK_AUDIO_SUPPORT__
1094   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS)
1095   1      #endif
1096   1            ;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 19  

1097   1        else
1098   1      #ifdef __LOCK_AUDIO_SUPPORT__
1099   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL)
1100   1      #endif
1101   1            ;
1102   1      
1103   1        mmi_dq_sys_show_cur_menu_list();
1104   1        return;
1105   1      }
1106          
1107          /*
1108          parameter: 
1109            none
1110          return :
1111            none
1112          */
1113          static void mmi_dq_sys_close_pro_sound(void)
1114          {
1115   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1116   1      
1117   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
1118   1      #ifdef __LOCK_AUDIO_SUPPORT__
1119   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS)
1120   1      #endif
1121   1            ;
1122   1        else
1123   1      #ifdef __LOCK_AUDIO_SUPPORT__
1124   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL)
1125   1      #endif
1126   1            ;
1127   1      
1128   1        mmi_dq_sys_show_cur_menu_list();
1129   1        return;
1130   1      }
1131          
1132          /*
1133          parameter: 
1134            none
1135          return :
1136            none
1137          */
1138          static void mmi_dq_sys_sin_open_mode(void)
1139          {
1140   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1141   1      
1142   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
1143   1      #ifdef __LOCK_AUDIO_SUPPORT__
1144   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS)
1145   1      #endif
1146   1            ;
1147   1        else
1148   1      #ifdef __LOCK_AUDIO_SUPPORT__
1149   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL)
1150   1      #endif
1151   1            ;
1152   1      
1153   1        mmi_dq_sys_show_cur_menu_list();
1154   1        return;
1155   1      }
1156          
1157          /*
1158          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 20  

1159            none
1160          return :
1161            none
1162          */
1163          static void mmi_dq_sys_dbl_open_mode(void)
1164          {
1165   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1166   1      
1167   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1168   1      #ifdef __LOCK_AUDIO_SUPPORT__
1169   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS)
1170   1      #endif
1171   1            ;
1172   1        else
1173   1      #ifdef __LOCK_AUDIO_SUPPORT__
1174   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL)
1175   1      #endif
1176   1            ;
1177   1      
1178   1        mmi_dq_sys_show_cur_menu_list();
1179   1        return;
1180   1      }
1181          
1182          #if defined(__LOCK_FP_SUPPORT__)
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No1(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
                return;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_dq_sys_chg_admin_fp_No2(void)
              {
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
              #endif
                mmi_dq_fp_light(FP_BLUE);
                mmi_ms_opt_time_init();
                mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
                return;
              }
              #endif
1217          
1218          /*
1219          parameter: 
1220            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 21  

1221          return :
1222            none
1223          */
1224          void mmi_dq_sys_chg_admin_pwd(void)
1225          {
1226   1      #ifdef __LOCK_AUDIO_SUPPORT__
1227   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1228   1      #endif
1229   1        mmi_ms_pwd_init_var();
1230   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1231   1        return;
1232   1      }
1233          
1234          /*
1235          parameter: 
1236            none
1237          return :
1238            none
1239          */
1240          void mmi_dq_sys_restore_lock(void)
1241          {
1242   1        unsigned char retval = 0;
1243   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1244   1      
1245   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1246   1          retval = 1;
1247   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1248   1          retval = 1;
1249   1      #ifdef __LOCK_FP_SUPPORT__
                if (RET_SUCESS != mmi_dq_fs_clr_fp())
                  retval = 1;
              #endif
1253   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1254   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1255   1          retval = 1;
1256   1      #endif
1257   1      
1258   1        if (retval == 0)
1259   1      #ifdef __LOCK_AUDIO_SUPPORT__
1260   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS)
1261   1      #endif
1262   1            ;
1263   1        else
1264   1      #ifdef __LOCK_AUDIO_SUPPORT__
1265   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL)
1266   1      #endif
1267   1            ;
1268   1      
1269   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1270   1        return;
1271   1      }
1272          
1273          /*
1274          parameter: 
1275            none
1276          return :
1277            none
1278          */
1279          static void mmi_dq_sys_restore_lock_con(void)
1280          {
1281   1      #ifdef __LOCK_AUDIO_SUPPORT__
1282   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 22  

1283   1      #endif
1284   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1285   1      }
1286          
1287          #ifdef __LOCK_WIFI_SUPPORT__
1288          
1289          /**
1290            * @brief  智能能配网
1291            * @param  none
1292            * @return none
1293            * @note   none
1294            * @see    none
1295            */
1296          static void mmi_dq_sys_wifi_setting(void)
1297          {
1298   1        if (0 == mmi_dq_wifi_setting())
1299   1        {
1300   2      #ifdef __LOCK_AUDIO_SUPPORT__
1301   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1302   2      #endif
1303   2          mmi_dq_sys_show_cur_menu_list();
1304   2        }
1305   1        else
1306   1        {
1307   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1308   2      #ifdef __LOCK_AUDIO_SUPPORT__
1309   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1310   2      #endif
1311   2        }
1312   1      }
1313          
1314          /**
1315            * @brief  AirKiss配网
1316            * @param  none
1317            * @return none
1318            * @note   none
1319            * @see    none
1320            */
1321          static void mmi_dq_sys_wifi_airkiss_setting(void)
1322          {
1323   1        if (0 == mmi_dq_wifi_arikiss_con())
1324   1        {
1325   2      #ifdef __LOCK_AUDIO_SUPPORT__
1326   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1327   2      #endif
1328   2          mmi_dq_sys_show_cur_menu_list();
1329   2        }
1330   1        else
1331   1        {
1332   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1333   2      #ifdef __LOCK_AUDIO_SUPPORT__
1334   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1335   2      #endif
1336   2        }
1337   1      }
1338          
1339          /**
1340            * @brief  二维码配网
1341            * @param  none
1342            * @return none
1343            * @note   none
1344            * @see    none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 23  

1345            */
1346          static void mmi_dq_sys_wifi_code_setting(void)
1347          {
1348   1        if (0 == mmi_dq_wifi_code_con())
1349   1        {
1350   2      #ifdef __LOCK_AUDIO_SUPPORT__
1351   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1352   2      #endif
1353   2          mmi_dq_sys_show_cur_menu_list();
1354   2        }
1355   1        else
1356   1        {
1357   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1358   2      #ifdef __LOCK_AUDIO_SUPPORT__
1359   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1360   2      #endif
1361   2        }
1362   1      }
1363          #endif
1364          
1365          #ifdef __LOCK_DECODE_SUPPORT__
1366          static void mmi_dq_sys_sync_start_time(void)
1367          {
1368   1      }
1369          #endif
1370          
1371          typedef struct sys_menu_t
1372          {
1373            unsigned char menu_father_id;
1374            unsigned char menu_sub_id;
1375            void (*sys_menu_node_function)(void);
1376          } sys_menu_t;
1377          
1378          typedef struct sys_menu_list
1379          {
1380            unsigned char id;
1381            unsigned char menu_id;
1382          } sys_menu_list;
1383          
1384          const sys_menu_t sys_menu_tree[] =
1385            {
1386              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1387          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
              #endif
1390          #ifdef __LOCK_RFID_CARD_SUPPORT__
1391              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1392          #endif
1393              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1394              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1395              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1396          #ifdef __LOCK_WIFI_SUPPORT__
1397              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1398              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1399              {STR_ID_SYSTEM, STR_ID_DECODE, mmi_dq_sys_add_decode},
1400          
1401          #endif
1402          #ifdef __LOCK_110_SUPPORT__
1403              {STR_ID_SYSTEM, STR_ID_110, 0},
1404          
1405              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1406          #if defined(__LOCK_FP_SUPPORT__)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 24  

                  {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
              #endif
1409          #endif
1410          
1411              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1412              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1413              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1414          
1415              //PWD
1416              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1417              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1418              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1419              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1420          //FP
1421          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
                  //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
                  {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
                  {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
              #ifdef __LOCK_110_SUPPORT__
                  {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
                  {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
              #endif
              #endif
1431          #ifdef __LOCK_RFID_CARD_SUPPORT__
1432              //RF
1433              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1434              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1435              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1436              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1437          #endif
1438              //admin
1439              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1440          #if defined(__LOCK_FP_SUPPORT__)
                  {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
                  {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
              #endif
1445              //setting
1446              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1447              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1448          
1449              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1450              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1451              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1452              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1453          };
1454          
1455          static unsigned char g_dq_menu_father_id;
1456          static sys_menu_list g_dq_menu_list_id[10];
1457          static unsigned char g_dq_menu_count;
1458          
1459          /*
1460          parameter: 
1461            none
1462          return :
1463            none
1464          */
1465          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1466          {
1467   1        g_dq_menu_father_id = father_id;
1468   1        return;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 25  

1469   1      }
1470          
1471          /*
1472          parameter: 
1473            none
1474          return :
1475            none
1476          */
1477          unsigned char mmi_dq_sys_get_menu_count(void)
1478          {
1479   1        return g_dq_menu_count;
1480   1      }
1481          
1482          /*
1483          parameter: 
1484            none
1485          return :
1486            none
1487          */
1488          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1489          {
1490   1        unsigned char i = 0, j = 0;
1491   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1492   1      
1493   1        g_dq_menu_father_id = father_id;
1494   1      
1495   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1496   1        g_dq_menu_count = 0;
1497   1      
1498   1        for (i = 0; i < menu_tree_size; i++)
1499   1        {
1500   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1501   2          {
1502   3            g_dq_menu_list_id[j].id = i;
1503   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1504   3            j++;
1505   3            g_dq_menu_count++;
1506   3          }
1507   2        }
1508   1        return;
1509   1      }
1510          
1511          /*
1512          parameter: 
1513            none
1514          return :
1515            none
1516          */
1517          void mmi_dq_sys_show_cur_menu_list(void)
1518          {
1519   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1520   1      
1521   1      #ifdef __LOCK_AUDIO_SUPPORT__
1522   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1523   1      #endif
1524   1      #ifdef __LOCK_FP_SUPPORT__
                mmi_dq_fp_light(FP_NONE_COLOR);
              #endif
1527   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1528   1        return;
1529   1      }
1530          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 26  

1531          /*
1532          parameter: 
1533            none
1534          return :
1535            current machine status
1536          */
1537          void mmi_dq_sys_get_pre_menu_list(void)
1538          {
1539   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1540   1        {
1541   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1542   2        }
1543   1        else
1544   1        {
1545   2          unsigned char i = 0;
1546   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1547   2      
1548   2          for (i = 0; i < menu_tree_size; i++)
1549   2          {
1550   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1551   3            {
1552   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1553   4              break;
1554   4            }
1555   3          }
1556   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1557   2      #ifdef __LOCK_AUDIO_SUPPORT__
1558   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1559   2      #endif
1560   2        }
1561   1        return;
1562   1      }
1563          
1564          /*
1565          parameter: 
1566            none
1567          return :
1568            none
1569          */
1570          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1571          {
1572   1        unsigned char i = 0;
1573   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1574   1        if (menu_id >= g_dq_menu_count)
1575   1          return RET_FAIL;
1576   1        i = g_dq_menu_list_id[menu_id].id;
1577   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1578   1        {
1579   2          sys_menu_tree[i].sys_menu_node_function();
1580   2        }
1581   1        else
1582   1        {
1583   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1584   2      
1585   2      #ifdef __LOCK_AUDIO_SUPPORT__
1586   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1587   2      #endif
1588   2        }
1589   1      
1590   1        return RET_SUCESS;
1591   1      }
1592          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 27  

1593          /************************************************************************************
1594           *                     Own function                     *
1595           ************************************************************************************/
1596          #if 0 //def __LOCK_VIRTUAL_PASSWORD__
              void mmi_dq_sys_show_message_with_id(unsigned char tile_id, unsigned char bmp_id, unsigned char text_id, u
             -int32_t time_msec, BASE_STATUS_MACHINE status)
              {
                unsigned char i = 0;
              #ifdef __LOCK_OLED_SUPPORT__
                mmi_dq_oled_show_input_dialog(tile_id, bmp_id, text_id);
              #endif
              
              #ifdef __NBDQIOT_PROJECT_B06_SUPPORT__
                if (text_id == STR_ID_OPEN_DOOR)
                {
                  //power_off();
                  lock_inside_lock = 0;
                  lock_easy_open_mode = 0;
                  mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN, 0);
                  // mmi_dq_entry_sleep_delay_time();
                  mmi_dq_show_msg_timer_start(10000);
                  timer_ms_status = status;
                  mmi_dq_ms_set_machine_status(BASE_STATUS_M_LOCK_OPEN);
                  mmi_dq_moto_lock_open();
                }
                else
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  for (i = 0; msg_aud_list[i].msg_id < STR_ID_MAX_COUNT; i++)
                  {
                    if (msg_aud_list[i].msg_id == text_id)
                    {
                      break;
                    }
                  }
                  if (msg_aud_list[i].aud_id != 0xFF)
                  {
                    mmi_dq_aud_play_with_id(msg_aud_list[i].aud_id, 0);
                  }
              #endif
                  if (time_msec > 0)
                  {
                    mmi_dq_show_msg_timer_start(time_msec);
                    timer_ms_status = status;
                    mmi_dq_ms_set_machine_status(BASE_STATUS_M_INVALID);
                  }
                  else
                    mmi_dq_ms_set_machine_status(status);
                }
              #else
              
              #ifdef __LOCK_AUDIO_SUPPORT__
                for (i = 0; msg_aud_list[i].msg_id < STR_ID_MAX_COUNT; i++)
                {
                  if (msg_aud_list[i].msg_id == text_id)
                  {
                    break;
                  }
                }
                if (msg_aud_list[i].aud_id != 0xFF)
                {
              //    mmi_dq_aud_play_with_id(msg_aud_list[i].aud_id, 0);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 28  

                }
              #endif
              
              //  if (time_msec > 0)
              //  {
              //    mmi_dq_show_msg_timer_start(time_msec);
              //    timer_ms_status = status;
              //    mmi_dq_ms_set_machine_status(BASE_STATUS_M_INVALID);
              //  }
              //  else
              //    mmi_dq_ms_set_machine_status(status);
              
                if (text_id == STR_ID_OPEN_DOOR)
                {
                  mmi_dq_moto_lock_open();
                }
              #endif
                return;
              }
              #endif
1674          #ifdef __LOCK_VIRTUAL_PASSWORD__
              uint8_t mmi_dq_sys_lock_error(void)
              {
                uint32_t time = mmi_dq_rtc_get_sys_sec_info();
                if (time - g_last_error_time > MMI_ERROR_LOCK_TIME)
                {
                  g_multiple_error_times = 1;
                  g_last_error_time = time;
                }
                else
                {
                  g_last_error_time = time;
                  g_multiple_error_times++;
                  if (g_multiple_error_times >= MMI_MAX_ERROR_TIMES)
                  {
                    //multiple error
              #ifdef __LOCK_APP_COMM_SUPPORT__
                    if (mmi_dq_fs_app_init_sucess() == 1)
                    {
                      dq_otp_add_alarm_log(DQ_ALART_LOG_MULTIPLE_ERROR);
                    }
              #endif
                    return 1;
                  }
                }
                return 0;
              }
              
              void mmi_dq_sys_lock_correct(void)
              {
                g_last_error_time = 0;
                g_multiple_error_times = 0;
              }
              
              void mmi_dq_entry_sleep_delay_time(void)
              {
                //  g_enter_sleep_set_time = MMI_TIMER_ENTER_SLEEP_DELAY_COUNT;
              }
              
              void mmi_dq_show_msg_timer_start(uint32_t time_msec)
              {
                uint32_t time_ms = MMI_TIMER_BASE_TIME;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/27/2021 17:42:18 PAGE 29  

                uint32_t time_ticks;
              
                //  g_show_msg_time_voval_count = time_msec/MMI_TIMER_BASE_TIME;
                //  g_show_msg_time_count = 0;
                //  time_ticks = nrf_drv_timer_ms_to_ticks(&TIMER2_MMI_TIMER, time_ms);
                //  nrf_drv_timer_extended_compare(&TIMER2_MMI_TIMER, NRF_TIMER_CC_CHANNEL1, time_ticks, NRF_TIMER_SHORT_C
             -OMPARE1_CLEAR_MASK, true);
                //  nrf_drv_timer_enable(&TIMER2_MMI_TIMER);
                return;
              }
              
              #endif //__LOCK_VIRTUAL_PASSWORD__
1727          /************************************************************************************
1728           *                     End function                     *
1729           ************************************************************************************/
1730          
1731          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1930    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    170      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
