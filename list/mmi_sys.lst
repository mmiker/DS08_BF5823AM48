C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          static unsigned char g_sys_door_open_flag = 0;
  18          
  19          static unsigned int g_timer2_sleep_count = 0;
  20          static unsigned int g_timer2_count = 0;
  21          static unsigned int g_timer2_set_count = 0;
  22          static unsigned char g_timer2_flag = 0;
  23          
  24          static unsigned char g_wifi_check_flag = 0;
  25          static unsigned char g_wifi_check_count = 0;
  26          static unsigned char g_wifi_check_type = 0;
  27          
  28          /* RFID */
  29          static unsigned char g_rfid_flag = 0;
  30          
  31          #define LOCK_MAX_EEROR_TIMES 5
  32          static unsigned char g_lock_error_flag = 0;
  33          static unsigned int g_lock_error_count = 0;
  34          
  35          timer2_delay_pro g_timer2_delay_pro = 0;
  36          
  37          #define MMI_TIMER_BASE_TIME 100
  38          #define MMI_TIMER_ENTER_SLEEP 10000
  39          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  40          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  41          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  42          #define MMI_TIMER_DOOR_OPEN 6000
  43          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  44          #define MMI_TIMER_MOTOR 300
  45          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  46          #define MMI_TIMER_WIFI_CHECK 1000
  47          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  48          #define MMI_WIFI_SETTING_DELAY 60000
  49          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  50          #define MMI_LOCK_ERROR_DELAY 60000
  51          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  52          /*
  53          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 2   

  54            none
  55          return :
  56            none
  57          */
  58          void mmi_dq_sys_init(void)
  59          {
  60   1        mmi_InitQueue();
  61   1        mmi_ms_pwd_init_var();
  62   1        mmi_dq_fs_init();
  63   1      }
  64          /*
  65          parameter: 
  66            none
  67          return :
  68            none
  69          */
  70          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  71          {
  72   1        unsigned char audio_id = 0;
  73   1      
  74   1        time_msec = 0;
  75   1      
  76   1      #ifdef __LOCK_AUDIO_SUPPORT__
  77   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  78   1      
  79   1        mmi_dq_aud_play_with_id(audio_id);
  80   1      
  81   1      #endif
  82   1        return;
  83   1      }
  84          
  85          /*
  86          parameter: 
  87            none
  88          return :
  89            none
  90          */
  91          void mmi_dq_sys_lock_add_admin_suc(void)
  92          {
  93   1        mmi_dq_fs_set_admin_status(1);
  94   1      
  95   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  96   1      }
  97          
  98          /*
  99          function: system enter sleep
 100          parameter: 
 101            none
 102          return :
 103            none
 104          */
 105          void mmi_dq_sys_enter_sleep(void)
 106          {
 107   1        mmi_dq_bsp_enter_sleep();
 108   1      
 109   1        g_timer2_flag = 0;
 110   1        g_sys_door_open_flag = 0;
 111   1      
 112   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 113   1      }
 114          
 115          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 3   

 116          function: system wake up
 117          parameter: 
 118            none
 119          return :
 120            none
 121          */
 122          void mmi_dq_sys_wake_up(void)
 123          {
 124   1      
 125   1        mmi_dq_bsp_wake_up();
 126   1        if (mmi_dq_sys_check_vbat() == 0)
 127   1        {
 128   2          mmi_dq_wifi_wakeup();
 129   2      #ifdef __LOCK_FP_SUPPORT__
 130   2          mmi_dq_fp_init(); //握手、点灯
 131   2      #endif
 132   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 133   2        }
 134   1      }
 135          
 136          /*
 137          function: 
 138          parameter: 
 139            none
 140          return :
 141            none
 142          */
 143          void mmi_dq_sys_door_open_cb(void)
 144          {
 145   1      #ifdef __LOCK_MOTOR_SUPPORT__
 146   1        mmi_dq_motor_stop();
 147   1      #endif
 148   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 149   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 150   1      }
 151          
 152          /*
 153          function: 
 154          parameter: 
 155            none
 156          return :
 157            none
 158          */
 159          void mmi_dq_sys_door_open(sys_open_type type)
 160          {
 161   1      #ifdef __LOCK_BUS_SUPPORT__
 162   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 163   1        {
 164   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 165   2      #ifdef __LOCK_WIFI_SUPPORT__
 166   2          switch (type)
 167   2          {
 168   3          case SYS_OPEN_BY_PASSWORD:
 169   3            mmi_dq_wifi_pw_alarm();
 170   3            break;
 171   3          case SYS_OPEN_BY_FP:
 172   3            mmi_dq_wifi_fp_alarm();
 173   3            break;
 174   3          case SYS_OPEN_BY_RFID:
 175   3            mmi_dq_wifi_rfid_alarm();
 176   3            break;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 4   

 177   3          }
 178   2      #endif
 179   2          return;
 180   2        }
 181   1      #endif
 182   1        g_lock_error_flag = 0;
 183   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 184   1        {
 185   2          if ((g_sys_door_open_flag & (~type)) != 0)
 186   2          {
 187   3            g_sys_door_open_flag = 0;
 188   3          }
 189   2          else
 190   2          {
 191   3            g_sys_door_open_flag |= type;
 192   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 193   3            return;
 194   3          }
 195   2        }
 196   1      
 197   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 198   1      
 199   1        mmi_dq_motor_turn_right();
 200   1        //mmi_dq_wifi_open_door();
 201   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 202   1      
 203   1      #ifdef __LOCK_WIFI_SUPPORT__
 204   1        switch (type)
 205   1        {
 206   2      #ifdef __LOCK_110_SUPPORT__
 207   2        case SYS_OPEN_BY_110_PASSWORD:
 208   2          mmi_dq_wifi_send_pwd_110();
 209   2          break;
 210   2        case SYS_OPEN_BY_110_FP:
 211   2          mmi_dq_wifi_send_fp_110();
 212   2          break;
 213   2      #endif
 214   2        case SYS_OPEN_BY_PASSWORD:
 215   2          mmi_dq_wifi_open_by_password();
 216   2          break;
 217   2      #ifdef __LOCK_FP_SUPPORT__
 218   2        case SYS_OPEN_BY_FP:
 219   2          mmi_dq_wifi_open_by_fp();
 220   2          break;
 221   2      #endif
 222   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 223   2        case SYS_OPEN_BY_RFID:
 224   2          mmi_dq_wifi_open_by_rfid();
 225   2          break;
 226   2      #endif
 227   2        case SYS_OPEN_BY_WIFI:
 228   2          mmi_dq_wifi_open_by_wifi();
 229   2          break;
 230   2        }
 231   1      
 232   1      #endif
 233   1      }
 234          
 235          /*
 236          function: 
 237          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 5   

 238            none
 239          return :
 240            none
 241          */
 242          void mmi_dq_sys_door_open_fail(sys_open_type type)
 243          {
 244   1        g_lock_error_count = 0;
 245   1        g_lock_error_flag++;
 246   1        switch (type)
 247   1        {
 248   2        case SYS_OPEN_BY_PASSWORD:
 249   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 250   2      #ifdef __LOCK_WIFI_SUPPORT__
 251   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 252   2            mmi_dq_wifi_pw_alarm();
 253   2      #endif
 254   2          break;
 255   2      #ifdef __LOCK_FP_SUPPORT__
 256   2        case SYS_OPEN_BY_FP:
 257   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 258   2      #ifdef __LOCK_WIFI_SUPPORT__
 259   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 260   2            mmi_dq_wifi_fp_alarm();
 261   2      #endif
 262   2          break;
 263   2      #endif
 264   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 265   2        case SYS_OPEN_BY_RFID:
 266   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 267   2      #ifdef __LOCK_WIFI_SUPPORT__
 268   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 269   2            mmi_dq_wifi_rfid_alarm();
 270   2      #endif
 271   2          break;
 272   2      #endif
 273   2        }
 274   1      }
 275          
 276          /*
 277          function: 
 278          parameter: 
 279            none
 280          return :
 281            none
 282          */
 283          unsigned char mmi_dq_sys_door_state_check(void)
 284          {
 285   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 286   1          return 1;
 287   1        return 0;
 288   1      }
 289          
 290          /*
 291          function: 
 292          parameter: 
 293            none
 294          return :
 295            none
 296          */
 297          void mmi_dq_sys_door_close_cb(void)
 298          {
 299   1      #ifdef __LOCK_MOTOR_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 6   

 300   1        mmi_dq_motor_stop();
 301   1      #endif
 302   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 303   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 304   1      }
 305          
 306          /*
 307          function: 
 308          parameter: 
 309            none
 310          return :
 311            none
 312          */
 313          void mmi_dq_sys_door_close(void)
 314          {
 315   1        mmi_dq_motor_turn_back();
 316   1        //mmi_dq_wifi_close_door();
 317   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 318   1      }
 319          
 320          /*
 321          function: 
 322          parameter: 
 323            none
 324          return :
 325            none
 326          */
 327          void mmi_dq_sys_aud_end(void)
 328          {
 329   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 330   1      }
 331          
 332          /*
 333          function: 
 334          parameter: 
 335            none
 336          return :
 337            none
 338          */
 339          void mmi_dq_sys_time_out_handle(void)
 340          {
 341   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 342   1      
 343   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 344   1        {
 345   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 346   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 347   2        }
 348   1      #ifdef __LOCK_FP_SUPPORT__
 349   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 350   1        {
 351   2          if (mmi_dq_fs_get_admin_status() == 0)
 352   2            g_timer2_sleep_count = 0;
 353   2          else
 354   2          {
 355   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 356   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 357   3          }
 358   2        }
 359   1      #endif
 360   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 7   

 361   1        {
 362   2          g_timer2_sleep_count = 0;
 363   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 364   2        }
 365   1        else
 366   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 367   1      }
 368          
 369          /*
 370          function: 
 371          parameter: 
 372            none
 373          return :
 374            none
 375          */
 376          void System_timer_event_handler(void)
 377          {
 378   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 379   1      
 380   1        g_rfid_flag = 1; /* RFID */
 381   1      
 382   1        if (g_timer2_flag == 1)
 383   1        {
 384   2          g_timer2_count++;
 385   2          if (g_timer2_count >= g_timer2_set_count)
 386   2          {
 387   3            g_timer2_flag = 2;
 388   3            g_timer2_count = 0;
 389   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 390   3          }
 391   2        }
 392   1      
 393   1        if (g_wifi_check_flag == 1)
 394   1        {
 395   2          g_wifi_check_count++;
 396   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 397   2          {
 398   3            g_wifi_check_flag = 2;
 399   3            g_wifi_check_count = 0;
 400   3          }
 401   2        }
 402   1      
 403   1        if (g_lock_error_flag > 0)
 404   1        {
 405   2          g_lock_error_count++;
 406   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 407   2            g_lock_error_flag = 0;
 408   2        }
 409   1      
 410   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0) && (mmi_dq_wifi_get_running_flag() == 0))
 411   1        {
 412   2          unsigned char flag = 0;
 413   2          g_timer2_sleep_count++;
 414   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 415   2      #ifdef __LOCK_FP_SUPPORT__
 416   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 417   2      #endif
 418   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 419   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 420   2      #endif
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 8   

 421   2          )
 422   2          {
 423   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 424   3            {
 425   4              flag = 1;
 426   4            }
 427   3          }
 428   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 429   2          {
 430   3            flag = 1;
 431   3          }
 432   2      
 433   2          if (flag)
 434   2          {
 435   3            mmi_dq_sys_time_out_handle();
 436   3          }
 437   2        }
 438   1        else
 439   1          g_timer2_sleep_count = 0;
 440   1      }
 441          
 442          /*
 443          function: 
 444          parameter: 
 445            none
 446          return :
 447            none
 448          */
 449          unsigned char mmi_dq_sys_get_rfid_flag(void)
 450          {
 451   1        if (g_rfid_flag == 1)
 452   1        {
 453   2          g_rfid_flag = 0;
 454   2          return 1;
 455   2        }
 456   1        return 0;
 457   1      }
 458          
 459          /*
 460          function: 
 461          parameter: 
 462            none
 463          return :
 464            none
 465          */
 466          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 467          {
 468   1        if (g_wifi_check_flag == 2)
 469   1        {
 470   2          g_wifi_check_flag = 0;
 471   2          return 1;
 472   2        }
 473   1        return 0;
 474   1      }
 475          
 476          /*
 477          function: 
 478          parameter: 
 479            none
 480          return :
 481            none
 482          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 9   

 483          void mmi_dq_sys_set_wifi_check(unsigned char type)
 484          {
 485   1        g_wifi_check_count = 0;
 486   1        g_wifi_check_flag = 1;
 487   1        g_wifi_check_type = type;
 488   1      }
 489          
 490          /*
 491          function: 
 492          parameter: 
 493            none
 494          return :
 495            none
 496          */
 497          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 498          {
 499   1        return g_wifi_check_type;
 500   1      }
 501          
 502          /*
 503          function: 
 504          parameter: 
 505            none
 506          return :
 507            none
 508          */
 509          void mmi_dq_sys_sleep_timer_reset(void)
 510          {
 511   1        g_timer2_sleep_count = 0;
 512   1        return;
 513   1      }
 514          
 515          /*
 516          function: 
 517          parameter: 
 518            none
 519          return :
 520            none
 521          */
 522          unsigned char mmi_dq_sys_get_timer2_flag(void)
 523          {
 524   1        if (g_timer2_flag == 2)
 525   1        {
 526   2          g_timer2_flag = 0;
 527   2          return 1;
 528   2        }
 529   1        return 0;
 530   1      }
 531          
 532          /*
 533          function: 
 534          parameter: 
 535            none
 536          return :
 537            none
 538          */
 539          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 540          {
 541   1        if (count != 0)
 542   1        {
 543   2          g_timer2_count = 0;
 544   2          g_timer2_set_count = count;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 10  

 545   2          g_timer2_delay_pro = pro;
 546   2          g_timer2_flag = 1;
 547   2        }
 548   1        else
 549   1          pro();
 550   1      }
 551          
 552          /*
 553          function: 
 554          parameter: 
 555            none
 556          return :
 557            none
 558          */
 559          void mmi_dq_sys_delay_event_pro(void)
 560          {
 561   1        if (g_timer2_delay_pro != 0)
 562   1          g_timer2_delay_pro();
 563   1      }
 564          
 565          /*
 566          function: 
 567          parameter: 
 568            none
 569          return :
 570            none
 571          */
 572          unsigned char mmi_dq_sys_check_vbat(void)
 573          {
 574   1        unsigned char state = adc_VolT();
 575   1        if (state > 0)
 576   1        {
 577   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 578   2          mmi_dq_wifi_lowpower_alarm();
 579   2          if (state == 2)
 580   2          {
 581   3            // mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 582   3            // return 1;
 583   3          }
 584   2        }
 585   1      
 586   1        return 0;
 587   1      }
 588          
 589          /*
 590          function: 
 591          parameter: 
 592            none
 593          return :
 594            none
 595          */
 596          void mmi_dq_sys_wifi_open(void)
 597          {
 598   1        if (mmi_dq_wifi_open_ask() == 0)
 599   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 600   1      }
 601          
 602          /*
 603          parameter: 
 604            none
 605          return :
 606            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 11  

 607          */
 608          void mmi_dq_sys_add_admin_pwd(void)
 609          {
 610   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 611   1        mmi_ms_pwd_init_var();
 612   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 613   1        return;
 614   1      }
 615          
 616          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 617          //********************************************************************************************************
             -***********************************************************************************
 618          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 619          //
 620          //        menu part
 621          //
 622          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 623          //********************************************************************************************************
             -***********************************************************************************
 624          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 625          
 626          /*
 627          parameter: 
 628            none
 629          return :
 630            none
 631          */
 632          void mmi_dq_sys_add_pwd(void)
 633          {
 634   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 635   1        {
 636   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 637   2          mmi_dq_sys_show_cur_menu_list();
 638   2        }
 639   1        else
 640   1        {
 641   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 642   2          mmi_ms_pwd_init_var();
 643   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 644   2        }
 645   1        return;
 646   1      }
 647          
 648          void mmi_dq_sys_add_pwd_con(void)
 649          {
 650   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 651   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 652   1        return;
 653   1      }
 654          
 655          #ifdef __LOCK_110_SUPPORT__
 656          /*
 657          parameter: 
 658            none
 659          return :
 660            none
 661          */
 662          void mmi_dq_sys_add_110_pwd(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 12  

 663          {
 664   1        mmi_dq_wifi_wakeup();
 665   1        if (mmi_dq_wifi_check() == 1)
 666   1        {
 667   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 668   2          mmi_dq_sys_show_cur_menu_list();
 669   2          return;
 670   2        }
 671   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 672   1        mmi_ms_pwd_init_var();
 673   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 674   1        return;
 675   1      }
 676          #endif
 677          /*
 678          parameter: 
 679            none
 680          return :
 681            none
 682          */
 683          static void mmi_dq_sys_chg_pwd(void)
 684          {
 685   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 686   1        return;
 687   1      }
 688          
 689          /*
 690          parameter: 
 691            none
 692          return :
 693            none
 694          */
 695          void mmi_dq_sys_del_pwd(void)
 696          {
 697   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 698   1        mmi_ms_pwd_init_var();
 699   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 700   1        return;
 701   1      }
 702          
 703          void mmi_dq_sys_del_pwd_con(void)
 704          {
 705   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 706   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 707   1        return;
 708   1      }
 709          
 710          /*
 711          parameter: 
 712            none
 713          return :
 714            none
 715          */
 716          static void mmi_dq_sys_clear_pwd(void)
 717          {
 718   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 719   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 720   1        return;
 721   1      }
 722          
 723          #if defined(__LOCK_FP_SUPPORT__)
 724          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 13  

 725          parameter: 
 726            none
 727          return :
 728            none
 729          */
 730          void mmi_dq_sys_add_fp(void)
 731          {
 732   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 733   1        {
 734   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 735   2          mmi_dq_sys_show_cur_menu_list();
 736   2        }
 737   1        else
 738   1        {
 739   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 740   2          mmi_dq_fp_light(FP_BLUE);
 741   2          mmi_ms_opt_time_init();
 742   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 743   2        }
 744   1        return;
 745   1      }
 746          
 747          void mmi_dq_sys_add_fp_con(void)
 748          {
 749   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 750   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 751   1        return;
 752   1      }
 753          
 754          #ifdef __LOCK_110_SUPPORT__
 755          /*
 756          parameter: 
 757            none
 758          return :
 759            none
 760          */
 761          void mmi_dq_sys_add_110_fp(void)
 762          {
 763   1        mmi_dq_wifi_wakeup();
 764   1        if (mmi_dq_wifi_check() == 1)
 765   1        {
 766   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 767   2          mmi_dq_sys_show_cur_menu_list();
 768   2          return;
 769   2        }
 770   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 771   1        mmi_dq_fp_light(FP_BLUE);
 772   1        mmi_ms_opt_time_init();
 773   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
 774   1        return;
 775   1      }
 776          
 777          /*
 778          parameter: 
 779            none
 780          return :
 781            none
 782          */
 783          void mmi_dq_sys_del_110_fp(void)
 784          {
 785   1        mmi_dq_wifi_wakeup();
 786   1        if (mmi_dq_wifi_check() == 1)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 14  

 787   1        {
 788   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 789   2          mmi_dq_sys_show_cur_menu_list();
 790   2          return;
 791   2        }
 792   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 793   1        mmi_dq_fp_light(FP_BLUE);
 794   1        mmi_ms_opt_time_init();
 795   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 796   1        return;
 797   1      }
 798          
 799          #endif
 800          
 801          /*
 802          parameter: 
 803            none
 804          return :
 805            none
 806          */
 807          static void mmi_dq_sys_chg_fp(void)
 808          {
 809   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 810   1        return;
 811   1      }
 812          
 813          /*
 814          parameter: 
 815            none
 816          return :
 817            none
 818          */
 819          void mmi_dq_sys_del_fp(void)
 820          {
 821   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 822   1        mmi_dq_fp_light(FP_BLUE);
 823   1        mmi_ms_opt_time_init();
 824   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 825   1        return;
 826   1      }
 827          
 828          void mmi_dq_sys_del_fp_con(void)
 829          {
 830   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 831   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 832   1        return;
 833   1      }
 834          
 835          /*
 836          parameter: 
 837            none
 838          return :
 839            none
 840          */
 841          static void mmi_dq_sys_clear_fp(void)
 842          {
 843   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 844   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 845   1        return;
 846   1      }
 847          #endif
 848          #ifdef __LOCK_RFID_CARD_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 15  

 849          /*
 850          parameter: 
 851            none
 852          return :
 853            none
 854          */
 855          void mmi_dq_sys_add_rf(void)
 856          {
 857   1      
 858   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 859   1        {
 860   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 861   2          mmi_dq_sys_show_cur_menu_list();
 862   2        }
 863   1        else
 864   1        {
 865   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 866   2          mmi_ms_opt_time_init();
 867   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 868   2        }
 869   1        return;
 870   1      }
 871          
 872          void mmi_dq_sys_add_rf_con(void)
 873          {
 874   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 875   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 876   1        return;
 877   1      }
 878          
 879          /*
 880          parameter: 
 881            none
 882          return :
 883            none
 884          */
 885          static void mmi_dq_sys_chg_rf(void)
 886          {
 887   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 888   1        return;
 889   1      }
 890          
 891          /*
 892          parameter: 
 893            none
 894          return :
 895            none
 896          */
 897          void mmi_dq_sys_del_rf(void)
 898          {
 899   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 900   1        mmi_ms_opt_time_init();
 901   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 902   1        return;
 903   1      }
 904          
 905          void mmi_dq_sys_del_rf_con(void)
 906          {
 907   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 908   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 909   1        return;
 910   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 16  

 911          
 912          /*
 913          parameter: 
 914            none
 915          return :
 916            none
 917          */
 918          static void mmi_dq_sys_clear_rf(void)
 919          {
 920   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 921   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 922   1        return;
 923   1      }
 924          #endif
 925          
 926          /*
 927          parameter: 
 928            none
 929          return :
 930            none
 931          */
 932          static void mmi_dq_sys_open_pro_sound(void)
 933          {
 934   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 935   1      
 936   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 937   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 938   1        else
 939   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 940   1      
 941   1        mmi_dq_sys_show_cur_menu_list();
 942   1        return;
 943   1      }
 944          
 945          /*
 946          parameter: 
 947            none
 948          return :
 949            none
 950          */
 951          static void mmi_dq_sys_close_pro_sound(void)
 952          {
 953   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 954   1      
 955   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 956   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 957   1        else
 958   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 959   1      
 960   1        mmi_dq_sys_show_cur_menu_list();
 961   1        return;
 962   1      }
 963          
 964          /*
 965          parameter: 
 966            none
 967          return :
 968            none
 969          */
 970          static void mmi_dq_sys_sin_open_mode(void)
 971          {
 972   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 17  

 973   1      
 974   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 975   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 976   1        else
 977   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 978   1      
 979   1        mmi_dq_sys_show_cur_menu_list();
 980   1        return;
 981   1      }
 982          
 983          /*
 984          parameter: 
 985            none
 986          return :
 987            none
 988          */
 989          static void mmi_dq_sys_dbl_open_mode(void)
 990          {
 991   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 992   1      
 993   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
 994   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
 995   1        else
 996   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
 997   1      
 998   1        mmi_dq_sys_show_cur_menu_list();
 999   1        return;
1000   1      }
1001          
1002          #if defined(__LOCK_FP_SUPPORT__)
1003          /*
1004          parameter: 
1005            none
1006          return :
1007            none
1008          */
1009          void mmi_dq_sys_chg_admin_fp_No1(void)
1010          {
1011   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1012   1        mmi_dq_fp_light(FP_BLUE);
1013   1        mmi_ms_opt_time_init();
1014   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1015   1        return;
1016   1      }
1017          
1018          /*
1019          parameter: 
1020            none
1021          return :
1022            none
1023          */
1024          void mmi_dq_sys_chg_admin_fp_No2(void)
1025          {
1026   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1027   1        mmi_dq_fp_light(FP_BLUE);
1028   1        mmi_ms_opt_time_init();
1029   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1030   1        return;
1031   1      }
1032          #endif
1033          
1034          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 18  

1035          parameter: 
1036            none
1037          return :
1038            none
1039          */
1040          void mmi_dq_sys_chg_admin_pwd(void)
1041          {
1042   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1043   1        mmi_ms_pwd_init_var();
1044   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1045   1        return;
1046   1      }
1047          
1048          /*
1049          parameter: 
1050            none
1051          return :
1052            none
1053          */
1054          void mmi_dq_sys_restore_lock(void)
1055          {
1056   1        unsigned char retval = 0;
1057   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1058   1      
1059   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1060   1          retval = 1;
1061   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1062   1          retval = 1;
1063   1      #ifdef __LOCK_FP_SUPPORT__
1064   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1065   1          retval = 1;
1066   1      #endif
1067   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1068   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1069   1          retval = 1;
1070   1      #endif
1071   1      
1072   1        if (retval == 0)
1073   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1074   1        else
1075   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
1076   1      
1077   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1078   1        return;
1079   1      }
1080          
1081          /*
1082          parameter: 
1083            none
1084          return :
1085            none
1086          */
1087          static void mmi_dq_sys_restore_lock_con(void)
1088          {
1089   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1090   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1091   1      }
1092          
1093          /*
1094          parameter: 
1095            none
1096          return :
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 19  

1097            none
1098          */
1099          static void mmi_dq_sys_wifi_setting(void)
1100          {
1101   1        if (0 == mmi_dq_wifi_setting())
1102   1        {
1103   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1104   2          mmi_dq_sys_show_cur_menu_list();
1105   2        }
1106   1        else
1107   1        {
1108   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1109   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1110   2        }
1111   1      }
1112          
1113          typedef struct sys_menu_t
1114          {
1115            unsigned char menu_father_id;
1116            unsigned char menu_sub_id;
1117            void (*sys_menu_node_function)(void);
1118          } sys_menu_t;
1119          
1120          typedef struct sys_menu_list
1121          {
1122            unsigned char id;
1123            unsigned char menu_id;
1124          } sys_menu_list;
1125          
1126          const sys_menu_t sys_menu_tree[] =
1127            {
1128              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1129          #if defined(__LOCK_FP_SUPPORT__)
1130              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1131          #endif
1132          #ifdef __LOCK_RFID_CARD_SUPPORT__
1133              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1134          #endif
1135              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1136              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1137              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1138              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1139          #ifdef __LOCK_110_SUPPORT__
1140              {STR_ID_SYSTEM, STR_ID_110, 0},
1141          
1142              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1143          #if defined(__LOCK_FP_SUPPORT__)
1144              {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
1145          #endif
1146          #endif
1147          
1148              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1149              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1150              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1151          
1152              //PWD
1153              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1154              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1155              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1156              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1157          //FP
1158          #if defined(__LOCK_FP_SUPPORT__)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 20  

1159              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1160              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1161              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1162              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1163          #ifdef __LOCK_110_SUPPORT__
1164              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1165              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1166          #endif
1167          #endif
1168          #ifdef __LOCK_RFID_CARD_SUPPORT__
1169              //RF
1170              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1171              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1172              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1173              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1174          #endif
1175              //admin
1176              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1177          #if defined(__LOCK_FP_SUPPORT__)
1178              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1179              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1180              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1181          #endif
1182              //setting
1183              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1184              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1185          
1186              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1187              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1188              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1189              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1190          };
1191          
1192          static unsigned char g_dq_menu_father_id;
1193          static sys_menu_list g_dq_menu_list_id[10];
1194          static unsigned char g_dq_menu_count;
1195          
1196          /*
1197          parameter: 
1198            none
1199          return :
1200            none
1201          */
1202          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1203          {
1204   1        g_dq_menu_father_id = father_id;
1205   1        return;
1206   1      }
1207          
1208          /*
1209          parameter: 
1210            none
1211          return :
1212            none
1213          */
1214          unsigned char mmi_dq_sys_get_menu_count(void)
1215          {
1216   1        return g_dq_menu_count;
1217   1      }
1218          
1219          /*
1220          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 21  

1221            none
1222          return :
1223            none
1224          */
1225          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1226          {
1227   1        unsigned char i = 0, j = 0;
1228   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1229   1      
1230   1        g_dq_menu_father_id = father_id;
1231   1      
1232   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1233   1        g_dq_menu_count = 0;
1234   1      
1235   1        for (i = 0; i < menu_tree_size; i++)
1236   1        {
1237   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1238   2          {
1239   3            g_dq_menu_list_id[j].id = i;
1240   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1241   3            j++;
1242   3            g_dq_menu_count++;
1243   3          }
1244   2        }
1245   1        return;
1246   1      }
1247          
1248          /*
1249          parameter: 
1250            none
1251          return :
1252            none
1253          */
1254          void mmi_dq_sys_show_cur_menu_list(void)
1255          {
1256   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1257   1      
1258   1      #ifdef __LOCK_AUDIO_SUPPORT__
1259   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1260   1      #endif
1261   1      #ifdef __LOCK_FP_SUPPORT__
1262   1        mmi_dq_fp_light(FP_NONE_COLOR);
1263   1      #endif
1264   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1265   1        return;
1266   1      }
1267          
1268          /*
1269          parameter: 
1270            none
1271          return :
1272            current machine status
1273          */
1274          void mmi_dq_sys_get_pre_menu_list(void)
1275          {
1276   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1277   1        {
1278   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1279   2        }
1280   1        else
1281   1        {
1282   2          unsigned char i = 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 22  

1283   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1284   2      
1285   2          for (i = 0; i < menu_tree_size; i++)
1286   2          {
1287   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1288   3            {
1289   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1290   4              break;
1291   4            }
1292   3          }
1293   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1294   2      #ifdef __LOCK_AUDIO_SUPPORT__
1295   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1296   2      #endif
1297   2        }
1298   1        return;
1299   1      }
1300          
1301          /*
1302          parameter: 
1303            none
1304          return :
1305            none
1306          */
1307          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1308          {
1309   1        unsigned char i = 0;
1310   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1311   1        if (menu_id >= g_dq_menu_count)
1312   1          return RET_FAIL;
1313   1        i = g_dq_menu_list_id[menu_id].id;
1314   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1315   1        {
1316   2          sys_menu_tree[i].sys_menu_node_function();
1317   2        }
1318   1        else
1319   1        {
1320   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1321   2      
1322   2      #ifdef __LOCK_AUDIO_SUPPORT__
1323   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1324   2      #endif
1325   2        }
1326   1      
1327   1        return RET_SUCESS;
1328   1      }
1329          
1330          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2069    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    214      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/20/2021 15:44:11 PAGE 23  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
