C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          #include "delay.h"
  16          #include "dqiot_fp_sy.h"
  17          
  18          static unsigned char g_sys_door_open_flag = 0;
  19          
  20          static unsigned int g_timer2_sleep_count = 0;
  21          static unsigned int g_timer2_count = 0;
  22          static unsigned int g_timer2_set_count = 0;
  23          static unsigned char g_timer2_flag = 0;
  24          
  25          static unsigned char g_wifi_check_flag = 0;
  26          static unsigned char g_wifi_check_count = 0;
  27          static unsigned char g_wifi_check_type = 0;
  28          
  29          /* RFID */
  30          unsigned char g_rfid_flag = 0;
  31          
  32          #define LOCK_MAX_EEROR_TIMES 5
  33          static unsigned char g_lock_error_flag = 0;
  34          static unsigned int g_lock_error_count = 0;
  35          
  36          timer2_delay_pro g_timer2_delay_pro = 0;
  37          
  38          #define MMI_TIMER_BASE_TIME 100
  39          #define MMI_TIMER_ENTER_SLEEP 10000
  40          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  41          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  42          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_DOOR_OPEN 6000
  44          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_MOTOR 300
  46          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  47          #define MMI_WIFI_SETTING_DELAY 60000
  48          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  49          #define MMI_LOCK_ERROR_DELAY 60000
  50          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  51          /*
  52          parameter: 
  53            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 2   

  54          return :
  55            none
  56          */
  57          void mmi_dq_sys_init(void)
  58          {
  59   1        mmi_InitQueue();
  60   1        mmi_ms_pwd_init_var();
  61   1        mmi_dq_fs_init();
  62   1      }
  63          /*
  64          parameter: 
  65            none
  66          return :
  67            none
  68          */
  69          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  70          {
  71   1        unsigned char audio_id = 0;
  72   1      
  73   1        time_msec = 0;
  74   1      
  75   1      #ifdef __LOCK_AUDIO_SUPPORT__
  76   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  77   1      
  78   1        mmi_dq_aud_play_with_id(audio_id);
  79   1      
  80   1      #endif
  81   1        return;
  82   1      }
  83          
  84          /*
  85          parameter: 
  86            none
  87          return :
  88            none
  89          */
  90          void mmi_dq_sys_lock_add_admin_suc(void)
  91          {
  92   1        mmi_dq_fs_set_admin_status(1);
  93   1      
  94   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  95   1      }
  96          
  97          /*
  98          function: system enter sleep
  99          parameter: 
 100            none
 101          return :
 102            none
 103          */
 104          void mmi_dq_sys_enter_sleep(void)
 105          {
 106   1        mmi_dq_bsp_enter_sleep();
 107   1      
 108   1        g_timer2_flag = 0;
 109   1        g_sys_door_open_flag = 0;
 110   1        FP_Set_Light(FP_NONE_COLOR);
 111   1      
 112   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
 113   1      }
 114          
 115          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 3   

 116          function: system wake up
 117          parameter: 
 118            none
 119          return :
 120            none
 121          */
 122          void mmi_dq_sys_wake_up(void)
 123          {
 124   1      
 125   1        mmi_dq_bsp_wake_up();
 126   1        if (mmi_dq_sys_check_vbat() == 0)
 127   1        {
 128   2          mmi_dq_wifi_wakeup();
*** WARNING C206 IN LINE 128 OF mmi_src\mmi_sys.c: 'mmi_dq_wifi_wakeup': missing function-prototype
 129   2      #ifdef __LOCK_FP_SUPPORT__
 130   2          mmi_dq_fp_init(); //���֡����
 131   2      #endif
 132   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 133   2        }
 134   1      }
 135          
 136          /*
 137          function: 
 138          parameter: 
 139            none
 140          return :
 141            none
 142          */
 143          void mmi_dq_sys_door_open_cb(void)
 144          {
 145   1        mmi_dq_motor_stop();
 146   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 147   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 148   1      }
 149          
 150          /*
 151          function: 
 152          parameter: 
 153            none
 154          return :
 155            none
 156          */
 157          void mmi_dq_sys_door_open(sys_open_type type)
 158          {
 159   1        g_lock_error_flag = 0;
 160   1        if (mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL && SYS_OPEN_BY_WIFI != type)
 161   1        {
 162   2          if (g_sys_door_open_flag & (~type) != 0)
 163   2          {
 164   3            g_sys_door_open_flag = 0;
 165   3          }
 166   2          else
 167   2          {
 168   3            g_sys_door_open_flag &= type;
 169   3            return;
 170   3          }
 171   2        }
 172   1      
 173   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 174   1      
 175   1        mmi_dq_motor_turn_right();
 176   1        //mmi_dq_wifi_open_door();
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 4   

 177   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 178   1      
 179   1        switch (type)
 180   1        {
 181   2        case SYS_OPEN_BY_PASSWORD:
 182   2          mmi_dq_wifi_open_by_password();
 183   2          break;
 184   2        case SYS_OPEN_BY_FP:
 185   2          mmi_dq_wifi_open_by_fp();
 186   2          break;
 187   2        case SYS_OPEN_BY_RFID:
 188   2          mmi_dq_wifi_open_by_rfid();
 189   2          break;
 190   2        case SYS_OPEN_BY_WIFI:
 191   2          mmi_dq_wifi_open_by_wifi();
 192   2          break;
 193   2        }
 194   1      }
 195          
 196          /*
 197          function: 
 198          parameter: 
 199            none
 200          return :
 201            none
 202          */
 203          void mmi_dq_sys_door_open_fail(sys_open_type type)
 204          {
 205   1        g_lock_error_count = 0;
 206   1        g_lock_error_flag++;
 207   1        switch (type)
 208   1        {
 209   2        case SYS_OPEN_BY_PASSWORD:
 210   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 211   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 212   2            mmi_dq_wifi_pw_alarm();
 213   2          break;
 214   2        case SYS_OPEN_BY_FP:
 215   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 216   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 217   2            mmi_dq_wifi_fp_alarm();
 218   2          break;
 219   2        case SYS_OPEN_BY_RFID:
 220   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 221   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 222   2            mmi_dq_wifi_rfid_alarm();
 223   2          break;
 224   2        }
 225   1      }
 226          
 227          /*
 228          function: 
 229          parameter: 
 230            none
 231          return :
 232            none
 233          */
 234          unsigned char mmi_dq_sys_door_state_check(void)
 235          {
 236   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 237   1          return 1;
 238   1        return 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 5   

 239   1      }
 240          
 241          /*
 242          function: 
 243          parameter: 
 244            none
 245          return :
 246            none
 247          */
 248          void mmi_dq_sys_door_close_cb(void)
 249          {
 250   1        mmi_dq_motor_stop();
 251   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 252   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 253   1      }
 254          
 255          /*
 256          function: 
 257          parameter: 
 258            none
 259          return :
 260            none
 261          */
 262          void mmi_dq_sys_door_close(void)
 263          {
 264   1        mmi_dq_motor_turn_back();
 265   1        //mmi_dq_wifi_close_door();
 266   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 267   1      }
 268          
 269          /*
 270          function: 
 271          parameter: 
 272            none
 273          return :
 274            none
 275          */
 276          void mmi_dq_sys_aud_end(void)
 277          {
 278   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 279   1      }
 280          
 281          /*
 282          function: 
 283          parameter: 
 284            none
 285          return :
 286            none
 287          */
 288          void mmi_dq_sys_time_out_handle(void)
 289          {
 290   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 291   1      
 292   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 293   1        {
 294   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 295   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 296   2        }
 297   1      #ifdef __LOCK_FP_SUPPORT__
 298   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 299   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 6   

 300   2          if (mmi_dq_fs_get_admin_status() == 0)
 301   2            g_timer2_sleep_count = 0;
 302   2          else
 303   2          {
 304   3            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 305   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 306   3          }
 307   2        }
 308   1      #endif
 309   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 310   1        {
 311   2          g_timer2_sleep_count = 0;
 312   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 313   2        }
 314   1        else
 315   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 316   1      }
 317          
 318          /*
 319          function: 
 320          parameter: 
 321            none
 322          return :
 323            none
 324          */
 325          void System_timer_event_handler(void)
 326          {
 327   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 328   1      
 329   1        g_rfid_flag = 1; /* RFID */
 330   1      
 331   1        if (g_timer2_flag == 1)
 332   1        {
 333   2          g_timer2_count++;
 334   2          if (g_timer2_count >= g_timer2_set_count)
 335   2          {
 336   3            g_timer2_flag = 2;
 337   3            g_timer2_count = 0;
 338   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 339   3          }
 340   2        }
 341   1      
 342   1        if (g_wifi_check_flag == 1)
 343   1        {
 344   2          g_wifi_check_count++;
 345   2          if (g_wifi_check_count >= 4)
 346   2          {
 347   3            g_wifi_check_flag = 2;
 348   3            g_wifi_check_count = 0;
 349   3          }
 350   2        }
 351   1      
 352   1        if (g_lock_error_flag > 0)
 353   1        {
 354   2          g_lock_error_count++;
 355   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 356   2            g_lock_error_flag = 0;
 357   2        }
 358   1      
 359   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 1) && (mmi_dq_wifi_get_running_flag() == 0))
 360   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 7   

 361   2          unsigned char flag = 0;
 362   2          g_timer2_sleep_count++;
 363   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 364   2      #ifdef __LOCK_FP_SUPPORT__
 365   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 366   2      #endif
 367   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 368   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 369   2      #endif
 370   2          )
 371   2          {
 372   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 373   3            {
 374   4              flag = 1;
 375   4            }
 376   3          }
 377   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP)
 378   2          {
 379   3            flag = 1;
 380   3          }
 381   2      
 382   2          if (flag)
 383   2          {
 384   3            mmi_dq_sys_time_out_handle();
 385   3          }
 386   2        }
 387   1        else
 388   1          g_timer2_sleep_count = 0;
 389   1      }
 390          
 391          /*
 392          function: 
 393          parameter: 
 394            none
 395          return :
 396            none
 397          */
 398          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 399          {
 400   1        if (g_wifi_check_flag == 2)
 401   1        {
 402   2          g_wifi_check_flag = 0;
 403   2          return 1;
 404   2        }
 405   1        return 0;
 406   1      }
 407          
 408          /*
 409          function: 
 410          parameter: 
 411            none
 412          return :
 413            none
 414          */
 415          void mmi_dq_sys_set_wifi_check(unsigned char type)
 416          {
 417   1        g_wifi_check_count = 0;
 418   1        g_wifi_check_flag = 1;
 419   1        g_wifi_check_type = type;
 420   1      }
 421          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 8   

 422          /*
 423          function: 
 424          parameter: 
 425            none
 426          return :
 427            none
 428          */
 429          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 430          {
 431   1        return g_wifi_check_type;
 432   1      }
 433          
 434          /*
 435          function: 
 436          parameter: 
 437            none
 438          return :
 439            none
 440          */
 441          void mmi_dq_sys_sleep_timer_reset(void)
 442          {
 443   1        g_timer2_sleep_count = 0;
 444   1        return;
 445   1      }
 446          
 447          /*
 448          function: 
 449          parameter: 
 450            none
 451          return :
 452            none
 453          */
 454          unsigned char mmi_dq_sys_get_timer2_flag(void)
 455          {
 456   1        if (g_timer2_flag == 2)
 457   1        {
 458   2          g_timer2_flag = 0;
 459   2          return 1;
 460   2        }
 461   1        return 0;
 462   1      }
 463          
 464          /*
 465          function: 
 466          parameter: 
 467            none
 468          return :
 469            none
 470          */
 471          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 472          {
 473   1        g_timer2_count = 0;
 474   1        g_timer2_set_count = count;
 475   1        g_timer2_delay_pro = pro;
 476   1        g_timer2_flag = 1;
 477   1        //dqiot_drv_timer2_start();
 478   1      }
 479          
 480          /*
 481          function: 
 482          parameter: 
 483            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 9   

 484          return :
 485            none
 486          */
 487          void mmi_dq_sys_delay_event_pro(void)
 488          {
 489   1        g_timer2_delay_pro();
 490   1      }
 491          
 492          /*
 493          function: 
 494          parameter: 
 495            none
 496          return :
 497            none
 498          */
 499          unsigned char mmi_dq_sys_check_vbat(void)
 500          {
 501   1        unsigned char state = adc_VolT();
*** WARNING C206 IN LINE 501 OF mmi_src\mmi_sys.c: 'adc_VolT': missing function-prototype
 502   1        if (state > 0)
 503   1        {
 504   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 505   2          mmi_dq_wifi_lowpower_alarm();
 506   2          if (state == 2)
 507   2          {
 508   3      #if __Normal_handling__
                    mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
                    return 1;
              #endif
 512   3          }
 513   2        }
 514   1      
 515   1        return 0;
 516   1      }
 517          
 518          /*
 519          function: 
 520          parameter: 
 521            none
 522          return :
 523            none
 524          */
 525          void mmi_dq_sys_wifi_open(void)
 526          {
 527   1        if ((mmi_dq_fs_get_wifi_setting() == 0) || (mmi_dq_wifi_open_ask() == 0))
 528   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 529   1      }
 530          
 531          /*
 532          parameter: 
 533            none
 534          return :
 535            none
 536          */
 537          void mmi_dq_sys_add_admin_pwd(void)
 538          {
 539   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 540   1        mmi_ms_pwd_init_var();
 541   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 542   1        return;
 543   1      }
 544          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 10  

 545          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 546          //********************************************************************************************************
             -***********************************************************************************
 547          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 548          //
 549          //        menu part
 550          //
 551          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 552          //********************************************************************************************************
             -***********************************************************************************
 553          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 554          
 555          /*
 556          parameter: 
 557            none
 558          return :
 559            none
 560          */
 561          void mmi_dq_sys_add_pwd(void)
 562          {
 563   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 564   1        {
 565   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 566   2          mmi_dq_sys_show_cur_menu_list();
 567   2        }
 568   1        else
 569   1        {
 570   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 571   2          mmi_ms_pwd_init_var();
 572   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 573   2        }
 574   1        return;
 575   1      }
 576          
 577          void mmi_dq_sys_add_pwd_con(void)
 578          {
 579   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 580   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 581   1        return;
 582   1      }
 583          
 584          /*
 585          parameter: 
 586            none
 587          return :
 588            none
 589          */
 590          static void mmi_dq_sys_chg_pwd(void)
 591          {
 592   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 593   1        return;
 594   1      }
 595          
 596          /*
 597          parameter: 
 598            none
 599          return :
 600            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 11  

 601          */
 602          void mmi_dq_sys_del_pwd(void)
 603          {
 604   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 605   1        mmi_ms_pwd_init_var();
 606   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 607   1        return;
 608   1      }
 609          
 610          void mmi_dq_sys_del_pwd_con(void)
 611          {
 612   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 613   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 614   1        return;
 615   1      }
 616          
 617          /*
 618          parameter: 
 619            none
 620          return :
 621            none
 622          */
 623          static void mmi_dq_sys_clear_pwd(void)
 624          {
 625   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 626   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 627   1        return;
 628   1      }
 629          
 630          #if defined(__LOCK_FP_SUPPORT__)
 631          /*
 632          parameter: 
 633            none
 634          return :
 635            none
 636          */
 637          void mmi_dq_sys_add_fp(void)
 638          {
 639   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 640   1        {
 641   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 642   2          mmi_dq_sys_show_cur_menu_list();
 643   2        }
 644   1        else
 645   1        {
 646   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 647   2          mmi_dq_fp_light(FP_BLUE);
 648   2          mmi_ms_opt_time_init();
 649   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 650   2        }
 651   1        return;
 652   1      }
 653          
 654          void mmi_dq_sys_add_fp_con(void)
 655          {
 656   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 657   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 658   1        return;
 659   1      }
 660          
 661          /*
 662          parameter: 
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 12  

 663            none
 664          return :
 665            none
 666          */
 667          static void mmi_dq_sys_chg_fp(void)
 668          {
 669   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 670   1        return;
 671   1      }
 672          
 673          /*
 674          parameter: 
 675            none
 676          return :
 677            none
 678          */
 679          void mmi_dq_sys_del_fp(void)
 680          {
 681   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 682   1        mmi_dq_fp_light(FP_BLUE);
 683   1        mmi_ms_opt_time_init();
 684   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 685   1        return;
 686   1      }
 687          
 688          void mmi_dq_sys_del_fp_con(void)
 689          {
 690   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 691   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 692   1        return;
 693   1      }
 694          
 695          /*
 696          parameter: 
 697            none
 698          return :
 699            none
 700          */
 701          static void mmi_dq_sys_clear_fp(void)
 702          {
 703   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 704   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 705   1        return;
 706   1      }
 707          #endif
 708          #ifdef __LOCK_RFID_CARD_SUPPORT__
 709          /*
 710          parameter: 
 711            none
 712          return :
 713            none
 714          */
 715          void mmi_dq_sys_add_rf(void)
 716          {
 717   1      
 718   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 719   1        {
 720   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 721   2          mmi_dq_sys_show_cur_menu_list();
 722   2        }
 723   1        else
 724   1        {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 13  

 725   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 726   2          mmi_ms_opt_time_init();
 727   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 728   2        }
 729   1        return;
 730   1      }
 731          
 732          void mmi_dq_sys_add_rf_con(void)
 733          {
 734   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 735   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 736   1        return;
 737   1      }
 738          
 739          /*
 740          parameter: 
 741            none
 742          return :
 743            none
 744          */
 745          static void mmi_dq_sys_chg_rf(void)
 746          {
 747   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 748   1        return;
 749   1      }
 750          
 751          /*
 752          parameter: 
 753            none
 754          return :
 755            none
 756          */
 757          void mmi_dq_sys_del_rf(void)
 758          {
 759   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 760   1        mmi_ms_opt_time_init();
 761   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
 762   1        return;
 763   1      }
 764          
 765          void mmi_dq_sys_del_rf_con(void)
 766          {
 767   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 768   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 769   1        return;
 770   1      }
 771          
 772          /*
 773          parameter: 
 774            none
 775          return :
 776            none
 777          */
 778          static void mmi_dq_sys_clear_rf(void)
 779          {
 780   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 781   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 782   1        return;
 783   1      }
 784          #endif
 785          
 786          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 14  

 787          parameter: 
 788            none
 789          return :
 790            none
 791          */
 792          static void mmi_dq_sys_open_pro_sound(void)
 793          {
 794   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 795   1      
 796   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 797   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 798   1        else
 799   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 800   1      
 801   1        mmi_dq_sys_show_cur_menu_list();
 802   1        return;
 803   1      }
 804          
 805          /*
 806          parameter: 
 807            none
 808          return :
 809            none
 810          */
 811          static void mmi_dq_sys_close_pro_sound(void)
 812          {
 813   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 814   1      
 815   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 816   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 817   1        else
 818   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 819   1      
 820   1        mmi_dq_sys_show_cur_menu_list();
 821   1        return;
 822   1      }
 823          
 824          /*
 825          parameter: 
 826            none
 827          return :
 828            none
 829          */
 830          static void mmi_dq_sys_sin_open_mode(void)
 831          {
 832   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 833   1      
 834   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 835   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 836   1        else
 837   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 838   1      
 839   1        mmi_dq_sys_show_cur_menu_list();
 840   1        return;
 841   1      }
 842          
 843          /*
 844          parameter: 
 845            none
 846          return :
 847            none
 848          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 15  

 849          static void mmi_dq_sys_dbl_open_mode(void)
 850          {
 851   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 852   1      
 853   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
 854   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
 855   1        else
 856   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
 857   1      
 858   1        mmi_dq_sys_show_cur_menu_list();
 859   1        return;
 860   1      }
 861          
 862          #if defined(__LOCK_FP_SUPPORT__)
 863          /*
 864          parameter: 
 865            none
 866          return :
 867            none
 868          */
 869          void mmi_dq_sys_chg_admin_fp_No1(void)
 870          {
 871   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 872   1        mmi_dq_fp_light(FP_BLUE);
 873   1        mmi_ms_opt_time_init();
 874   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
 875   1        return;
 876   1      }
 877          
 878          /*
 879          parameter: 
 880            none
 881          return :
 882            none
 883          */
 884          void mmi_dq_sys_chg_admin_fp_No2(void)
 885          {
 886   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
 887   1        mmi_dq_fp_light(FP_BLUE);
 888   1        mmi_ms_opt_time_init();
 889   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
 890   1        return;
 891   1      }
 892          #endif
 893          
 894          /*
 895          parameter: 
 896            none
 897          return :
 898            none
 899          */
 900          void mmi_dq_sys_chg_admin_pwd(void)
 901          {
 902   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 903   1        mmi_ms_pwd_init_var();
 904   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 905   1        return;
 906   1      }
 907          
 908          /*
 909          parameter: 
 910            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 16  

 911          return :
 912            none
 913          */
 914          void mmi_dq_sys_restore_lock(void)
 915          {
 916   1        unsigned char retval = 0;
 917   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
 918   1      
 919   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
 920   1          retval = 1;
 921   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
 922   1          retval = 1;
 923   1      #ifdef __LOCK_FP_SUPPORT__
 924   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
 925   1          retval = 1;
 926   1      #endif
 927   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 928   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
 929   1          retval = 1;
 930   1      #endif
 931   1      
 932   1        if (retval == 0)
 933   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_SYS_RESTORE_SUCCESS);
 934   1        else
 935   1          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 936   1      
 937   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 938   1        return;
 939   1      }
 940          
 941          /*
 942          parameter: 
 943            none
 944          return :
 945            none
 946          */
 947          static void mmi_dq_sys_restore_lock_con(void)
 948          {
 949   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
 950   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
 951   1      }
 952          
 953          /*
 954          parameter: 
 955            none
 956          return :
 957            none
 958          */
 959          static void mmi_dq_sys_wifi_setting(void)
 960          {
 961   1        if (0 == mmi_dq_wifi_setting())
 962   1        {
 963   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 964   2          mmi_dq_sys_show_cur_menu_list();
 965   2        }
 966   1        else
 967   1        {
 968   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
 969   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 970   2        }
 971   1      }
 972          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 17  

 973          typedef struct sys_menu_t
 974          {
 975            unsigned char menu_father_id;
 976            unsigned char menu_sub_id;
 977            void (*sys_menu_node_function)(void);
 978          } sys_menu_t;
 979          
 980          typedef struct sys_menu_list
 981          {
 982            unsigned char id;
 983            unsigned char menu_id;
 984          } sys_menu_list;
 985          
 986          const sys_menu_t sys_menu_tree[] =
 987            {
 988              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
 989          #if defined(__LOCK_FP_SUPPORT__)
 990              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
 991          #endif
 992          #ifdef __LOCK_RFID_CARD_SUPPORT__
 993              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
 994          #endif
 995              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
 996              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
 997              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
 998              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
 999          
1000              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1001              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1002              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1003          
1004              //PWD
1005              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1006              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1007              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1008              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1009          //FP
1010          #if defined(__LOCK_FP_SUPPORT__)
1011              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1012              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1013              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1014              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1015          #endif
1016          #ifdef __LOCK_RFID_CARD_SUPPORT__
1017              //RF
1018              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1019              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1020              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1021              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1022          #endif
1023              //admin
1024              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1025          #if defined(__LOCK_FP_SUPPORT__)
1026              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1027              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1028              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1029          #endif
1030              //setting
1031              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1032              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1033          
1034              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 18  

1035              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1036              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1037              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1038          };
1039          
1040          static unsigned char g_dq_menu_father_id;
1041          static sys_menu_list g_dq_menu_list_id[8];
1042          static unsigned char g_dq_menu_count;
1043          
1044          /*
1045          parameter: 
1046            none
1047          return :
1048            none
1049          */
1050          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1051          {
1052   1        g_dq_menu_father_id = father_id;
1053   1        return;
1054   1      }
1055          
1056          /*
1057          parameter: 
1058            none
1059          return :
1060            none
1061          */
1062          unsigned char mmi_dq_sys_get_menu_count(void)
1063          {
1064   1        return g_dq_menu_count;
1065   1      }
1066          
1067          /*
1068          parameter: 
1069            none
1070          return :
1071            none
1072          */
1073          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1074          {
1075   1        unsigned char i = 0, j = 0;
1076   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1077   1      
1078   1        g_dq_menu_father_id = father_id;
1079   1      
1080   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1081   1        g_dq_menu_count = 0;
1082   1      
1083   1        for (i = 0; i < menu_tree_size; i++)
1084   1        {
1085   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1086   2          {
1087   3            g_dq_menu_list_id[j].id = i;
1088   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1089   3            j++;
1090   3            g_dq_menu_count++;
1091   3          }
1092   2        }
1093   1        return;
1094   1      }
1095          
1096          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 19  

1097          parameter: 
1098            none
1099          return :
1100            none
1101          */
1102          void mmi_dq_sys_show_cur_menu_list(void)
1103          {
1104   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1105   1      
1106   1      #ifdef __LOCK_AUDIO_SUPPORT__
1107   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1108   1      #endif
1109   1      #ifdef __LOCK_FP_SUPPORT__
1110   1        mmi_dq_fp_light(FP_NONE_COLOR);
1111   1      #endif
1112   1      
1113   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1114   1        return;
1115   1      }
1116          
1117          /*
1118          parameter: 
1119            none
1120          return :
1121            current machine status
1122          */
1123          void mmi_dq_sys_get_pre_menu_list(void)
1124          {
1125   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1126   1        {
1127   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1128   2        }
1129   1        else
1130   1        {
1131   2          unsigned char i = 0;
1132   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1133   2      
1134   2          for (i = 0; i < menu_tree_size; i++)
1135   2          {
1136   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1137   3              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1138   3          }
1139   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1140   2      #ifdef __LOCK_AUDIO_SUPPORT__
1141   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1142   2      #endif
1143   2        }
1144   1        return;
1145   1      }
1146          
1147          /*
1148          parameter: 
1149            none
1150          return :
1151            none
1152          */
1153          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1154          {
1155   1        unsigned char i = 0;
1156   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1157   1        if (menu_id >= g_dq_menu_count)
1158   1          return RET_FAIL;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           03/06/2021 14:44:07 PAGE 20  

1159   1        i = g_dq_menu_list_id[menu_id].id;
1160   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1161   1        {
1162   2          sys_menu_tree[i].sys_menu_node_function();
1163   2        }
1164   1        else
1165   1        {
1166   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1167   2      
1168   2      #ifdef __LOCK_AUDIO_SUPPORT__
1169   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1170   2      #endif
1171   2        }
1172   1      
1173   1        return RET_SUCESS;
1174   1      }
1175          
1176          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1841    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    185      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
