C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_SYS
OBJECT MODULE PLACED IN .\output\mmi_sys.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_sys.lst) TABS(2) OBJECT(.\output\mmi_sys.obj)

line level    source

   1          #ifndef __MMI_SYS_C__
   2          #define __MMI_SYS_C__
   3          
   4          #include "mmi_feature.h"
   5          #include "mmi_sys.h"
   6          #include "mmi_audio.h"
   7          #include "mmi_rst.h"
   8          #include "mmi_queue.h"
   9          #include "dqiot_drv.h"
  10          #include "mmi_ms.h"
  11          #include "mmi_fs.h"
  12          #include "mmi_bsp.h"
  13          #include "mmi_motor.h"
  14          #include "mmi_wifi.h"
  15          // #include <stdio.h>
  16          
  17          // extern void printfS(char *show, char *status);
  18          // extern void printfV(char *show, int value);
  19          
  20          static unsigned char g_sys_door_open_flag = 0;
  21          
  22          static unsigned int g_timer2_sleep_count = 0;
  23          static unsigned int g_timer2_count = 0;
  24          static unsigned int g_timer2_set_count = 0;
  25          static unsigned char g_timer2_flag = 0;
  26          
  27          static unsigned char g_wifi_check_flag = 0;
  28          static unsigned char g_wifi_check_count = 0;
  29          static unsigned char g_wifi_check_type = 0;
  30          
  31          /* RFID */
  32          static unsigned char g_rfid_flag = 0;
  33          
  34          #define LOCK_MAX_EEROR_TIMES 5
  35          static unsigned char g_lock_error_flag = 0;
  36          static unsigned int g_lock_error_count = 0;
  37          
  38          timer2_delay_pro g_timer2_delay_pro = 0;
  39          
  40          #define MMI_TIMER_BASE_TIME 100
  41          #define MMI_TIMER_ENTER_SLEEP 10000
  42          #define MMI_TIMER_ENTER_SLEEP_COUNT (MMI_TIMER_ENTER_SLEEP / MMI_TIMER_BASE_TIME)
  43          #define MMI_TIMER_ENTER_SLEEP_DELAY 20000
  44          #define MMI_TIMER_ENTER_SLEEP_DEALY_COUNT (MMI_TIMER_ENTER_SLEEP_DELAY / MMI_TIMER_BASE_TIME)
  45          #define MMI_TIMER_DOOR_OPEN 6000
  46          #define MMI_TIMER_DOOR_OPEN_COUNT (MMI_TIMER_DOOR_OPEN / MMI_TIMER_BASE_TIME)
  47          #define MMI_TIMER_MOTOR 300
  48          #define MMI_TIMER_MOTOR_COUNT (MMI_TIMER_MOTOR / MMI_TIMER_BASE_TIME)
  49          #define MMI_TIMER_WIFI_CHECK 1000
  50          #define MMI_TIMER_WIFI_CHECK_COUNT (MMI_TIMER_WIFI_CHECK / MMI_TIMER_BASE_TIME)
  51          #define MMI_WIFI_SETTING_DELAY 60000
  52          #define MMI_WIFI_SETTING_DELAY_COUNT (MMI_WIFI_SETTING_DELAY / MMI_TIMER_BASE_TIME)
  53          #define MMI_LOCK_ERROR_DELAY 60000
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 2   

  54          #define MMI_LOCK_ERROR_DELAY_COUNT (MMI_LOCK_ERROR_DELAY / MMI_TIMER_BASE_TIME)
  55          /*
  56          parameter: 
  57            none
  58          return :
  59            none
  60          */
  61          void mmi_dq_sys_init(void)
  62          {
  63   1        mmi_InitQueue();
  64   1        mmi_ms_pwd_init_var();
  65   1        mmi_dq_fs_init();
  66   1      }
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          void mmi_dq_sys_show_message_with_id(unsigned char text_id, unsigned long time_msec)
  74          {
  75   1        unsigned char audio_id = 0;
  76   1      
  77   1        time_msec = 0;
  78   1      
  79   1      #ifdef __LOCK_AUDIO_SUPPORT__
  80   1        audio_id = mmi_dq_aud_get_audio_id(text_id);
  81   1      
  82   1        mmi_dq_aud_play_with_id(audio_id);
  83   1      
  84   1      #endif
  85   1        return;
  86   1      }
  87          
  88          /*
  89          parameter: 
  90            none
  91          return :
  92            none
  93          */
  94          void mmi_dq_sys_lock_add_admin_suc(void)
  95          {
  96   1        mmi_dq_fs_set_admin_status(1);
  97   1      
  98   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
  99   1      }
 100          
 101          /*
 102          function: system enter sleep
 103          parameter: 
 104            none
 105          return :
 106            none
 107          */
 108          void mmi_dq_sys_enter_sleep(void)
 109          {
 110   1        mmi_dq_bsp_enter_sleep();
 111   1      
 112   1        g_timer2_flag = 0;
 113   1        g_sys_door_open_flag = 0;
 114   1      
 115   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ENTER_SLEEP);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 3   

 116   1      }
 117          
 118          /*
 119          function: system wake up
 120          parameter: 
 121            none
 122          return :
 123            none
 124          */
 125          void mmi_dq_sys_wake_up(void)
 126          {
 127   1      
 128   1        mmi_dq_bsp_wake_up();
 129   1        if (mmi_dq_sys_check_vbat() == 0)
 130   1        {
 131   2          mmi_dq_wifi_wakeup();
 132   2      #ifdef __LOCK_FP_SUPPORT__
 133   2          mmi_dq_fp_init(); //握手、点灯
 134   2      #endif
 135   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 136   2        }
 137   1      }
 138          
 139          /*
 140          function: 
 141          parameter: 
 142            none
 143          return :
 144            none
 145          */
 146          void mmi_dq_sys_door_open_cb(void)
 147          {
 148   1      #ifdef __LOCK_MOTOR_SUPPORT__
 149   1        mmi_dq_motor_stop();
 150   1      #endif
 151   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_OPEN);
 152   1        mmi_dq_sys_set_delay_event(MMI_TIMER_DOOR_OPEN_COUNT, mmi_dq_sys_door_close);
 153   1      }
 154          
 155          /*
 156          function: 
 157          parameter: 
 158            none
 159          return :
 160            none
 161          */
 162          void mmi_dq_sys_door_open(sys_open_type type)
 163          {
 164   1      #ifdef __LOCK_BUS_SUPPORT__
 165   1        if ((mmi_dq_fs_get_business_flag() == 1) && ((type & SYS_OPEN_BY_110) == 0) && (SYS_OPEN_BY_WIFI != type)
             -)
 166   1        {
 167   2          mmi_dq_aud_play_with_id(AUD_ID_IS_BUSINESS);
 168   2      #ifdef __LOCK_WIFI_SUPPORT__
 169   2          switch (type)
 170   2          {
 171   3          case SYS_OPEN_BY_PASSWORD:
 172   3            mmi_dq_wifi_pw_alarm();
 173   3            break;
 174   3          case SYS_OPEN_BY_FP:
 175   3            mmi_dq_wifi_fp_alarm();
 176   3            break;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 4   

 177   3          case SYS_OPEN_BY_RFID:
 178   3            mmi_dq_wifi_rfid_alarm();
 179   3            break;
 180   3          }
 181   2      #endif
 182   2          return;
 183   2        }
 184   1      #endif
 185   1        g_lock_error_flag = 0;
 186   1        if ((mmi_dq_fs_get_open_mode() == SYS_OPEN_MODE_DBL) && (SYS_OPEN_BY_WIFI != type) && ((type & SYS_OPEN_B
             -Y_110) == 0))
 187   1        {
 188   2          if ((g_sys_door_open_flag & (~type)) != 0)
 189   2          {
 190   3            g_sys_door_open_flag = 0;
 191   3          }
 192   2          else
 193   2          {
 194   3            g_sys_door_open_flag |= type;
 195   3            mmi_dq_aud_play_with_id(AUD_ID_SYS_DBL_OPEN_MODE);
 196   3            return;
 197   3          }
 198   2        }
 199   1      
 200   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DOOR_OPEN);
 201   1      
 202   1        mmi_dq_motor_turn_right();
 203   1        //mmi_dq_wifi_open_door();
 204   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_open_cb);
 205   1      
 206   1      #ifdef __LOCK_WIFI_SUPPORT__
 207   1        switch (type)
 208   1        {
 209   2      #ifdef __LOCK_110_SUPPORT__
 210   2        case SYS_OPEN_BY_110_PASSWORD:
 211   2          mmi_dq_wifi_send_pwd_110(get_index);
 212   2          // printfV("get_index",(int)get_index);
 213   2          break;
 214   2        case SYS_OPEN_BY_110_FP:
 215   2          mmi_dq_wifi_send_fp_110(get_index);
 216   2          // printfV("get_index",(int)get_index);
 217   2          break;
 218   2      #endif
 219   2        case SYS_OPEN_BY_PASSWORD:
 220   2          mmi_dq_wifi_open_by_password(get_index);
 221   2          // printfV("get_index",(int)get_index);
 222   2          break;
 223   2      #ifdef __LOCK_FP_SUPPORT__
 224   2        case SYS_OPEN_BY_FP:
 225   2          mmi_dq_wifi_open_by_fp(get_index);
 226   2          // printfV("get_index",(int)get_index);
 227   2          break;
 228   2      #endif
 229   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 230   2        case SYS_OPEN_BY_RFID:
 231   2          mmi_dq_wifi_open_by_rfid(get_index);
 232   2          // printfV("get_index",(int)get_index);
 233   2          break;
 234   2      #endif
 235   2        case SYS_OPEN_BY_WIFI:
 236   2          mmi_dq_wifi_open_by_wifi();
 237   2          break;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 5   

 238   2        }
 239   1      
 240   1        mmi_dq_wifi_take_photos(); //拍照
 241   1      #endif
 242   1      }
 243          
 244          /*
 245          function: 
 246          parameter: 
 247            none
 248          return :
 249            none
 250          */
 251          void mmi_dq_sys_door_open_fail(sys_open_type type)
 252          {
 253   1        g_lock_error_count = 0;
 254   1        g_lock_error_flag++;
 255   1        switch (type)
 256   1        {
 257   2        case SYS_OPEN_BY_PASSWORD:
 258   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 259   2      #ifdef __LOCK_WIFI_SUPPORT__
 260   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 261   2            mmi_dq_wifi_pw_alarm();
 262   2      #endif
 263   2          break;
 264   2      #ifdef __LOCK_FP_SUPPORT__
 265   2        case SYS_OPEN_BY_FP:
 266   2          mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 267   2      #ifdef __LOCK_WIFI_SUPPORT__
 268   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 269   2            mmi_dq_wifi_fp_alarm();
 270   2      #endif
 271   2          break;
 272   2      #endif
 273   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 274   2        case SYS_OPEN_BY_RFID:
 275   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_WRONG_TRY);
 276   2      #ifdef __LOCK_WIFI_SUPPORT__
 277   2          if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 278   2            mmi_dq_wifi_rfid_alarm();
 279   2      #endif
 280   2          break;
 281   2      #endif
 282   2        }
 283   1      }
 284          
 285          /*
 286          function: 
 287          parameter: 
 288            none
 289          return :
 290            none
 291          */
 292          unsigned char mmi_dq_sys_door_state_check(void)
 293          {
 294   1        if (g_lock_error_flag >= LOCK_MAX_EEROR_TIMES)
 295   1          return 1;
 296   1        return 0;
 297   1      }
 298          
 299          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 6   

 300          function: 
 301          parameter: 
 302            none
 303          return :
 304            none
 305          */
 306          void mmi_dq_sys_door_close_cb(void)
 307          {
 308   1      #ifdef __LOCK_MOTOR_SUPPORT__
 309   1        mmi_dq_motor_stop();
 310   1      #endif
 311   1        mmi_dq_aud_play_with_id(AUD_ID_DOOR_CLOSE);
 312   1        mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 313   1      }
 314          
 315          /*
 316          function: 
 317          parameter: 
 318            none
 319          return :
 320            none
 321          */
 322          void mmi_dq_sys_door_close(void)
 323          {
 324   1        mmi_dq_motor_turn_back();
 325   1        //mmi_dq_wifi_close_door();
 326   1        mmi_dq_sys_set_delay_event(MMI_TIMER_MOTOR_COUNT, mmi_dq_sys_door_close_cb);
 327   1      }
 328          
 329          /*
 330          function: 
 331          parameter: 
 332            none
 333          return :
 334            none
 335          */
 336          void mmi_dq_sys_aud_end(void)
 337          {
 338   1        mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 339   1      }
 340          
 341          /*
 342          function: 
 343          parameter: 
 344            none
 345          return :
 346            none
 347          */
 348          void mmi_dq_sys_time_out_handle(void)
 349          {
 350   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 351   1      
 352   1        if ((state >= SYS_STATUS_ADD_PWD && state < SYS_STATUS_ADD_ADMIN_PWD) || (state == SYS_STATUS_SYS_MENU) |
             -| (state == SYS_STATUS_CHG_ADMIN_PWD))
 353   1        {
 354   2          mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 355   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 356   2        }
 357   1      #ifdef __LOCK_FP_SUPPORT__
 358   1        else if (state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2)
 359   1        {
 360   2          if (mmi_dq_fs_get_admin_status() == 0)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 7   

 361   2            g_timer2_sleep_count = 0;
 362   2          else
 363   2          {
 364   3            mmi_dq_aud_play_with_id(AUD_ID_TIME_OUT);
 365   3            mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 366   3          }
 367   2        }
 368   1      #endif
 369   1        else if (state == SYS_STATUS_ADD_ADMIN_PWD)
 370   1        {
 371   2          g_timer2_sleep_count = 0;
 372   2          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 373   2        }
 374   1        else
 375   1          mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 376   1      }
 377          
 378          /*
 379          function: 
 380          parameter: 
 381            none
 382          return :
 383            none
 384          */
 385          void System_timer_event_handler(void)
 386          {
 387   1        SYS_BASE_STATUS state = mmi_dq_ms_get_sys_state();
 388   1      
 389   1        g_rfid_flag = 1; /* RFID */
 390   1      
 391   1        if (g_timer2_flag == 1)
 392   1        {
 393   2          g_timer2_count++;
 394   2          if (g_timer2_count >= g_timer2_set_count)
 395   2          {
 396   3            g_timer2_flag = 2;
 397   3            g_timer2_count = 0;
 398   3            //mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END,QUE_PRO_LOW,0);
 399   3          }
 400   2        }
 401   1      
 402   1        if (g_wifi_check_flag == 1)
 403   1        {
 404   2          g_wifi_check_count++;
 405   2          if (g_wifi_check_count >= MMI_TIMER_WIFI_CHECK_COUNT)
 406   2          {
 407   3            g_wifi_check_flag = 2;
 408   3            g_wifi_check_count = 0;
 409   3          }
 410   2        }
 411   1      
 412   1        if (g_lock_error_flag > 0)
 413   1        {
 414   2          g_lock_error_count++;
 415   2          if (g_lock_error_count >= MMI_LOCK_ERROR_DELAY_COUNT)
 416   2            g_lock_error_flag = 0;
 417   2        }
 418   1      
 419   1        if ((mmi_dq_rst_timer_event() != 0) && (SYS_STATUS_ENTER_SLEEP != state && SYS_STATUS_WAIT_FOR_ENTER_SLEE
             -P != state) && (g_timer2_flag != 1) && (mmi_dq_ms_get_run_flag() == 0) && (mmi_dq_wifi_get_running_flag() == 0))
 420   1        {
 421   2          unsigned char flag = 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 8   

 422   2          g_timer2_sleep_count++;
 423   2          if (state == SYS_STATUS_ADD_PWD || state == SYS_STATUS_DEL_PWD || state == SYS_STATUS_ADD_ADMIN_PWD
 424   2      #ifdef __LOCK_FP_SUPPORT__
 425   2            || state == SYS_STATUS_ADD_ADMIN_FP1 || state == SYS_STATUS_ADD_ADMIN_FP2 || state == SYS_STATUS_ADD_FP
             - || state == SYS_STATUS_DEL_FP
 426   2      #endif
 427   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 428   2            || state == SYS_STATUS_ADD_RFID || state == SYS_STATUS_DEL_RFID
 429   2      #endif
 430   2          )
 431   2          {
 432   3            if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_DEALY_COUNT)
 433   3            {
 434   4              flag = 1;
 435   4            }
 436   3          }
 437   2          else if (g_timer2_sleep_count > MMI_TIMER_ENTER_SLEEP_COUNT)
 438   2          {
 439   3            flag = 1;
 440   3          }
 441   2      
 442   2          if (flag)
 443   2          {
 444   3            mmi_dq_sys_time_out_handle();
 445   3          }
 446   2        }
 447   1        else
 448   1          g_timer2_sleep_count = 0;
 449   1      }
 450          
 451          /*
 452          function: 
 453          parameter: 
 454            none
 455          return :
 456            none
 457          */
 458          unsigned char mmi_dq_sys_get_rfid_flag(void)
 459          {
 460   1        if (g_rfid_flag == 1)
 461   1        {
 462   2          g_rfid_flag = 0;
 463   2          return 1;
 464   2        }
 465   1        return 0;
 466   1      }
 467          
 468          /*
 469          function: 
 470          parameter: 
 471            none
 472          return :
 473            none
 474          */
 475          unsigned char mmi_dq_sys_get_wifi_check_flag(void)
 476          {
 477   1        if (g_wifi_check_flag == 2)
 478   1        {
 479   2          g_wifi_check_flag = 0;
 480   2          return 1;
 481   2        }
 482   1        return 0;
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 9   

 483   1      }
 484          
 485          /*
 486          function: 
 487          parameter: 
 488            none
 489          return :
 490            none
 491          */
 492          void mmi_dq_sys_set_wifi_check(unsigned char type)
 493          {
 494   1        g_wifi_check_count = 0;
 495   1        g_wifi_check_flag = 1;
 496   1        g_wifi_check_type = type;
 497   1      }
 498          
 499          /*
 500          function: 
 501          parameter: 
 502            none
 503          return :
 504            none
 505          */
 506          unsigned char mmi_dq_sys_get_wifi_check_type(void)
 507          {
 508   1        return g_wifi_check_type;
 509   1      }
 510          
 511          /*
 512          function: 
 513          parameter: 
 514            none
 515          return :
 516            none
 517          */
 518          void mmi_dq_sys_sleep_timer_reset(void)
 519          {
 520   1        g_timer2_sleep_count = 0;
 521   1        return;
 522   1      }
 523          
 524          /*
 525          function: 
 526          parameter: 
 527            none
 528          return :
 529            none
 530          */
 531          unsigned char mmi_dq_sys_get_timer2_flag(void)
 532          {
 533   1        if (g_timer2_flag == 2)
 534   1        {
 535   2          g_timer2_flag = 0;
 536   2          return 1;
 537   2        }
 538   1        return 0;
 539   1      }
 540          
 541          /*
 542          function: 
 543          parameter: 
 544            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 10  

 545          return :
 546            none
 547          */
 548          void mmi_dq_sys_set_delay_event(unsigned int count, timer2_delay_pro pro)
 549          {
 550   1        if (count != 0)
 551   1        {
 552   2          g_timer2_count = 0;
 553   2          g_timer2_set_count = count;
 554   2          g_timer2_delay_pro = pro;
 555   2          g_timer2_flag = 1;
 556   2        }
 557   1        else
 558   1          pro();
 559   1      }
 560          
 561          /*
 562          function: 
 563          parameter: 
 564            none
 565          return :
 566            none
 567          */
 568          void mmi_dq_sys_delay_event_pro(void)
 569          {
 570   1        if (g_timer2_delay_pro != 0)
 571   1          g_timer2_delay_pro();
 572   1      }
 573          
 574          /*
 575          function: 
 576          parameter: 
 577            none
 578          return :
 579            none
 580          */
 581          unsigned char mmi_dq_sys_check_vbat(void)
 582          {
 583   1        unsigned char state = adc_VolT();
 584   1        if (state > 0)
 585   1        {
 586   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 587   2          mmi_dq_wifi_lowpower_alarm();
 588   2          if (state == 2)
 589   2          {
 590   3            // mmi_dq_ms_set_sys_state(SYS_STATUS_LOW_POWER);
 591   3            // return 1;
 592   3          }
 593   2        }
 594   1      
 595   1        return 0;
 596   1      }
 597          
 598          /**
 599            * @brief  远程开门
 600            * @param  none
 601            * @return none
 602            * @note   none
 603            * @see    none
 604            */
 605          void mmi_dq_sys_wifi_open(void)
 606          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 11  

 607   1        if (mmi_dq_wifi_open_ask() == 0)
 608   1          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
 609   1      }
 610          
 611          /*
 612          parameter: 
 613            none
 614          return :
 615            none
 616          */
 617          void mmi_dq_sys_add_admin_pwd(void)
 618          {
 619   1        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 620   1        mmi_ms_pwd_init_var();
 621   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_PWD);
 622   1        return;
 623   1      }
 624          
 625          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 626          //********************************************************************************************************
             -***********************************************************************************
 627          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 628          //
 629          //        menu part
 630          //
 631          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 632          //********************************************************************************************************
             -***********************************************************************************
 633          //--------------------------------------------------------------------------------------------------------
             ------------------------------------------------------------------------------------
 634          
 635          /*
 636          parameter: 
 637            none
 638          return :
 639            none
 640          */
 641          void mmi_dq_sys_add_pwd(void)
 642          {
 643   1        if (mmi_dq_fs_get_pwd_unuse_index() == 0xFF)
 644   1        {
 645   2          mmi_dq_aud_play_with_id(AUD_ID_PWD_FULL);
 646   2          mmi_dq_sys_show_cur_menu_list();
 647   2        }
 648   1        else
 649   1        {
 650   2          mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 651   2          mmi_ms_pwd_init_var();
 652   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD);
 653   2        }
 654   1        return;
 655   1      }
 656          
 657          void mmi_dq_sys_add_pwd_con(void)
 658          {
 659   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 660   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_PWD_CON);
 661   1        return;
 662   1      }
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 12  

 663          
 664          #ifdef __LOCK_110_SUPPORT__
 665          /*
 666          parameter: 
 667            none
 668          return :
 669            none
 670          */
 671          void mmi_dq_sys_add_110_pwd(void)
 672          {
 673   1        mmi_dq_wifi_wakeup();
 674   1        if (mmi_dq_wifi_check() == 1)
 675   1        {
 676   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 677   2          mmi_dq_sys_show_cur_menu_list();
 678   2          return;
 679   2        }
 680   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 681   1        mmi_ms_pwd_init_var();
 682   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_PWD);
 683   1        return;
 684   1      }
 685          #endif
 686          /*
 687          parameter: 
 688            none
 689          return :
 690            none
 691          */
 692          static void mmi_dq_sys_chg_pwd(void)
 693          {
 694   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_PWD);
 695   1        return;
 696   1      }
 697          
 698          /*
 699          parameter: 
 700            none
 701          return :
 702            none
 703          */
 704          void mmi_dq_sys_del_pwd(void)
 705          {
 706   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 707   1        mmi_ms_pwd_init_var();
 708   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD);
 709   1        return;
 710   1      }
 711          
 712          void mmi_dq_sys_del_pwd_con(void)
 713          {
 714   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 715   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_PWD_CON);
 716   1        return;
 717   1      }
 718          
 719          /*
 720          parameter: 
 721            none
 722          return :
 723            none
 724          */
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 13  

 725          static void mmi_dq_sys_clear_pwd(void)
 726          {
 727   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_CONFIRM);
 728   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_PWD);
 729   1        return;
 730   1      }
 731          
 732          #if defined(__LOCK_FP_SUPPORT__)
 733          /*
 734          parameter: 
 735            none
 736          return :
 737            none
 738          */
 739          void mmi_dq_sys_add_fp(void)
 740          {
 741   1        if (mmi_dq_fs_get_fp_unuse_index() == 0xFF)
 742   1        {
 743   2          mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 744   2          mmi_dq_sys_show_cur_menu_list();
 745   2        }
 746   1        else
 747   1        {
 748   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 749   2          mmi_dq_fp_light(FP_BLUE);
 750   2          mmi_ms_opt_time_init();
 751   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP);
 752   2        }
 753   1        return;
 754   1      }
 755          
 756          void mmi_dq_sys_add_fp_con(void)
 757          {
 758   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 759   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_FP_CON);
 760   1        return;
 761   1      }
 762          
 763          #ifdef __LOCK_110_SUPPORT__
 764          /*
 765          parameter: 
 766            none
 767          return :
 768            none
 769          */
 770          void mmi_dq_sys_add_110_fp(void)
 771          {
 772   1        mmi_dq_wifi_wakeup();
 773   1        if (mmi_dq_wifi_check() == 1)
 774   1        {
 775   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 776   2          mmi_dq_sys_show_cur_menu_list();
 777   2          return;
 778   2        }
 779   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 780   1        mmi_dq_fp_light(FP_BLUE);
 781   1        mmi_ms_opt_time_init();
 782   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_110_FP);
 783   1        return;
 784   1      }
 785          
 786          /*
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 14  

 787          parameter: 
 788            none
 789          return :
 790            none
 791          */
 792          void mmi_dq_sys_del_110_fp(void)
 793          {
 794   1        mmi_dq_wifi_wakeup();
 795   1        if (mmi_dq_wifi_check() == 1)
 796   1        {
 797   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_UNFINDE);
 798   2          mmi_dq_sys_show_cur_menu_list();
 799   2          return;
 800   2        }
 801   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP);
 802   1        mmi_dq_fp_light(FP_BLUE);
 803   1        mmi_ms_opt_time_init();
 804   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_110_FP);
 805   1        return;
 806   1      }
 807          
 808          #endif
 809          
 810          /*
 811          parameter: 
 812            none
 813          return :
 814            none
 815          */
 816          static void mmi_dq_sys_chg_fp(void)
 817          {
 818   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_FP);
 819   1        return;
 820   1      }
 821          
 822          /*
 823          parameter: 
 824            none
 825          return :
 826            none
 827          */
 828          void mmi_dq_sys_del_fp(void)
 829          {
 830   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_FP_NUM);
 831   1        mmi_dq_fp_light(FP_BLUE);
 832   1        mmi_ms_opt_time_init();
 833   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP);
 834   1        return;
 835   1      }
 836          
 837          void mmi_dq_sys_del_fp_con(void)
 838          {
 839   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 840   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_FP_CON);
 841   1        return;
 842   1      }
 843          
 844          /*
 845          parameter: 
 846            none
 847          return :
 848            none
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 15  

 849          */
 850          static void mmi_dq_sys_clear_fp(void)
 851          {
 852   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_CONFIRM);
 853   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_FP);
 854   1        return;
 855   1      }
 856          #endif
 857          #ifdef __LOCK_RFID_CARD_SUPPORT__
 858          /*
 859          parameter: 
 860            none
 861          return :
 862            none
 863          */
 864          void mmi_dq_sys_add_rf(void)
 865          {
 866   1      
 867   1        if (mmi_dq_fs_get_rfid_unuse_index() == 0xFF)
 868   1        {
 869   2          mmi_dq_aud_play_with_id(AUD_ID_RFCARD_FULL);
 870   2          mmi_dq_sys_show_cur_menu_list();
 871   2        }
 872   1        else
 873   1        {
 874   2          mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD);
 875   2          mmi_ms_opt_time_init();
 876   2          mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID);
 877   2        }
 878   1        return;
 879   1      }
 880          
 881          void mmi_dq_sys_add_rf_con(void)
 882          {
 883   1        mmi_dq_aud_play_with_id(AUD_ID_CONTINUE_ADD_PWD);
 884   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_RFID_CON);
 885   1        return;
 886   1      }
 887          
 888          /*
 889          parameter: 
 890            none
 891          return :
 892            none
 893          */
 894          static void mmi_dq_sys_chg_rf(void)
 895          {
 896   1        //mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_RFID);
 897   1        return;
 898   1      }
 899          
 900          /*
 901          parameter: 
 902            none
 903          return :
 904            none
 905          */
 906          void mmi_dq_sys_del_rf(void)
 907          {
 908   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_RFCARD_NUM);
 909   1        mmi_ms_opt_time_init();
 910   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 16  

 911   1        return;
 912   1      }
 913          
 914          void mmi_dq_sys_del_rf_con(void)
 915          {
 916   1        mmi_dq_aud_play_with_id(AUD_ID_DEL_CONFIRM);
 917   1        mmi_dq_ms_set_sys_state(SYS_STATUS_DEL_RFID_CON);
 918   1        return;
 919   1      }
 920          
 921          /*
 922          parameter: 
 923            none
 924          return :
 925            none
 926          */
 927          static void mmi_dq_sys_clear_rf(void)
 928          {
 929   1        mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_CONFIRM);
 930   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CLR_RFID);
 931   1        return;
 932   1      }
 933          #endif
 934          
 935          /*
 936          parameter: 
 937            none
 938          return :
 939            none
 940          */
 941          static void mmi_dq_sys_open_pro_sound(void)
 942          {
 943   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 944   1      
 945   1        if (mmi_dq_fs_set_pro_sound(1) == RET_SUCESS)
 946   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_SUCESS);
 947   1        else
 948   1          mmi_dq_aud_play_with_id(AUD_ID_OPEN_PRO_AUDIO_FAIL);
 949   1      
 950   1        mmi_dq_sys_show_cur_menu_list();
 951   1        return;
 952   1      }
 953          
 954          /*
 955          parameter: 
 956            none
 957          return :
 958            none
 959          */
 960          static void mmi_dq_sys_close_pro_sound(void)
 961          {
 962   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 963   1      
 964   1        if (mmi_dq_fs_set_pro_sound(0) == RET_SUCESS)
 965   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_SUCESS);
 966   1        else
 967   1          mmi_dq_aud_play_with_id(AUD_ID_CLOSE_PRO_AUDIO_FAIL);
 968   1      
 969   1        mmi_dq_sys_show_cur_menu_list();
 970   1        return;
 971   1      }
 972          
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 17  

 973          /*
 974          parameter: 
 975            none
 976          return :
 977            none
 978          */
 979          static void mmi_dq_sys_sin_open_mode(void)
 980          {
 981   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
 982   1      
 983   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_SIN) == RET_SUCESS)
 984   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_SUCESS);
 985   1        else
 986   1          mmi_dq_aud_play_with_id(AUD_ID_SIN_OPEN_MODE_FAIL);
 987   1      
 988   1        mmi_dq_sys_show_cur_menu_list();
 989   1        return;
 990   1      }
 991          
 992          /*
 993          parameter: 
 994            none
 995          return :
 996            none
 997          */
 998          static void mmi_dq_sys_dbl_open_mode(void)
 999          {
1000   1        mmi_dq_sys_set_menu_father_id(STR_ID_SETTING);
1001   1      
1002   1        if (mmi_dq_fs_set_open_mode(SYS_OPEN_MODE_DBL) == RET_SUCESS)
1003   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_SUCESS);
1004   1        else
1005   1          mmi_dq_aud_play_with_id(AUD_ID_DBL_OPEN_MODE_FAIL);
1006   1      
1007   1        mmi_dq_sys_show_cur_menu_list();
1008   1        return;
1009   1      }
1010          
1011          #if defined(__LOCK_FP_SUPPORT__)
1012          /*
1013          parameter: 
1014            none
1015          return :
1016            none
1017          */
1018          void mmi_dq_sys_chg_admin_fp_No1(void)
1019          {
1020   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1021   1        mmi_dq_fp_light(FP_BLUE);
1022   1        mmi_ms_opt_time_init();
1023   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP1);
1024   1        return;
1025   1      }
1026          
1027          /*
1028          parameter: 
1029            none
1030          return :
1031            none
1032          */
1033          void mmi_dq_sys_chg_admin_fp_No2(void)
1034          {
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 18  

1035   1        mmi_dq_aud_play_with_id(AUD_ID_NEW_ADMIN_FP);
1036   1        mmi_dq_fp_light(FP_BLUE);
1037   1        mmi_ms_opt_time_init();
1038   1        mmi_dq_ms_set_sys_state(SYS_STATUS_ADD_ADMIN_FP2);
1039   1        return;
1040   1      }
1041          #endif
1042          
1043          /*
1044          parameter: 
1045            none
1046          return :
1047            none
1048          */
1049          void mmi_dq_sys_chg_admin_pwd(void)
1050          {
1051   1        mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
1052   1        mmi_ms_pwd_init_var();
1053   1        mmi_dq_ms_set_sys_state(SYS_STATUS_CHG_ADMIN_PWD);
1054   1        return;
1055   1      }
1056          
1057          /*
1058          parameter: 
1059            none
1060          return :
1061            none
1062          */
1063          void mmi_dq_sys_restore_lock(void)
1064          {
1065   1        unsigned char retval = 0;
1066   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK);
1067   1      
1068   1        if (RET_SUCESS != mmi_dq_fs_clr_set())
1069   1          retval = 1;
1070   1        if (RET_SUCESS != mmi_dq_fs_clr_pwd())
1071   1          retval = 1;
1072   1      #ifdef __LOCK_FP_SUPPORT__
1073   1        if (RET_SUCESS != mmi_dq_fs_clr_fp())
1074   1          retval = 1;
1075   1      #endif
1076   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
1077   1        if (RET_SUCESS != mmi_dq_fs_clr_rfid())
1078   1          retval = 1;
1079   1      #endif
1080   1      
1081   1        if (retval == 0)
1082   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1083   1        else
1084   1          mmi_dq_aud_play_with_id(AUD_ID_RESTORE_FAIL);
1085   1      
1086   1        mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1087   1        return;
1088   1      }
1089          
1090          /*
1091          parameter: 
1092            none
1093          return :
1094            none
1095          */
1096          static void mmi_dq_sys_restore_lock_con(void)
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 19  

1097          {
1098   1        mmi_dq_aud_play_with_id(AUD_ID_RESTORE_LOCK_CONTINUE_CONFIRM);
1099   1        mmi_dq_ms_set_sys_state(SYS_STATUS_RESTORE_LOCK_CON);
1100   1      }
1101          
1102          /*
1103          parameter: 
1104            none
1105          return :
1106            none
1107          */
1108          static void mmi_dq_sys_wifi_setting(void)
1109          {
1110   1        if (0 == mmi_dq_wifi_setting())
1111   1        {
1112   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1113   2          mmi_dq_sys_show_cur_menu_list();
1114   2        }
1115   1        else
1116   1        {
1117   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1118   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1119   2        }
1120   1      }
1121          
1122          /*
1123          parameter: 
1124            none
1125          return :
1126            none
1127          */
1128          static void mmi_dq_sys_wifi_airkiss_setting(void)
1129          {
1130   1        if (0 == mmi_dq_wifi_arikiss_con())
1131   1        {
1132   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1133   2          mmi_dq_sys_show_cur_menu_list();
1134   2        }
1135   1        else
1136   1        {
1137   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1138   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1139   2        }
1140   1      }
1141          
1142          /*
1143          parameter: 
1144            none
1145          return :
1146            none
1147          */
1148          static void mmi_dq_sys_wifi_code_setting(void)
1149          {
1150   1        if (0 == mmi_dq_wifi_code_con())
1151   1        {
1152   2          mmi_dq_aud_play_with_id(AUD_ID_SET_FAIL);
1153   2          mmi_dq_sys_show_cur_menu_list();
1154   2        }
1155   1        else
1156   1        {
1157   2          mmi_dq_ms_set_sys_state(SYS_STATUS_WIFI_MODE);
1158   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 20  

1159   2        }
1160   1      }
1161          
1162          typedef struct sys_menu_t
1163          {
1164            unsigned char menu_father_id;
1165            unsigned char menu_sub_id;
1166            void (*sys_menu_node_function)(void);
1167          } sys_menu_t;
1168          
1169          typedef struct sys_menu_list
1170          {
1171            unsigned char id;
1172            unsigned char menu_id;
1173          } sys_menu_list;
1174          
1175          const sys_menu_t sys_menu_tree[] =
1176            {
1177              {STR_ID_SYSTEM, STR_ID_PASSWORD, 0},
1178          #if defined(__LOCK_FP_SUPPORT__)
1179              {STR_ID_SYSTEM, STR_ID_FINGERPRINT, 0},
1180          #endif
1181          #ifdef __LOCK_RFID_CARD_SUPPORT__
1182              {STR_ID_SYSTEM, STR_ID_RF_CARD, 0},
1183          #endif
1184              {STR_ID_SYSTEM, STR_ID_ADMIN, 0},
1185              {STR_ID_SYSTEM, STR_ID_SETTING, 0},
1186              {STR_ID_SYSTEM, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1187              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_setting},
1188              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_airkiss_setting},
1189              {STR_ID_SYSTEM, STR_ID_WIFI, mmi_dq_sys_wifi_code_setting},
1190          #ifdef __LOCK_110_SUPPORT__
1191              {STR_ID_SYSTEM, STR_ID_110, 0},
1192          
1193              {STR_ID_110, STR_ID_PASSWORD_110, mmi_dq_sys_add_110_pwd},
1194          #if defined(__LOCK_FP_SUPPORT__)
1195              {STR_ID_110, STR_ID_FINGERPRINT_110, 0},
1196          #endif
1197          #endif
1198          
1199              {STR_ID_SYSTEM2, STR_ID_ADMIN, 0},
1200              {STR_ID_SYSTEM2, STR_ID_SETTING, 0},
1201              {STR_ID_SYSTEM2, STR_ID_RESTORE, mmi_dq_sys_restore_lock_con},
1202          
1203              //PWD
1204              {STR_ID_PASSWORD, STR_ID_ADD_PWD, mmi_dq_sys_add_pwd},
1205              //{STR_ID_PASSWORD,STR_ID_CHG_PWD,mmi_dq_sys_chg_pwd},
1206              {STR_ID_PASSWORD, STR_ID_DEL_PWD, mmi_dq_sys_del_pwd},
1207              {STR_ID_PASSWORD, STR_ID_CLR_PWD, mmi_dq_sys_clear_pwd},
1208          //FP
1209          #if defined(__LOCK_FP_SUPPORT__)
1210              {STR_ID_FINGERPRINT, STR_ID_ADD_FP, mmi_dq_sys_add_fp},
1211              //{STR_ID_FINGERPRINT,STR_ID_CHG_FP,mmi_dq_sys_chg_fp},
1212              {STR_ID_FINGERPRINT, STR_ID_DEL_FP, mmi_dq_sys_del_fp},
1213              {STR_ID_FINGERPRINT, STR_ID_CLR_FP, mmi_dq_sys_clear_fp},
1214          #ifdef __LOCK_110_SUPPORT__
1215              {STR_ID_FINGERPRINT_110, STR_ID_ADD_FP, mmi_dq_sys_add_110_fp},
1216              {STR_ID_FINGERPRINT_110, STR_ID_DEL_FP, mmi_dq_sys_del_110_fp},
1217          #endif
1218          #endif
1219          #ifdef __LOCK_RFID_CARD_SUPPORT__
1220              //RF
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 21  

1221              {STR_ID_RF_CARD, STR_ID_ADD_RFCARD, mmi_dq_sys_add_rf},
1222              //{STR_ID_RF_CARD,STR_ID_CHG_RFCARD,mmi_dq_sys_chg_rf},
1223              {STR_ID_RF_CARD, STR_ID_DEL_RFCARD, mmi_dq_sys_del_rf},
1224              {STR_ID_RF_CARD, STR_ID_CLR_RFCARD, mmi_dq_sys_clear_rf},
1225          #endif
1226              //admin
1227              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_PWD, mmi_dq_sys_chg_admin_pwd},
1228          #if defined(__LOCK_FP_SUPPORT__)
1229              {STR_ID_ADMIN, STR_ID_CHG_ADMIN_FP, 0},
1230              {STR_ID_CHG_ADMIN_FP, STR_ID_NO1_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No1},
1231              {STR_ID_CHG_ADMIN_FP, STR_ID_NO2_ADMIN_FP, mmi_dq_sys_chg_admin_fp_No2},
1232          #endif
1233              //setting
1234              {STR_ID_SETTING, STR_ID_PRO_AUDIO, 0},
1235              {STR_ID_SETTING, STR_ID_OPEN_MODE, 0},
1236          
1237              {STR_ID_PRO_AUDIO, STR_ID_OPEN_PRO_AUDIO, mmi_dq_sys_open_pro_sound},
1238              {STR_ID_PRO_AUDIO, STR_ID_CLOSE_PRO_AUDIO, mmi_dq_sys_close_pro_sound},
1239              {STR_ID_OPEN_MODE, STR_ID_SIN_OPEN_MODE, mmi_dq_sys_sin_open_mode},
1240              {STR_ID_OPEN_MODE, STR_ID_DBL_OPEN_MODE, mmi_dq_sys_dbl_open_mode},
1241          };
1242          
1243          static unsigned char g_dq_menu_father_id;
1244          static sys_menu_list g_dq_menu_list_id[10];
1245          static unsigned char g_dq_menu_count;
1246          
1247          /*
1248          parameter: 
1249            none
1250          return :
1251            none
1252          */
1253          void mmi_dq_sys_set_menu_father_id(unsigned char father_id)
1254          {
1255   1        g_dq_menu_father_id = father_id;
1256   1        return;
1257   1      }
1258          
1259          /*
1260          parameter: 
1261            none
1262          return :
1263            none
1264          */
1265          unsigned char mmi_dq_sys_get_menu_count(void)
1266          {
1267   1        return g_dq_menu_count;
1268   1      }
1269          
1270          /*
1271          parameter: 
1272            none
1273          return :
1274            none
1275          */
1276          static void mmi_dq_sys_get_menu_list(unsigned char father_id)
1277          {
1278   1        unsigned char i = 0, j = 0;
1279   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1280   1      
1281   1        g_dq_menu_father_id = father_id;
1282   1      
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 22  

1283   1        memset(&g_dq_menu_list_id, 0x00, sizeof(g_dq_menu_list_id));
1284   1        g_dq_menu_count = 0;
1285   1      
1286   1        for (i = 0; i < menu_tree_size; i++)
1287   1        {
1288   2          if (sys_menu_tree[i].menu_father_id == g_dq_menu_father_id)
1289   2          {
1290   3            g_dq_menu_list_id[j].id = i;
1291   3            g_dq_menu_list_id[j].menu_id = sys_menu_tree[i].menu_sub_id;
1292   3            j++;
1293   3            g_dq_menu_count++;
1294   3          }
1295   2        }
1296   1        return;
1297   1      }
1298          
1299          /*
1300          parameter: 
1301            none
1302          return :
1303            none
1304          */
1305          void mmi_dq_sys_show_cur_menu_list(void)
1306          {
1307   1        mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
1308   1      
1309   1      #ifdef __LOCK_AUDIO_SUPPORT__
1310   1        mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1311   1      #endif
1312   1      #ifdef __LOCK_FP_SUPPORT__
1313   1        mmi_dq_fp_light(FP_NONE_COLOR);
1314   1      #endif
1315   1        mmi_dq_ms_set_sys_state(SYS_STATUS_SYS_MENU);
1316   1        return;
1317   1      }
1318          
1319          /*
1320          parameter: 
1321            none
1322          return :
1323            current machine status
1324          */
1325          void mmi_dq_sys_get_pre_menu_list(void)
1326          {
1327   1        if (g_dq_menu_father_id == STR_ID_SYSTEM)
1328   1        {
1329   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1330   2        }
1331   1        else
1332   1        {
1333   2          unsigned char i = 0;
1334   2          unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1335   2      
1336   2          for (i = 0; i < menu_tree_size; i++)
1337   2          {
1338   3            if (sys_menu_tree[i].menu_sub_id == g_dq_menu_father_id)
1339   3            {
1340   4              g_dq_menu_father_id = sys_menu_tree[i].menu_father_id;
1341   4              break;
1342   4            }
1343   3          }
1344   2          mmi_dq_sys_get_menu_list(g_dq_menu_father_id);
C51 COMPILER V9.59.0.0   MMI_SYS                                                           04/07/2021 17:20:50 PAGE 23  

1345   2      #ifdef __LOCK_AUDIO_SUPPORT__
1346   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1347   2      #endif
1348   2        }
1349   1        return;
1350   1      }
1351          
1352          /*
1353          parameter: 
1354            none
1355          return :
1356            none
1357          */
1358          RET_VAL mmi_dq_sys_exe_menu_fun(unsigned char menu_id)
1359          {
1360   1        unsigned char i = 0;
1361   1        unsigned char menu_tree_size = sizeof(sys_menu_tree) / sizeof(sys_menu_t);
1362   1        if (menu_id >= g_dq_menu_count)
1363   1          return RET_FAIL;
1364   1        i = g_dq_menu_list_id[menu_id].id;
1365   1        if (sys_menu_tree[i].sys_menu_node_function != 0)
1366   1        {
1367   2          sys_menu_tree[i].sys_menu_node_function();
1368   2        }
1369   1        else
1370   1        {
1371   2          mmi_dq_sys_get_menu_list(g_dq_menu_list_id[menu_id].menu_id);
1372   2      
1373   2      #ifdef __LOCK_AUDIO_SUPPORT__
1374   2          mmi_dq_aud_play_with_id(mmi_dq_aud_get_audio_id(g_dq_menu_father_id));
1375   2      #endif
1376   2        }
1377   1      
1378   1        return RET_SUCESS;
1379   1      }
1380          
1381          #endif //__MMI_SYS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2157    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    224      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
