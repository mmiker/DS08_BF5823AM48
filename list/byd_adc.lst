C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BYD_ADC
OBJECT MODULE PLACED IN .\output\byd_adc.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE source\byd_adc.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\
                    -Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rfi
                    -d;.\mmi_inc) DEBUG PRINT(.\list\byd_adc.lst) TABS(2) OBJECT(.\output\byd_adc.obj)

line level    source

   1          /*!
   2              \file  byd_adc.c
   3              \brief adc app
   4          */
   5          
   6          /*
   7              Copyright (C) 2020 BYD
   8          
   9              2020-05-08, V1.0.0, app for byd
  10          */
  11          
  12          #include "byd_adc.h"
  13          #include "byd_init.h"
  14          #include "delay.h"
  15          #include "dqiot_gpio.h"
  16          #include "dqiot_drv.h"
  17          
  18          #if ADC_MODE == 0
              volatile bit g_bAdcIntFlag = 0;
              #endif
  21          
  22          #if ADC_HANDLE
              uint8_t xdata g_ucAdcBaseFlag = 0;
              uint8_t xdata g_ucAdcBaseline[8];
              uint8_t xdata g_ucAdcRawdata[ADC_MAX_COUNT];
              #endif
  27          
  28          /*!
  29              \brief      byd adc init
  30              \param[in]  none
  31              \param[out] none
  32              \retval     none
  33          */
  34          void byd_adc_init(void)
  35          {
  36   1      #if ADC_HANDLE
                  uint8_t i;
              #endif
  39   1      
  40   1        ADC_ADCK_SET(ADC_CLK_8M);       /* adc clock */ 
  41   1        ADC_CKV_SET(ADC_ANALOG_CLK_8M);     /* adc analog clock */
  42   1        ADC_SAMBG_SET(1);             /* sampling time sequence and comparison time interval:0~1*/
  43   1        ADC_SAMDELAY_SET(ADC_SAMPLE_TIME_8_CLK);/* sampling delay time */
  44   1        ADC_FLTER_SET(ADC_FILTER_ENABLE);       /* filter select */
  45   1        ADC_ADDR_SET(ADC_CHANNEL_7);      /* adc channel address */
  46   1        ADC_ADDR_SET(ADC_CHANNEL_6);       /* adc channel address */
  47   1        ADC_WNUM_SET(31);             /* conversion interval time:2~31*/
  48   1        ADC_I_SET(3);                   /* adc bias current select:0~3*/
  49   1        ADC_CTRL(2);                    /* compare ctrl select:0~3*/
  50   1        ADC_SAMP_SET(255);                  /* adc sample time:0~255*/    
  51   1      
  52   1        ADC_VREF_IN_SEL(ADC_VREF_IN_1);       /* input vref vol*/ 
  53   1        ADC_VREF_VOL_SEL(ADC_VREF_VOL_OUT_1);   /* output vref vol*/  
C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 2   

  54   1        ADC_VREF_SIGNAL_SEL(ADC_VREF_SIGNAL_OUT_0); /* output vref signal*/ 
  55   1      
  56   1        adc_io_reset();
  57   1      
  58   1          ADC_07_PH7_ENABLE();/*enable adc io*/
  59   1        ADC_06_PH6_ENABLE(); /*enable adc io*/
  60   1        //ADC_01_PH1_ENABLE();
  61   1      
  62   1      /*!!!!!!!!!恢复IO口功能要关闭adc通道功能!!!!!!!!!*/ 
  63   1      //  ADC_00_PH0_DISABLE();
  64   1      //  ADC_01_PH1_DISABLE();
  65   1      
  66   1        ADC_ENABLE();/*enable adc*/
  67   1      
  68   1      /* adc interrupt config*/
  69   1      #if ADC_MODE == 0
                  INT_ADC_CLR();
                ADC_IPL_SET(LOW);
                  ADC_INT_ENABLE();
              #endif
  74   1      
  75   1      #if ADC_HANDLE
                for(i = 0; i < ADC_MAX_COUNT; i++)
                {
                  g_ucAdcRawdata[i] = 0;
                }
              #endif
  81   1          ADC_DISABLE();      
  82   1      }
  83          
  84          
  85          /*!
  86              \brief      get adc data
  87              \param[in]  adc_channel_addr:
  88                  ADC_CHANNEL_0~44
  89              \param[out] none
  90              \retval     adc data
  91          */        
  92          uint16_t get_adc_data(uint8_t adc_channel_addr)
  93          {
  94   1          uint16_t adc_data;
  95   1      
  96   1        ADC_ADDR_SET(adc_channel_addr);
  97   1      
  98   1      #if ADC_MODE == 0
                g_bAdcIntFlag = 0;
                ADC_SCAN_EN;
                while(!g_bAdcIntFlag)
                {
                   WDT_CTRL = 7;
                }
              #else
 106   1        
 107   1        ADC_SCAN_EN;
 108   1        while(!(IRCON1&0x10))
 109   1        {
 110   2           WDT_CTRL = 7;  
 111   2        }
 112   1        INT_ADC_CLR();
 113   1      
 114   1      #endif
 115   1      
C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 3   

 116   1          adc_data = ((uint16_t)(ADC_RDATAH&0x0F) << 8) | (uint16_t)ADC_RDATAL;
 117   1      
 118   1        return adc_data;
 119   1      }
 120          
 121          /**
 122            * @brief  获取adc数据的平均值
 123            * @param  
 124            * adc_channel_addr ADC_CHANNEL_0~44;
 125            * times 时间ms
 126            * @return none
 127            * @note   none
 128            * @see    none
 129            */
 130          static uint16_t Get_Adc_Average(uint8_t adc_channel_addr, uint8_t times)
 131          {
 132   1        uint32_t temp_val = 0;
 133   1        uint8_t t;
 134   1        for (t = 0; t < times; t++)
 135   1        {
 136   2          temp_val += get_adc_data(adc_channel_addr);
 137   2          delay_ms(5);
 138   2        }
 139   1        return temp_val / times;
 140   1      }
 141          
 142          /**
 143            * @brief  电压计算
 144            * @param  none
 145            * @return none
 146            * @note   none
 147            * @see    none
 148            */
 149          unsigned char adc_VolT(void)
 150          {
 151   1        unsigned int adcx;
 152   1        float temp;
 153   1        ADC_ENABLE();
 154   1        gpio_bit_set(VBAT_TEST_PORT, VBAT_TEST_PIN); //开启
 155   1        delay_ms(5);
 156   1        adcx = Get_Adc_Average(ADC_CHANNEL_6, 10); //获取10ms平均值
 157   1        gpio_bit_reset(VBAT_TEST_PORT, VBAT_TEST_PIN); //关闭
 158   1        ADC_DISABLE();
 159   1        temp = (float)adcx * (3.3 / 4095); //计算电压
 160   1      
 161   1        if (temp < 1.5625)//<5v
 162   1          return 1;//mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 163   1      
 164   1        return 0;
 165   1      
 166   1      }
 167          
 168          /*!
 169              \brief      adc isr
 170              \param[in]  none
 171              \param[out] none
 172              \retval     none
 173          */
 174          #if ADC_MODE == 0
              void adc_isr(void) interrupt 11
              {
                INT_ADC_CLR();
C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 4   

                g_bAdcIntFlag = 1;
              }
              #endif
 181          
 182          #if ADC_HANDLE
              /*!
                  \brief      data sort 
                  \param[in]  buffer,count
                  \param[out] none
                  \retval     sort avedata
              */
              uint8_t byd_data_sort(uint8_t *buffer,uint8_t count)
              {
                uint8_t  i = 0,j = 0;
                uint8_t  temp  = 0;
                uint16_t average  = 0;
              
                for(i = 0; i < count; i++)
                {
                  for(j = i; j < count-1;j++ )
                  {
                    if((*(buffer+i)) >= (*(buffer+j+1)))
                    {
                      temp = (*(buffer+i));
                      (*(buffer+i)) = (*(buffer+j+1));
                      (*(buffer+j+1)) = temp;
                    }
                  }
                  
                }
                for(i = 3; i < count-3; i++)
                {
                  average += (*(buffer+i));
                }
                
                return (uint8_t)(average/(count-6));
              }
              
              /*!
                  \brief      filter adc data 
                  \param[in]  buffer: data array
                      count:  data number
                      addr: adc channel addr
                      adc_noise
                  \param[out] none
                  \retval     filter data 
              */
              uint8_t byd_adcdata(uint8_t addr)
              {
                uint8_t i = 0,j = 0;  
                uint8_t avg_cnt = 0;
              
                int adc_differ  = 0;
                uint16_t average  = 0;
              
                for(i = 0; i < ADC_MAX_COUNT; i++)
                {
                  adc_differ = (int)g_ucAdcRawdata[i] - (int)g_ucAdcBaseline[addr];
                  if(adc_differ >= 0)
                  {
                    if(adc_differ <= ADC_NOISE_THRESHOLD)
                    {
C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 5   

                      avg_cnt++;
                      average += g_ucAdcRawdata[i];
                    }
                  }
                  else
                  {
                    if(adc_differ >= -((int)ADC_NOISE_THRESHOLD))
                    {
                      avg_cnt++;
                      average += g_ucAdcRawdata[i];
                    }
                  }
                }
              
                if(avg_cnt == 0)
                {
                  g_ucAdcBaseline[addr] = byd_data_sort(g_ucAdcRawdata,ADC_MAX_COUNT);
                }
                else
                {
                  g_ucAdcBaseline[addr] = average/avg_cnt;
                }
                  
                return g_ucAdcBaseline[addr];
              }
              
              /*!
                  \brief      adc data handle 
                  \param[in]  adc channel address
                  \param[out] none
                  \retval     adc data
              */
              
              uint8_t byd_adc_handle(uint8_t adc_channel_addr)
              {
                uint8_t i;  
                
                for(i = 0;i < ADC_MAX_COUNT;i++)
                {
                  g_ucAdcRawdata[i] = (uint8_t)(get_adc_data(adc_channel_addr) >> 4);//ADC转化为8位,存储到数组对应位置处  
                  delay_ms(1);    
                }
                
                if((g_ucAdcBaseFlag & (0x01 << adc_channel_addr)) == 0)
                {
                  g_ucAdcBaseFlag |= (0x01 << adc_channel_addr);
                  g_ucAdcBaseline[adc_channel_addr] = byd_data_sort(g_ucAdcRawdata,ADC_MAX_COUNT);//冒泡排序并取中间的均值
             -作为初始上电ADC平均值
                }
                else
                {
                  g_ucAdcBaseline[adc_channel_addr] = byd_adcdata(adc_channel_addr);//获得处理后的ADC值
                }
                return g_ucAdcBaseline[adc_channel_addr]; 
              }
              #endif
 295          
 296          /*!
 297              \brief      adc work example
 298              \param[in]  none
 299              \param[out] none
 300              \retval     none
C51 COMPILER V9.59.0.0   BYD_ADC                                                           02/22/2021 17:52:59 PAGE 6   

 301          */
 302          
 303          void byd_adc_work(void)
 304          {
 305   1        uint16_t temp;
 306   1      
 307   1      #if ADC_HANDLE     
                  temp = byd_adc_handle(ADC_CHANNEL_0);
              #else
 310   1        temp = get_adc_data(ADC_CHANNEL_0);
 311   1      #endif
 312   1      }
 313          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    401    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
