C51 COMPILER V9.59.0.0   MMI_QUEUE                                                         04/21/2021 14:09:43 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_QUEUE
OBJECT MODULE PLACED IN .\output\mmi_queue.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_queue.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include
                    -;.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_
                    -rfid;.\mmi_inc) DEBUG PRINT(.\list\mmi_queue.lst) TABS(2) OBJECT(.\output\mmi_queue.obj)

line level    source

   1          #ifndef __MMI_QUEUE_C__
   2          
   3          #define __MMI_QUEUE_C__
   4          
   5          #include "mmi_queue.h"
   6          #include "dqiot_drv.h"
   7          
   8          typedef struct
   9          {
  10            Sys_MSG_Queue_M msg[QUEUE_NUM+1];//循环队列满时有一格为空
  11            unsigned char head;
  12            unsigned char end;
  13          }SYS_MSG_Queue;
  14          
  15          SYS_MSG_Queue g_msg_que;
  16          
  17          
  18          /*
  19          parameter: 
  20            none
  21          return :
  22            none
  23          */
  24          void mmi_InitQueue(void)
  25          {
  26   1        unsigned char i = 0;
  27   1        for(i=0;i<=QUEUE_NUM;i++)
  28   1        {
  29   2          g_msg_que.msg[i].que_event = QUE_EVENT_INVALID;
  30   2          g_msg_que.msg[i].que_pro = QUE_PRO_INVALID;
  31   2          g_msg_que.msg[i].que_data = 0xFF;
  32   2        }
  33   1        g_msg_que.head = 0;
  34   1        g_msg_que.end = 0;
  35   1        return;
  36   1      }
  37          
  38          /*
  39          parameter: 
  40            none
  41          return :
  42            none
  43          */
  44          static unsigned char mmi_Queue_GetNextID(unsigned char id)
  45          {
  46   1        if(id < QUEUE_NUM)
  47   1          return id + 1;
  48   1        else
  49   1          return 0;
  50   1      }
  51          
  52          /*
  53          parameter: 
C51 COMPILER V9.59.0.0   MMI_QUEUE                                                         04/21/2021 14:09:43 PAGE 2   

  54            none
  55          return :
  56            none
  57          */
  58          static unsigned char mmi_Queue_GetPreID(unsigned char id)
  59          {
  60   1        if(id > 0)
  61   1          return id - 1;
  62   1        else
  63   1          return QUEUE_NUM;
  64   1      }
  65          
  66          
  67          /*
  68          parameter: 
  69            none
  70          return :
  71            none
  72          */
  73          unsigned char mmi_QueueLength(void)
  74          {
  75   1        if(g_msg_que.head == g_msg_que.end)
  76   1          return 0;
  77   1        else if(g_msg_que.head < g_msg_que.end)
  78   1          return g_msg_que.end - g_msg_que.head;
  79   1        else
  80   1          return g_msg_que.head - g_msg_que.end + QUEUE_NUM + 1;
  81   1      }
  82          
  83          /*
  84          parameter: 
  85            none
  86          return :
  87            none
  88          */
  89          unsigned char mmi_Que_IsEmpty(void)
  90          {
  91   1        if(g_msg_que.head == g_msg_que.end)
  92   1          return 1;
  93   1        else
  94   1          return 0;
  95   1      }
  96          
  97          /*
  98          parameter: 
  99            none
 100          return :
 101            none
 102          */
 103          unsigned char mmi_Que_IsFull(void)
 104          {
 105   1        if(mmi_Queue_GetNextID(g_msg_que.end) == g_msg_que.head)
 106   1          return 1;
 107   1        else
 108   1          return 0;
 109   1      }
 110          
 111          /*
 112          parameter: 
 113            none
 114          return :
 115            none
C51 COMPILER V9.59.0.0   MMI_QUEUE                                                         04/21/2021 14:09:43 PAGE 3   

 116          */
 117          unsigned char mmi_InQueue(Sys_MSG_Queue_M que)
 118          {
 119   1        unsigned char que_len = 0;
 120   1        unsigned char i = 0;
 121   1        
 122   1        if(mmi_Que_IsFull() == 1)
 123   1          return 0;
 124   1          
 125   1        g_msg_que.msg[g_msg_que.end].que_event = que.que_event;
 126   1        g_msg_que.msg[g_msg_que.end].que_pro = que.que_pro;
 127   1        g_msg_que.msg[g_msg_que.end].que_data = que.que_data;
 128   1        g_msg_que.end = mmi_Queue_GetNextID(g_msg_que.end);
 129   1        return 1;
 130   1      }
 131          
 132          /*
 133          parameter: 
 134            none
 135          return :
 136            none
 137          */
 138          unsigned char mmi_OutQueue(Sys_MSG_Queue_M * que)
 139          {
 140   1        unsigned char que_len = 0;
 141   1        unsigned char i = 0;
 142   1      
 143   1        if(mmi_Que_IsEmpty() == 1)
 144   1          return 0;
 145   1      
 146   1        que->que_event = g_msg_que.msg[g_msg_que.head].que_event;
 147   1        que->que_pro = g_msg_que.msg[g_msg_que.head].que_pro;
 148   1        que->que_data = g_msg_que.msg[g_msg_que.head].que_data;
 149   1        g_msg_que.msg[g_msg_que.head].que_event = QUE_EVENT_INVALID;
 150   1        g_msg_que.msg[g_msg_que.head].que_pro = QUE_PRO_INVALID;
 151   1        g_msg_que.msg[g_msg_que.head].que_data = 0xFF;
 152   1        g_msg_que.head = mmi_Queue_GetNextID(g_msg_que.head);
 153   1        return 1;
 154   1      }
 155          
 156          
 157          
 158          #endif//__MMI_QUEUE_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    440    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
