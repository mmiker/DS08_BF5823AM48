C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\output\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_fps.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_fps.lst) TABS(2) OBJECT(.\output\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_FP_SUPPORT__
   6          #include "string.h"
   7          #include "mmi_fps.h"
   8          #include "dqiot_drv.h"
   9          // #include <stdio.h>
  10          
  11          unsigned char FP_oldStatus = 0;
  12          /*
  13          parameter: 
  14            current status machine
  15          return :
  16            none
  17          */
  18          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  19          //{
  20          
  21          //}
  22          
  23          /*
  24          parameter: 
  25            current status machine
  26          return :
  27            none
  28          */
  29          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  30          //{
  31          //  cb = NULL;
  32          //}
  33          
  34          /*
  35          parameter: 
  36            current status machine
  37          return :
  38            none
  39          */
  40          void mmi_dq_fp_init(void)
  41          {
  42   1        u16 waittime = 2000;
  43   1        dqiot_drv_fp_poweron();
  44   1        while (--waittime)
  45   1        {
  46   2          delay_ms(1);
  47   2          if (FP_Get_Start_Flag() == 1)
  48   2          {
  49   3            FP_Light(FP_BLUE);
  50   3            return;
  51   3          }
  52   2        }
  53   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 2   

  54   1        return;
  55   1      }
  56          
  57          /*
  58          parameter: 
  59            current status machine
  60          return :
  61            none
  62          */
  63          unsigned char mmi_dq_fp_get_fp_mode(void)
  64          {
  65   1        return 1;
  66   1      }
  67          
  68          /*
  69          parameter: 
  70            current status machine
  71          return :
  72            none
  73          */
  74          unsigned char mmi_dq_fp_get_image(void)
  75          {
  76   1        unsigned char retval = 0;
  77   1      
  78   1        retval = PS_GetImage();
  79   1        return retval;
  80   1      }
  81          
  82          /*
  83          parameter: 
  84            current status machine
  85          return :
  86            none
  87          */
  88          unsigned char mmi_dq_fp_gen_char(unsigned char id)
  89          {
  90   1        unsigned char retval = 0;
  91   1        unsigned char real_buf_id;
  92   1      
  93   1        if (id == 0)
  94   1          real_buf_id = CHAR_BUFFER1;
  95   1        else if (id == 1)
  96   1          real_buf_id = CHAR_BUFFER2;
  97   1        else if (id == 2)
  98   1          real_buf_id = CHAR_BUFFER3;
  99   1        else if (id == 3)
 100   1          real_buf_id = CHAR_BUFFER4;
 101   1      
 102   1        retval = PS_GenChar(real_buf_id); //生成特征
 103   1        return retval;
 104   1      }
 105          
 106          /*
 107          parameter: 
 108            current status machine
 109          return :
 110            none
 111          */
 112          unsigned char mmi_dq_fp_match(void)
 113          {
 114   1        unsigned char retval = 0;
 115   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 3   

 116   1        retval = PS_Match();
 117   1        return retval;
 118   1      }
 119          
 120          /*
 121          parameter: 
 122            current status machine
 123          return :
 124            none
 125          */
 126          unsigned char mmi_dq_fp_reg_module(void)
 127          {
 128   1        unsigned char retval = 0;
 129   1      
 130   1        retval = PS_RegModel();
 131   1        return retval;
 132   1      }
 133          
 134          /*
 135          parameter: 
 136            current status machine
 137          return :
 138            none
 139          */
 140          unsigned char mmi_dq_fp_store_char(unsigned char id, unsigned short index)
 141          {
 142   1        unsigned char retval = 0;
 143   1        unsigned char real_buf_id;
 144   1      
 145   1        if (id == 0)
 146   1          real_buf_id = CHAR_BUFFER1;
 147   1        else if (id == 1)
 148   1          real_buf_id = CHAR_BUFFER2;
 149   1        else if (id == 2)
 150   1          real_buf_id = CHAR_BUFFER3;
 151   1        else if (id == 3)
 152   1          real_buf_id = CHAR_BUFFER4;
 153   1      
 154   1        retval = PS_StoreChar(real_buf_id, index); //储存模板
 155   1        return retval;
 156   1      }
 157          
 158          /*
 159          parameter: 
 160            current status machine
 161          return :
 162            none
 163          */
 164          unsigned char mmi_dq_fp_delete(unsigned short index)
 165          {
 166   1        unsigned char retval = 0;
 167   1      
 168   1        retval = PS_DeletChar(index, 1);
 169   1        return retval;
 170   1      }
 171          
 172          /*
 173          parameter: 
 174            current status machine
 175          return :
 176            none
 177          */
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 4   

 178          unsigned char mmi_dq_fp_empty(void)
 179          {
 180   1        unsigned char retval = 0;
 181   1      
 182   1        retval = PS_Empty();
 183   1        return retval;
 184   1      }
 185          
 186          /*
 187          parameter: 
 188            current status machine
 189          return :
 190            none
 191          */
 192          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 193          {
 194   1        unsigned char retval = 0;
 195   1      
 196   1        retval = PS_ValidTempleteNum(count);
 197   1        return retval;
 198   1      }
 199          
 200          /*
 201          parameter: 
 202            current status machine
 203          return :
 204            none
 205          */
 206          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id, unsigned short *index)
 207          {
 208   1        unsigned char retval = 0;
 209   1        unsigned char real_buf_id;
 210   1      
 211   1        if (Buf_id == 0)
 212   1          real_buf_id = CHAR_BUFFER1;
 213   1        else if (Buf_id == 1)
 214   1          real_buf_id = CHAR_BUFFER2;
 215   1        else if (Buf_id == 2)
 216   1          real_buf_id = CHAR_BUFFER3;
 217   1        else if (Buf_id == 3)
 218   1          real_buf_id = CHAR_BUFFER4;
 219   1      
 220   1        retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 221   1        return retval;
 222   1      }
 223          
 224          /*
 225          parameter: 
 226            current status machine
 227          return :
 228            none
 229          */
 230          unsigned char mmi_dq_fp_search(unsigned char Buf_id, unsigned short *index)
 231          {
 232   1        unsigned char retval = 0;
 233   1        unsigned char real_buf_id;
 234   1      
 235   1        if (Buf_id == 0)
 236   1          real_buf_id = CHAR_BUFFER1;
 237   1        else if (Buf_id == 1)
 238   1          real_buf_id = CHAR_BUFFER2;
 239   1        else if (Buf_id == 2)
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 5   

 240   1          real_buf_id = CHAR_BUFFER3;
 241   1        else if (Buf_id == 3)
 242   1          real_buf_id = CHAR_BUFFER4;
 243   1      
 244   1        retval = PS_Search(real_buf_id, 0, 300, index);
 245   1        return retval;
 246   1      }
 247          
 248          /*
 249          parameter: 
 250            current status machine
 251          return :
 252            none
 253          */
 254          void mmi_dq_fp_light(FP_COLOR_E light_id)
 255          {
 256   1        FP_Light(light_id); //点灯
 257   1      }
 258          
 259          /*
 260          parameter: 
 261            current status machine
 262          return :
 263            none
 264          */
 265          FP_COLOR_E mmi_dq_fp_get_light(void)
 266          {
 267   1        FP_COLOR_E retval = 0;
 268   1        retval = FP_Get_Light();
 269   1        return retval;
 270   1      }
 271          
 272          /* 触摸判断 */
 273          unsigned char mmi_dq_fp_work(void)
 274          {
 275   1        if (gpio_bit_get(GPIOF, GPIO_PIN_6) == 0)
 276   1        {
 277   2          if (FP_oldStatus == 0)
 278   2          {
 279   3            FP_oldStatus = 1;
 280   3            return 1;
 281   3          }
 282   2        }
 283   1        else
 284   1          FP_oldStatus = 0;
 285   1        return 0;
 286   1      }
 287          
 288          unsigned char mmi_dq_fp_get_pin(void)
 289          {
 290   1        return gpio_bit_get(GPIOF, GPIO_PIN_6);
 291   1      }
 292          
 293          #endif //__LOCK_FP_SUPPORT__
 294          
 295          #endif //__MMI_FPC_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    466    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/12/2021 12:09:37 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
