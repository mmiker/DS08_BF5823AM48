C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\output\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_fps.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_fps.lst) TABS(2) OBJECT(.\output\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_FP_SUPPORT__
   6          #include "string.h"
   7          #include "mmi_fps.h"
   8          #include "dqiot_drv.h"
   9          // #include <stdio.h>
  10          
  11          unsigned char FP_oldStatus = 0;
  12          /*
  13          parameter: 
  14            current status machine
  15          return :
  16            none
  17          */
  18          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  19          //{
  20          
  21          //}
  22          
  23          /*
  24          parameter: 
  25            current status machine
  26          return :
  27            none
  28          */
  29          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  30          //{
  31          //  cb = NULL;
  32          //}
  33          
  34          /*
  35          parameter: 
  36            current status machine
  37          return :
  38            none
  39          */
  40          void mmi_dq_fp_init(void)
  41          {
  42   1        u16 waittime = 2000;
  43   1        dqiot_drv_fp_poweron();
  44   1        while (--waittime)
  45   1        {
  46   2          delay_ms(1);
  47   2          if (FP_Get_Start_Flag() == 1)
  48   2          {
  49   3            FP_Light(FP_BLUE);
  50   3            return;
  51   3          }
  52   2        }
  53   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 2   

  54   1        return;
  55   1      }
  56          
  57          /*
  58          parameter: 
  59            current status machine
  60          return :
  61            none
  62          */
  63          unsigned char mmi_dq_fp_get_fp_mode(void)
  64          {
  65   1        return 1;
  66   1      }
  67          
  68          /**
  69            * @brief  检测传感器
  70            * @param  none
  71            * @return 确认码(正常0x00/错误0x29)
  72            * @note   none
  73            * @see    none
  74            */
  75          unsigned char mmi_dq_fp_check_sensor(void)
  76          {
  77   1        unsigned char retval = 0;
  78   1      
  79   1        retval = PS_CheckSensor();
  80   1        return retval;
  81   1      }
  82          
  83          /**
  84            * @brief  检测手指状态
  85            * @param  none
  86            * @return 确认码
  87            * @note   none
  88            * @see    none
  89            */
  90          unsigned char mmi_dq_fp_check_finger(void)
  91          {
  92   1        unsigned char retval = 0;
  93   1      
  94   1        retval = PS_CheckFinger();
  95   1        return retval;
  96   1      }
  97          
  98          /*
  99          parameter: 
 100            current status machine
 101          return :
 102            none
 103          */
 104          unsigned char mmi_dq_fp_get_image(void)
 105          {
 106   1        unsigned char retval = 0;
 107   1      
 108   1        retval = PS_GetImage();
 109   1        return retval;
 110   1      }
 111          
 112          /*
 113          parameter: 
 114            current status machine
 115          return :
C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 3   

 116            none
 117          */
 118          unsigned char mmi_dq_fp_gen_char(unsigned char id)
 119          {
 120   1        unsigned char retval = 0;
 121   1        unsigned char real_buf_id;
 122   1      
 123   1        if (id == 0)
 124   1          real_buf_id = CHAR_BUFFER1;
 125   1        else if (id == 1)
 126   1          real_buf_id = CHAR_BUFFER2;
 127   1        else if (id == 2)
 128   1          real_buf_id = CHAR_BUFFER3;
 129   1        else if (id == 3)
 130   1          real_buf_id = CHAR_BUFFER4;
 131   1      
 132   1        retval = PS_GenChar(real_buf_id); //生成特征
 133   1        return retval;
 134   1      }
 135          
 136          /*
 137          parameter: 
 138            current status machine
 139          return :
 140            none
 141          */
 142          unsigned char mmi_dq_fp_match(void)
 143          {
 144   1        unsigned char retval = 0;
 145   1      
 146   1        retval = PS_Match();
 147   1        return retval;
 148   1      }
 149          
 150          /*
 151          parameter: 
 152            current status machine
 153          return :
 154            none
 155          */
 156          unsigned char mmi_dq_fp_reg_module(void)
 157          {
 158   1        unsigned char retval = 0;
 159   1      
 160   1        retval = PS_RegModel();
 161   1        return retval;
 162   1      }
 163          
 164          /*
 165          parameter: 
 166            current status machine
 167          return :
 168            none
 169          */
 170          unsigned char mmi_dq_fp_store_char(unsigned char id, unsigned short index)
 171          {
 172   1        unsigned char retval = 0;
 173   1        unsigned char real_buf_id;
 174   1      
 175   1        if (id == 0)
 176   1          real_buf_id = CHAR_BUFFER1;
 177   1        else if (id == 1)
C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 4   

 178   1          real_buf_id = CHAR_BUFFER2;
 179   1        else if (id == 2)
 180   1          real_buf_id = CHAR_BUFFER3;
 181   1        else if (id == 3)
 182   1          real_buf_id = CHAR_BUFFER4;
 183   1      
 184   1        retval = PS_StoreChar(real_buf_id, index); //储存模板
 185   1        return retval;
 186   1      }
 187          
 188          /*
 189          parameter: 
 190            current status machine
 191          return :
 192            none
 193          */
 194          unsigned char mmi_dq_fp_delete(unsigned short index)
 195          {
 196   1        unsigned char retval = 0;
 197   1      
 198   1        retval = PS_DeletChar(index, 1);
 199   1        return retval;
 200   1      }
 201          
 202          /*
 203          parameter: 
 204            current status machine
 205          return :
 206            none
 207          */
 208          unsigned char mmi_dq_fp_empty(void)
 209          {
 210   1        unsigned char retval = 0;
 211   1      
 212   1        retval = PS_Empty();
 213   1        return retval;
 214   1      }
 215          
 216          /*
 217          parameter: 
 218            current status machine
 219          return :
 220            none
 221          */
 222          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 223          {
 224   1        unsigned char retval = 0;
 225   1      
 226   1        retval = PS_ValidTempleteNum(count);
 227   1        return retval;
 228   1      }
 229          
 230          /*
 231          parameter: 
 232            current status machine
 233          return :
 234            none
 235          */
 236          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id, unsigned short *index)
 237          {
 238   1        unsigned char retval = 0;
 239   1        unsigned char real_buf_id;
C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 5   

 240   1      
 241   1        if (Buf_id == 0)
 242   1          real_buf_id = CHAR_BUFFER1;
 243   1        else if (Buf_id == 1)
 244   1          real_buf_id = CHAR_BUFFER2;
 245   1        else if (Buf_id == 2)
 246   1          real_buf_id = CHAR_BUFFER3;
 247   1        else if (Buf_id == 3)
 248   1          real_buf_id = CHAR_BUFFER4;
 249   1      
 250   1        // retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 251   1        retval = PS_Search(real_buf_id, 0, 300, index);
 252   1        return retval;
 253   1      }
 254          
 255          /*
 256          parameter: 
 257            current status machine
 258          return :
 259            none
 260          */
 261          unsigned char mmi_dq_fp_search(unsigned char Buf_id, unsigned short *index)
 262          {
 263   1        unsigned char retval = 0;
 264   1        unsigned char real_buf_id;
 265   1      
 266   1        if (Buf_id == 0)
 267   1          real_buf_id = CHAR_BUFFER1;
 268   1        else if (Buf_id == 1)
 269   1          real_buf_id = CHAR_BUFFER2;
 270   1        else if (Buf_id == 2)
 271   1          real_buf_id = CHAR_BUFFER3;
 272   1        else if (Buf_id == 3)
 273   1          real_buf_id = CHAR_BUFFER4;
 274   1      
 275   1        retval = PS_Search(real_buf_id, 0, 300, index);
 276   1        return retval;
 277   1      }
 278          
 279          /*
 280          parameter: 
 281            current status machine
 282          return :
 283            none
 284          */
 285          void mmi_dq_fp_light(FP_COLOR_E light_id)
 286          {
 287   1        FP_Light(light_id); //点灯
 288   1      }
 289          
 290          /*
 291          parameter: 
 292            current status machine
 293          return :
 294            none
 295          */
 296          FP_COLOR_E mmi_dq_fp_get_light(void)
 297          {
 298   1        FP_COLOR_E retval = 0;
 299   1        retval = FP_Get_Light();
 300   1        return retval;
 301   1      }
C51 COMPILER V9.59.0.0   MMI_FPS                                                           04/19/2021 10:41:15 PAGE 6   

 302          
 303          /* 触摸判断 */
 304          unsigned char mmi_dq_fp_work(void)
 305          {
 306   1        if (gpio_bit_get(GPIOF, GPIO_PIN_6) == 1)
 307   1        {
 308   2          if (FP_oldStatus == 0)
 309   2          {
 310   3            FP_oldStatus = 1;
 311   3            return 1;
 312   3          }
 313   2        }
 314   1        else
 315   1          FP_oldStatus = 0;
 316   1        return 0;
 317   1      }
 318          
 319          unsigned char mmi_dq_fp_get_pin(void)
 320          {
 321   1        return gpio_bit_get(GPIOF, GPIO_PIN_6);
 322   1      }
 323          
 324          #endif //__LOCK_FP_SUPPORT__
 325          
 326          #endif //__MMI_FPC_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    478    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
