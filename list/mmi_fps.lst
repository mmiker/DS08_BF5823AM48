C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\output\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_fps.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_fps.lst) TABS(2) OBJECT(.\output\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_FP_SUPPORT__
   6          #include "string.h"
   7          #include "mmi_fps.h"
   8          #include "dqiot_drv.h"
   9          #include "delay.h"
  10          
  11          unsigned char FP_oldStatus = 0;
  12          /*
  13          parameter: 
  14            current status machine
  15          return :
  16            none
  17          */
  18          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  19          //{
  20          
  21          //}
  22          
  23          /*
  24          parameter: 
  25            current status machine
  26          return :
  27            none
  28          */
  29          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  30          //{
  31          //  cb = NULL;
  32          //}
  33          
  34          /*
  35          parameter: 
  36            current status machine
  37          return :
  38            none
  39          */
  40          void mmi_dq_fp_init(void)
  41          {
  42   1        u16 waittime = 2000;
  43   1        dqiot_drv_uart0B_init();
  44   1        dqiot_drv_fp_poweron();
  45   1      
  46   1      #if __Normal_handling__
                while (--waittime)
                {
                  delay_ms(1);
                  if (FP_Get_Start_Flag() == 1)
                  {
                    FP_Light(FP_BLUE);
                    return;
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 2   

                  }
                }
              #else
  57   1        FP_Light(FP_BLUE);
  58   1      #endif
  59   1      
  60   1        return;
  61   1      }
  62          
  63          /*
  64          parameter: 
  65            current status machine
  66          return :
  67            none
  68          */
  69          unsigned char mmi_dq_fp_get_fp_mode(void)
  70          {
  71   1        return 1;
  72   1      }
  73          
  74          /*
  75          parameter: 
  76            current status machine
  77          return :
  78            none
  79          */
  80          unsigned char mmi_dq_fp_get_image(void)
  81          {
  82   1        unsigned char retval = 0;
  83   1      
  84   1        retval = PS_GetImage();
  85   1        return retval;
  86   1      }
  87          
  88          /*
  89          parameter: 
  90            current status machine
  91          return :
  92            none
  93          */
  94          unsigned char mmi_dq_fp_gen_char(unsigned char id)
  95          {
  96   1        unsigned char retval = 0;
  97   1        unsigned char real_buf_id;
  98   1      
  99   1        if (id == 0)
 100   1          real_buf_id = CHAR_BUFFER1;
 101   1        else if (id == 1)
 102   1          real_buf_id = CHAR_BUFFER2;
 103   1        else if (id == 2)
 104   1          real_buf_id = CHAR_BUFFER3;
 105   1        else if (id == 3)
 106   1          real_buf_id = CHAR_BUFFER4;
 107   1      
 108   1        retval = PS_GenChar(real_buf_id); //��������
 109   1        return retval;
 110   1      }
 111          
 112          /*
 113          parameter: 
 114            current status machine
 115          return :
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 3   

 116            none
 117          */
 118          unsigned char mmi_dq_fp_match(void)
 119          {
 120   1        unsigned char retval = 0;
 121   1      
 122   1        retval = PS_Match();
 123   1        return retval;
 124   1      }
 125          
 126          /*
 127          parameter: 
 128            current status machine
 129          return :
 130            none
 131          */
 132          unsigned char mmi_dq_fp_reg_module(void)
 133          {
 134   1        unsigned char retval = 0;
 135   1      
 136   1        retval = PS_RegModel();
 137   1        return retval;
 138   1      }
 139          
 140          /*
 141          parameter: 
 142            current status machine
 143          return :
 144            none
 145          */
 146          unsigned char mmi_dq_fp_store_char(unsigned char id, unsigned short index)
 147          {
 148   1        unsigned char retval = 0;
 149   1        unsigned char real_buf_id;
 150   1      
 151   1        if (id == 0)
 152   1          real_buf_id = CHAR_BUFFER1;
 153   1        else if (id == 1)
 154   1          real_buf_id = CHAR_BUFFER2;
 155   1        else if (id == 2)
 156   1          real_buf_id = CHAR_BUFFER3;
 157   1        else if (id == 3)
 158   1          real_buf_id = CHAR_BUFFER4;
 159   1      
 160   1        retval = PS_StoreChar(real_buf_id, index); //����ģ��
 161   1        return retval;
 162   1      }
 163          
 164          /*
 165          parameter: 
 166            current status machine
 167          return :
 168            none
 169          */
 170          unsigned char mmi_dq_fp_delete(unsigned short index)
 171          {
 172   1        unsigned char retval = 0;
 173   1      
 174   1        retval = PS_DeletChar(index, 1);
 175   1        return retval;
 176   1      }
 177          
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 4   

 178          /*
 179          parameter: 
 180            current status machine
 181          return :
 182            none
 183          */
 184          unsigned char mmi_dq_fp_empty(void)
 185          {
 186   1        unsigned char retval = 0;
 187   1      
 188   1        retval = PS_Empty();
 189   1        return retval;
 190   1      }
 191          
 192          /*
 193          parameter: 
 194            current status machine
 195          return :
 196            none
 197          */
 198          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 199          {
 200   1        unsigned char retval = 0;
 201   1      
 202   1        retval = PS_ValidTempleteNum(count);
 203   1        return retval;
 204   1      }
 205          
 206          /*
 207          parameter: 
 208            current status machine
 209          return :
 210            none
 211          */
 212          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id, unsigned short *index)
 213          {
 214   1        unsigned char retval = 0;
 215   1        unsigned char real_buf_id;
 216   1      
 217   1        if (Buf_id == 0)
 218   1          real_buf_id = CHAR_BUFFER1;
 219   1        else if (Buf_id == 1)
 220   1          real_buf_id = CHAR_BUFFER2;
 221   1        else if (Buf_id == 2)
 222   1          real_buf_id = CHAR_BUFFER3;
 223   1        else if (Buf_id == 3)
 224   1          real_buf_id = CHAR_BUFFER4;
 225   1        retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 226   1        return retval;
 227   1      }
 228          
 229          /*
 230          parameter: 
 231            current status machine
 232          return :
 233            none
 234          */
 235          unsigned char mmi_dq_fp_search(unsigned char Buf_id, unsigned short *index)
 236          {
 237   1        unsigned char retval = 0;
 238   1        unsigned char real_buf_id;
 239   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 5   

 240   1        if (Buf_id == 0)
 241   1          real_buf_id = CHAR_BUFFER1;
 242   1        else if (Buf_id == 1)
 243   1          real_buf_id = CHAR_BUFFER2;
 244   1        else if (Buf_id == 2)
 245   1          real_buf_id = CHAR_BUFFER3;
 246   1        else if (Buf_id == 3)
 247   1          real_buf_id = CHAR_BUFFER4;
 248   1      
 249   1        retval = PS_Search(real_buf_id, 0, 300, index);
 250   1        return retval;
 251   1      }
 252          
 253          /*
 254          parameter: 
 255            current status machine
 256          return :
 257            none
 258          */
 259          void mmi_dq_fp_light(FP_COLOR_E light_id)
 260          {
 261   1        FP_Light(light_id); //���
 262   1      }
 263          
 264          /*
 265          parameter: 
 266            current status machine
 267          return :
 268            none
 269          */
 270          FP_COLOR_E mmi_dq_fp_get_light(void)
 271          {
 272   1        FP_COLOR_E retval = 0;
 273   1        retval = FP_Get_Light();
 274   1        return retval;
 275   1      }
 276          
 277          /* �����ж� */
 278          unsigned char mmi_dq_fp_work(void)
 279          {
 280   1        if (gpio_bit_get(GPIOF, GPIO_PIN_6) == 0)
 281   1        {
 282   2          if (FP_oldStatus == 0)
 283   2          {
 284   3            FP_oldStatus = 1;
 285   3            return 1;
 286   3          }
 287   2        }
 288   1        else
 289   1          FP_oldStatus = 0;
 290   1        return 0;
 291   1      }
 292          
 293          unsigned char mmi_dq_fp_get_pin(void)
 294          {
 295   1        return gpio_bit_get(GPIOF, GPIO_PIN_6);
 296   1      }
 297          
 298          #endif //__LOCK_FP_SUPPORT__
 299          
 300          #endif //__MMI_FPC_C__

C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/06/2021 16:17:11 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
