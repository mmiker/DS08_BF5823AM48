C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\output\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_fps.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_fps.lst) TABS(2) OBJECT(.\output\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_FP_SUPPORT__
   6          #include "string.h"
   7          #include "mmi_fps.h"
   8          #include "dqiot_drv.h"
   9          #include "delay.h"
  10          
  11          unsigned char FP_oldStatus = 0;
  12          /*
  13          parameter: 
  14            current status machine
  15          return :
  16            none
  17          */
  18          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  19          //{
  20          
  21          //}
  22          
  23          /*
  24          parameter: 
  25            current status machine
  26          return :
  27            none
  28          */
  29          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  30          //{
  31          //  cb = NULL;
  32          //}
  33          
  34          /*
  35          parameter: 
  36            current status machine
  37          return :
  38            none
  39          */
  40          void mmi_dq_fp_init(void)
  41          {
  42   1        u16 waittime = 2000;
  43   1        dqiot_drv_uart0B_init();
  44   1        dqiot_drv_fp_poweron();
  45   1      
  46   1      #if __Normal_handling__
                while (--waittime)
                {
                  delay_ms(1);
                  if (FP_Get_Start_Flag() == 1)
                  {
                    FP_Light(FP_BLUE);
                    return;
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 2   

                  }
                }
              #else
  57   1        delay_ms(10);
  58   1        FP_Light(FP_BLUE);
  59   1      #endif
  60   1      
  61   1        return;
  62   1      }
  63          
  64          /*
  65          parameter: 
  66            current status machine
  67          return :
  68            none
  69          */
  70          unsigned char mmi_dq_fp_get_fp_mode(void)
  71          {
  72   1        return 1;
  73   1      }
  74          
  75          /*
  76          parameter: 
  77            current status machine
  78          return :
  79            none
  80          */
  81          unsigned char mmi_dq_fp_get_image(void)
  82          {
  83   1        unsigned char retval = 0;
  84   1      
  85   1        retval = PS_GetImage();
  86   1        return retval;
  87   1      }
  88          
  89          /*
  90          parameter: 
  91            current status machine
  92          return :
  93            none
  94          */
  95          unsigned char mmi_dq_fp_gen_char(unsigned char id)
  96          {
  97   1        unsigned char retval = 0;
  98   1        unsigned char real_buf_id;
  99   1      
 100   1        if (id == 0)
 101   1          real_buf_id = CHAR_BUFFER1;
 102   1        else if (id == 1)
 103   1          real_buf_id = CHAR_BUFFER2;
 104   1        else if (id == 2)
 105   1          real_buf_id = CHAR_BUFFER3;
 106   1        else if (id == 3)
 107   1          real_buf_id = CHAR_BUFFER4;
 108   1      
 109   1        retval = PS_GenChar(real_buf_id); //Éú³ÉÌØÕ÷
 110   1        return retval;
 111   1      }
 112          
 113          /*
 114          parameter: 
 115            current status machine
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 3   

 116          return :
 117            none
 118          */
 119          unsigned char mmi_dq_fp_match(void)
 120          {
 121   1        unsigned char retval = 0;
 122   1      
 123   1        retval = PS_Match();
 124   1        return retval;
 125   1      }
 126          
 127          /*
 128          parameter: 
 129            current status machine
 130          return :
 131            none
 132          */
 133          unsigned char mmi_dq_fp_reg_module(void)
 134          {
 135   1        unsigned char retval = 0;
 136   1      
 137   1        retval = PS_RegModel();
 138   1        return retval;
 139   1      }
 140          
 141          /*
 142          parameter: 
 143            current status machine
 144          return :
 145            none
 146          */
 147          unsigned char mmi_dq_fp_store_char(unsigned char id, unsigned short index)
 148          {
 149   1        unsigned char retval = 0;
 150   1        unsigned char real_buf_id;
 151   1      
 152   1        if (id == 0)
 153   1          real_buf_id = CHAR_BUFFER1;
 154   1        else if (id == 1)
 155   1          real_buf_id = CHAR_BUFFER2;
 156   1        else if (id == 2)
 157   1          real_buf_id = CHAR_BUFFER3;
 158   1        else if (id == 3)
 159   1          real_buf_id = CHAR_BUFFER4;
 160   1      
 161   1        retval = PS_StoreChar(real_buf_id, index); //´¢´æÄ£°å
 162   1        return retval;
 163   1      }
 164          
 165          /*
 166          parameter: 
 167            current status machine
 168          return :
 169            none
 170          */
 171          unsigned char mmi_dq_fp_delete(unsigned short index)
 172          {
 173   1        unsigned char retval = 0;
 174   1      
 175   1        retval = PS_DeletChar(index, 1);
 176   1        return retval;
 177   1      }
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 4   

 178          
 179          /*
 180          parameter: 
 181            current status machine
 182          return :
 183            none
 184          */
 185          unsigned char mmi_dq_fp_empty(void)
 186          {
 187   1        unsigned char retval = 0;
 188   1      
 189   1        retval = PS_Empty();
 190   1        return retval;
 191   1      }
 192          
 193          /*
 194          parameter: 
 195            current status machine
 196          return :
 197            none
 198          */
 199          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 200          {
 201   1        unsigned char retval = 0;
 202   1      
 203   1        retval = PS_ValidTempleteNum(count);
 204   1        return retval;
 205   1      }
 206          
 207          /*
 208          parameter: 
 209            current status machine
 210          return :
 211            none
 212          */
 213          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id, unsigned short *index)
 214          {
 215   1        unsigned char retval = 0;
 216   1        unsigned char real_buf_id;
 217   1      
 218   1        if (Buf_id == 0)
 219   1          real_buf_id = CHAR_BUFFER1;
 220   1        else if (Buf_id == 1)
 221   1          real_buf_id = CHAR_BUFFER2;
 222   1        else if (Buf_id == 2)
 223   1          real_buf_id = CHAR_BUFFER3;
 224   1        else if (Buf_id == 3)
 225   1          real_buf_id = CHAR_BUFFER4;
 226   1        retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 227   1        return retval;
 228   1      }
 229          
 230          /*
 231          parameter: 
 232            current status machine
 233          return :
 234            none
 235          */
 236          unsigned char mmi_dq_fp_search(unsigned char Buf_id, unsigned short *index)
 237          {
 238   1        unsigned char retval = 0;
 239   1        unsigned char real_buf_id;
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 5   

 240   1      
 241   1        if (Buf_id == 0)
 242   1          real_buf_id = CHAR_BUFFER1;
 243   1        else if (Buf_id == 1)
 244   1          real_buf_id = CHAR_BUFFER2;
 245   1        else if (Buf_id == 2)
 246   1          real_buf_id = CHAR_BUFFER3;
 247   1        else if (Buf_id == 3)
 248   1          real_buf_id = CHAR_BUFFER4;
 249   1      
 250   1        retval = PS_Search(real_buf_id, 0, 300, index);
 251   1        return retval;
 252   1      }
 253          
 254          /*
 255          parameter: 
 256            current status machine
 257          return :
 258            none
 259          */
 260          void mmi_dq_fp_light(FP_COLOR_E light_id)
 261          {
 262   1        FP_Light(light_id); //µãµÆ
 263   1      }
 264          
 265          /*
 266          parameter: 
 267            current status machine
 268          return :
 269            none
 270          */
 271          FP_COLOR_E mmi_dq_fp_get_light(void)
 272          {
 273   1        FP_COLOR_E retval = 0;
 274   1        retval = FP_Get_Light();
 275   1        return retval;
 276   1      }
 277          
 278          /* ´¥ÃþÅÐ¶Ï */
 279          unsigned char mmi_dq_fp_work(void)
 280          {
 281   1        if (gpio_bit_get(GPIOF, GPIO_PIN_6) == 0)
 282   1        {
 283   2          if (FP_oldStatus == 0)
 284   2          {
 285   3            FP_oldStatus = 1;
 286   3            return 1;
 287   3          }
 288   2        }
 289   1        else
 290   1          FP_oldStatus = 0;
 291   1        return 0;
 292   1      }
 293          
 294          unsigned char mmi_dq_fp_get_pin(void)
 295          {
 296   1        return gpio_bit_get(GPIOF, GPIO_PIN_6);
 297   1      }
 298          
 299          #endif //__LOCK_FP_SUPPORT__
 300          
 301          #endif //__MMI_FPC_C__
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/01/2021 18:11:29 PAGE 6   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    446    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
