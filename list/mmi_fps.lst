C51 COMPILER V9.59.0.0   MMI_FPS                                                           02/22/2021 17:53:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\output\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_fps.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rf
                    -id;.\mmi_inc) DEBUG PRINT(.\list\mmi_fps.lst) TABS(2) OBJECT(.\output\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "string.h"
   5          #include "mmi_fps.h"
   6          #include "mmi_feature.h"
   7          #include "dqiot_drv.h"
   8          
   9          #ifdef __LOCK_FP_SUPPORT__
  10          unsigned char FP_oldStatus = 0;
  11          /*
  12          parameter: 
  13            current status machine
  14          return :
  15            none
  16          */
  17          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  18          //{
  19          
  20          //}
  21          
  22          /*
  23          parameter: 
  24            current status machine
  25          return :
  26            none
  27          */
  28          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  29          //{
  30          //  cb = NULL;
  31          //}
  32          
  33          /*
  34          parameter: 
  35            current status machine
  36          return :
  37            none
  38          */
  39          void mmi_dq_fp_init(void)
  40          {
  41   1        dqiot_drv_uart0B_init();
  42   1        dqiot_drv_fp_poweron();
  43   1      
  44   1        return;
  45   1      }
  46          
  47          /*
  48          parameter: 
  49            current status machine
  50          return :
  51            none
  52          */
  53          unsigned char mmi_dq_fp_get_fp_mode(void)
C51 COMPILER V9.59.0.0   MMI_FPS                                                           02/22/2021 17:53:06 PAGE 2   

  54          {
  55   1        return 1;
  56   1      }
  57          
  58          /*
  59          parameter: 
  60            current status machine
  61          return :
  62            none
  63          */
  64          unsigned char mmi_dq_fp_get_image(void)
  65          {
  66   1        unsigned char retval = 0;
  67   1      
  68   1        retval = PS_GetImage();
  69   1        return retval;
  70   1      }
  71          
  72          /*
  73          parameter: 
  74            current status machine
  75          return :
  76            none
  77          */
  78          unsigned char mmi_dq_fp_gen_char(unsigned char id)
  79          {
  80   1        unsigned char retval = 0;
  81   1        unsigned char real_buf_id;
  82   1      
  83   1        if (id == 0)
  84   1          real_buf_id = CHAR_BUFFER1;
  85   1        else if (id == 1)
  86   1          real_buf_id = CHAR_BUFFER2;
  87   1        else if (id == 2)
  88   1          real_buf_id = CHAR_BUFFER3;
  89   1        else if (id == 3)
  90   1          real_buf_id = CHAR_BUFFER4;
  91   1      
  92   1        retval = PS_GenChar(real_buf_id); //Éú³ÉÌØÕ÷
  93   1        return retval;
  94   1      }
  95          
  96          /*
  97          parameter: 
  98            current status machine
  99          return :
 100            none
 101          */
 102          unsigned char mmi_dq_fp_match(void)
 103          {
 104   1        unsigned char retval = 0;
 105   1      
 106   1        retval = PS_Match();
 107   1        return retval;
 108   1      }
 109          
 110          /*
 111          parameter: 
 112            current status machine
 113          return :
 114            none
 115          */
C51 COMPILER V9.59.0.0   MMI_FPS                                                           02/22/2021 17:53:06 PAGE 3   

 116          unsigned char mmi_dq_fp_reg_module(void)
 117          {
 118   1        unsigned char retval = 0;
 119   1      
 120   1        retval = PS_RegModel();
 121   1        return retval;
 122   1      }
 123          
 124          /*
 125          parameter: 
 126            current status machine
 127          return :
 128            none
 129          */
 130          unsigned char mmi_dq_fp_store_char(unsigned char id, unsigned short index)
 131          {
 132   1        unsigned char retval = 0;
 133   1        unsigned char real_buf_id;
 134   1      
 135   1        if (id == 0)
 136   1          real_buf_id = CHAR_BUFFER1;
 137   1        else if (id == 1)
 138   1          real_buf_id = CHAR_BUFFER2;
 139   1        else if (id == 2)
 140   1          real_buf_id = CHAR_BUFFER3;
 141   1        else if (id == 3)
 142   1          real_buf_id = CHAR_BUFFER4;
 143   1      
 144   1        retval = PS_StoreChar(real_buf_id, index); //´¢´æÄ£°å
 145   1        return retval;
 146   1      }
 147          
 148          /*
 149          parameter: 
 150            current status machine
 151          return :
 152            none
 153          */
 154          unsigned char mmi_dq_fp_delete(unsigned short index)
 155          {
 156   1        unsigned char retval = 0;
 157   1      
 158   1        retval = PS_DeletChar(index, 1);
 159   1        return retval;
 160   1      }
 161          
 162          /*
 163          parameter: 
 164            current status machine
 165          return :
 166            none
 167          */
 168          unsigned char mmi_dq_fp_empty(void)
 169          {
 170   1        unsigned char retval = 0;
 171   1      
 172   1        retval = PS_Empty();
 173   1        return retval;
 174   1      }
 175          
 176          /*
 177          parameter: 
C51 COMPILER V9.59.0.0   MMI_FPS                                                           02/22/2021 17:53:06 PAGE 4   

 178            current status machine
 179          return :
 180            none
 181          */
 182          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 183          {
 184   1        unsigned char retval = 0;
 185   1      
 186   1        retval = PS_ValidTempleteNum(count);
 187   1        return retval;
 188   1      }
 189          
 190          /*
 191          parameter: 
 192            current status machine
 193          return :
 194            none
 195          */
 196          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id, unsigned short *index)
 197          {
 198   1        unsigned char retval = 0;
 199   1        unsigned char real_buf_id;
 200   1      
 201   1        if (Buf_id == 0)
 202   1          real_buf_id = CHAR_BUFFER1;
 203   1        else if (Buf_id == 1)
 204   1          real_buf_id = CHAR_BUFFER2;
 205   1        else if (Buf_id == 2)
 206   1          real_buf_id = CHAR_BUFFER3;
 207   1        else if (Buf_id == 3)
 208   1          real_buf_id = CHAR_BUFFER4;
 209   1        retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 210   1        return retval;
 211   1      }
 212          
 213          /*
 214          parameter: 
 215            current status machine
 216          return :
 217            none
 218          */
 219          unsigned char mmi_dq_fp_search(unsigned char Buf_id, unsigned short *index)
 220          {
 221   1        unsigned char retval = 0;
 222   1        unsigned char real_buf_id;
 223   1      
 224   1        if (Buf_id == 0)
 225   1          real_buf_id = CHAR_BUFFER1;
 226   1        else if (Buf_id == 1)
 227   1          real_buf_id = CHAR_BUFFER2;
 228   1        else if (Buf_id == 2)
 229   1          real_buf_id = CHAR_BUFFER3;
 230   1        else if (Buf_id == 3)
 231   1          real_buf_id = CHAR_BUFFER4;
 232   1      
 233   1        retval = PS_Search(real_buf_id, 0, 300, index);
 234   1        return retval;
 235   1      }
 236          
 237          /*
 238          parameter: 
 239            current status machine
C51 COMPILER V9.59.0.0   MMI_FPS                                                           02/22/2021 17:53:06 PAGE 5   

 240          return :
 241            none
 242          */
 243          void mmi_dq_fp_light(FP_COLOR_E light_id)
 244          {
 245   1        FP_Light(light_id); //µãµÆ
 246   1      }
 247          
 248          /*
 249          parameter: 
 250            current status machine
 251          return :
 252            none
 253          */
 254          FP_COLOR_E mmi_dq_fp_get_light(void)
 255          {
 256   1        FP_COLOR_E retval = 0;
 257   1        retval = FP_Get_Light();
 258   1        return retval;
 259   1      }
 260          
 261          /* ´¥ÃþÅÐ¶Ï */
 262          unsigned char mmi_dq_fp_work(void)
 263          {
 264   1        if (gpio_bit_get(GPIOF, GPIO_PIN_6) == 0)
 265   1        {
 266   2          if (FP_oldStatus == 0)
 267   2          {
 268   3            FP_oldStatus = 1;
 269   3            return 1;
 270   3          }
 271   2        }
 272   1        else
 273   1          FP_oldStatus = 0;
 274   1        return 0;
 275   1      }
 276          
 277          unsigned char mmi_dq_fp_get_pin(void)
 278          {
 279   1        return gpio_bit_get(GPIOF, GPIO_PIN_6);
 280   1      }
 281          
 282          #endif //__LOCK_FP_SUPPORT__
 283          
 284          #endif //__MMI_FPC_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    424    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
