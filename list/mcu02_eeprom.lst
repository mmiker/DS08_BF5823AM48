C51 COMPILER V9.59.0.0   MCU02_EEPROM                                                      04/19/2021 17:34:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCU02_EEPROM
OBJECT MODULE PLACED IN .\output\mcu02_eeprom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Library\byd_standard_peripheral\source\mcu02_eeprom.c LARGE OMF2 OPTIMIZ
                    -E(8,SPEED) BROWSE INCDIR(.\include;.\Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mif
                    -are\include;.\byd_tool_comm;.\byd_rfid;.\mmi_inc) DEBUG PRINT(.\list\mcu02_eeprom.lst) TABS(2) OBJECT(.\output\mcu02_eep
                    -rom.obj)

line level    source

   1          /*!
   2              \file  mcu02_eeprom.c
   3              \brief eeprom driver
   4          */
   5          
   6          /*
   7              Copyright (C) 2020 BYD
   8          
   9              2020-07-16, V1.0.0, firmware for mcu02
  10          */
  11          
  12          #include "mcu02_eeprom.h"
  13          
  14          /*!
  15              \brief      select eeprom
  16              \param[in]  select:
  17                        0: x*1024byte,select last xK 0f main_block as eeprom,x = CFG_EEPROM_SEL(0~31)
  18                  1: 2*512byte,select NVR3,NVR4 as eeprom
  19              \param[out] none
  20              \retval     none
  21          */
  22          void eeprom_select(uint8_t select)
  23          {
  24   1          EEPROM_SELECT(select);
  25   1      }
  26          
  27          /*!
  28              \brief      erase time
  29              \param[in]  erase_time:0~9(0.5*(erase_time+1)ms+0.0652ms)
  30                             >9(4.5652ms) EEPROM_SELECT(0)
  31                  erase_time:0~9((erase_time+1)ms+0.1304ms)
  32                             >9(9.1304ms) EEPROM_SELECT(1)
  33              \param[out] none
  34              \retval     none
  35          */
  36          void eeprom_erase_time(uint8_t erase_time)
  37          {
  38   1          SPROG_TIM = (0x1f&erase_time);
  39   1      }
  40          
  41          /*!
  42              \brief      erase page
  43              \param[in]  page:0~x(EEPROM_SELECT(0),x = CFG_EEPROM_SEL(0~31)) 
  44                             0~1(EEPROM_SELECT(1))
  45              \param[out] none
  46              \retval     none
  47          */
  48          void eeprom_erase_page(uint8_t page)
  49          {
  50   1        EA = 0;
  51   1        SPROG_ADDR_L = 0x00;
  52   1        SPROG_ADDR_H = 0x00;
C51 COMPILER V9.59.0.0   MCU02_EEPROM                                                      04/19/2021 17:34:45 PAGE 2   

  53   1        SPROG_ADDR_H |= (page<<2);
  54   1        SPROG_CMD = 0x96;
  55   1        _nop_();
  56   1        _nop_();
  57   1        _nop_();
  58   1        _nop_();
  59   1        SPROG_ADDR_L = 0x00;
  60   1        SPROG_ADDR_H = 0x00;
  61   1        EA = 1;
  62   1      }
  63          
  64          /*!
  65              \brief      eeprom read byte
  66              \param[in]  page:0~x(EEPROM_SELECT(0),x = CFG_EEPROM_SEL(0~31))
  67                  addr:0~0x3ff
  68              \param[out] none
  69              \retval     data
  70          */
  71          uint8_t eeprom_read_byte(uint8_t page,uint16_t addr)
  72          { 
  73   1        uint8_t code *P_Rank;
  74   1        P_Rank = 0xFC00 - ((uint16_t)page<<10); 
  75   1        return (*(P_Rank + addr));  
  76   1      }
  77          
  78          /*!
  79              \brief      eeprom write byte
  80              \param[in]  page:0~x(EEPROM_SELECT(0),x = CFG_EEPROM_SEL(0~31)) 
  81                             0~1(EEPROM_SELECT(1))
  82                  addr:0~0x3ff(EEPROM_SELECT(0))
  83                       0~0x1ff(EEPROM_SELECT(1))
  84                  write_byte
  85              \param[out] none
  86              \retval     ErrStatus:SUCCESS/ERROR
  87          */
  88          ErrStatus eeprom_write_byte(uint8_t page,uint16_t addr,uint8_t write_byte)
  89          {
  90   1        ErrStatus status;
  91   1          uint8_t tempdata,select;
  92   1      
  93   1        REG_ADDR = EEP_SELECT;
  94   1        select = REG_DATA;
  95   1      
  96   1        EA = 0;
  97   1      
  98   1        SPROG_ADDR_L = 0x00;
  99   1        SPROG_ADDR_H = 0x00;
 100   1        SPROG_ADDR_H |= (page<<2);
 101   1        SPROG_ADDR_L = addr;
 102   1        SPROG_ADDR_H |= ((addr>>8)&0x03);
 103   1        SPROG_DATA = write_byte;
 104   1        SPROG_CMD = 0x69;
 105   1        _nop_();
 106   1        _nop_();
 107   1        _nop_();
 108   1        _nop_();
 109   1        SPROG_ADDR_L = 0x00;
 110   1        SPROG_ADDR_H = 0x00;
 111   1      
 112   1        if(select==0)
 113   1        {
 114   2           tempdata = eeprom_read_byte(page,addr);
C51 COMPILER V9.59.0.0   MCU02_EEPROM                                                      04/19/2021 17:34:45 PAGE 3   

 115   2        }
 116   1        else
 117   1        {
 118   2           tempdata = eeprom_nvr_read_byte(page,addr);
 119   2        }
 120   1      
 121   1        if(tempdata == write_byte)
 122   1        {
 123   2          status = SUCCESS;
 124   2        }
 125   1        else
 126   1        {
 127   2          status = ERROR;
 128   2        }
 129   1        
 130   1        EA = 1;
 131   1      
 132   1        return status;
 133   1          
 134   1      }
 135          
 136          /*!
 137              \brief      read eeprom when EEPROM_SELECT(1)
 138              \param[in]  addr:0x4400~0x47ff
 139              \param[out] none
 140              \retval     none
 141          */
 142          void eeprom_nvr_read(uint8_t *pbuf,uint16_t addr,uint16_t len)
 143          {
 144   1          uint16_t i;
 145   1          
 146   1        EA = 0;
 147   1      
 148   1        for(i = 0; i < len; i++)
 149   1        { 
 150   2            SPROG_CMD = 0x88;
 151   2          SPROG_ADDR_H = (addr>>8);
 152   2          SPROG_ADDR_L = addr&0x00ff;     
 153   2          pbuf[i] = SPROG_RDATA;
 154   2          addr++;
 155   2        }
 156   1      
 157   1        SPROG_CMD = 0x00; 
 158   1        SPROG_ADDR_H = 0x00;
 159   1        SPROG_ADDR_L = 0x00;  
 160   1        EA = 1;
 161   1          
 162   1      }
 163          
 164          /*!
 165              \brief      read eeprom when EEPROM_SELECT(1)
 166            \param[in]  page:0~1
 167              \param[in]  addr:0~0x1ff
 168              \param[out] none
 169              \retval     none
 170          */
 171          void eeprom_nvr_read_page(uint8_t *pbuf,uint8_t page,uint16_t addr,uint16_t len)
 172          {
 173   1          uint16_t i;
 174   1        uint16_t addr_base;
 175   1      
 176   1        if(page)
C51 COMPILER V9.59.0.0   MCU02_EEPROM                                                      04/19/2021 17:34:45 PAGE 4   

 177   1        {
 178   2          addr_base = 0x4600+addr;
 179   2        }
 180   1        else
 181   1        {
 182   2            addr_base = 0x4400+addr;
 183   2        }
 184   1        
 185   1        EA = 0;
 186   1      
 187   1        for(i = 0; i < len; i++)
 188   1        { 
 189   2            SPROG_CMD = 0x88;
 190   2          SPROG_ADDR_H = (addr_base>>8);
 191   2          SPROG_ADDR_L = addr_base&0x00ff;      
 192   2          pbuf[i] = SPROG_RDATA;
 193   2          addr_base++;
 194   2        }
 195   1      
 196   1        SPROG_CMD = 0x00; 
 197   1        SPROG_ADDR_H = 0x00;
 198   1        SPROG_ADDR_L = 0x00;  
 199   1        EA = 1;
 200   1          
 201   1      }
 202          
 203          
 204          /*!
 205              \brief      read byte from eeprom when EEPROM_SELECT(1)
 206            \param[in]  page:0~1
 207              \param[in]  addr:0~0x1ff
 208              \param[out] none
 209              \retval     data
 210          */
 211          uint8_t eeprom_nvr_read_byte(uint8_t page,uint16_t addr)
 212          {
 213   1          uint8_t dat;
 214   1        uint16_t addr_base;
 215   1      
 216   1        if(page)
 217   1        {
 218   2          addr_base = 0x4600+addr;
 219   2        }
 220   1        else
 221   1        {
 222   2            addr_base = 0x4400+addr;
 223   2        }
 224   1          
 225   1        EA = 0;
 226   1      
 227   1        SPROG_CMD = 0x88; 
 228   1        SPROG_ADDR_H = (addr_base>>8);
 229   1        SPROG_ADDR_L = addr_base&0x00ff;  
 230   1        dat = SPROG_RDATA;
 231   1      
 232   1        SPROG_CMD = 0x00; 
 233   1        SPROG_ADDR_H = 0x00;
 234   1        SPROG_ADDR_L = 0x00;
 235   1          
 236   1        EA = 1;
 237   1        
 238   1        return dat; 
C51 COMPILER V9.59.0.0   MCU02_EEPROM                                                      04/19/2021 17:34:45 PAGE 5   

 239   1      }
 240          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
