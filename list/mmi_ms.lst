C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_MS
OBJECT MODULE PLACED IN .\output\mmi_ms.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_ms.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\
                    -Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rfi
                    -d;.\mmi_inc) DEBUG PRINT(.\list\mmi_ms.lst) TABS(2) OBJECT(.\output\mmi_ms.obj)

line level    source

   1          #ifndef __MMI_MS_C__
   2          #define __MMI_MS_C__
   3          
   4          #include "string.h"
   5          #include "mmi_ms.h"
   6          #include "mmi_key.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_audio.h"
   9          #include "mmi_fps.h"
  10          #include "mmi_rfid.h"
  11          #include "mmi_com.h"
  12          #include "mmi_fs.h"
  13          #include "mmi_rst.h"
  14          #include "dqiot_drv.h"
  15          #include "dqiot_drv_fp.h"
  16          #include "delay.h"
  17          #include "mmi_fs.h"
  18          #include "mmi_fm.h"
  19          #include "mmi_wifi.h"
  20          //#include "stdio.h"
  21          
  22          unsigned char input_key_1[PWD_INPUT_MAX_LEN];
  23          unsigned char input_key_2[PWD_INPUT_MAX_LEN];
  24          unsigned char key_len = 0;
  25          OPERATE_TIME opt_time = OPT_TIME_INVALID;
  26          static SYS_BASE_STATUS sys_state = SYS_STATUS_INVALID;
  27          
  28          static unsigned char key_last_value = KEY_INVALID;
  29          #ifdef __LOCK_RFID_CARD_SUPPORT__
  30          static unsigned char rfid_last_flag = 0;
  31          #endif
  32          
  33          extern uint8_t audio_flag;
  34          /*
  35          parameter: 
  36            none
  37          return :
  38            none
  39          */
  40          void mmi_task_proc(void)
  41          {
  42   1        unsigned char touch_value = 0xFF;
  43   1        unsigned char key_value = KEY_INVALID;
  44   1        static unsigned char time_count = 0;
  45   1      
  46   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
  47   1        if (g_rfid_flag == 1)
  48   1        {
  49   2          //check rfid press
  50   2          if (mmi_dq_rfid_work() == RET_SUCESS)
  51   2          {
  52   3            if (rfid_last_flag == 0)
  53   3            {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 2   

  54   4              rfid_last_flag = 1;
  55   4              mmi_dq_ms_set_msg_que(QUE_EVENT_RFID, QUE_PRO_LOW, 0);
  56   4            }
  57   3          }
  58   2          else
  59   2          {
  60   3            rfid_last_flag = 0;
  61   3          }
  62   2          g_rfid_flag = 0;
  63   2        }
  64   1      #endif
  65   1      
  66   1        //check key press
  67   1        touch_value = mmi_dq_key_work();
  68   1        if (touch_value != 0xFF)
  69   1        {
  70   2          key_value = mmi_dq_get_key_map(touch_value);
  71   2          if (key_value != KEY_INVALID)
  72   2          {
  73   3            if (key_last_value != key_value)
  74   3            {
  75   4              key_last_value = key_value;
  76   4              mmi_dq_ms_set_msg_que(QUE_EVENT_KEY, QUE_PRO_LOW, key_value);
  77   4            }
  78   3          }
  79   2          else
  80   2            key_last_value = KEY_INVALID;
  81   2        }
  82   1        else
  83   1          key_last_value = KEY_INVALID;
  84   1      
  85   1        if (mmi_dq_aud_get_end_flag() != 0)
  86   1          mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
  87   1      
  88   1        if (mmi_dq_rst_get_state() != 0)
  89   1          mmi_dq_ms_set_msg_que(QUE_EVENT_RST, QUE_PRO_LOW, 0);
  90   1      
  91   1        if (mmi_dq_sys_get_timer2_flag() != 0)
  92   1          mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END, QUE_PRO_LOW, 0);
  93   1      
  94   1      #ifdef __LOCK_FP_SUPPORT__
  95   1        //check fp press
  96   1        if (mmi_dq_fp_work() != 0)
  97   1          mmi_dq_ms_set_msg_que(QUE_EVENT_FP, QUE_PRO_LOW, 0);
  98   1      #endif
  99   1      
 100   1        if (mmi_dq_sys_get_wifi_check_flag() != 0)
 101   1          mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK, QUE_PRO_LOW, 0);
 102   1        return;
 103   1      }
*** WARNING C280 IN LINE 44 OF mmi_src\mmi_ms.c: 'time_count': unreferenced local variable
 104          
 105          /*
 106          parameter: 
 107            none
 108          return :
 109            none
 110          */
 111          void mmi_sleep_task_proc(void)
 112          {
 113   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 114   1        unsigned char ret = 0xFF;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 3   

 115   1        static unsigned char time_count = 0;
 116   1      
 117   1        time_count++;
 118   1        if (time_count > 4)
 119   1        {
 120   2          time_count = 0;
 121   2          ret = mmi_dq_rfid_check();
 122   2        }
 123   1      #endif
 124   1      
 125   1        if (
 126   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 127   1          (ret == RET_SUCESS) ||
 128   1      #endif
 129   1          (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() == 0)
 130   1      #ifdef __LOCK_FP_SUPPORT__
 131   1          || (mmi_dq_fp_get_pin() == 0)
 132   1      #endif
 133   1        )
 134   1        {
 135   2          key_last_value = mmi_dq_get_key_map(dqiot_drv_get_touch_value());
 136   2          mmi_dq_sys_wake_up();
 137   2        }
 138   1      
 139   1        //if(mmi_dq_sys_get_wifi_check_flag() != 0)
 140   1        //  mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK,QUE_PRO_LOW,0);
 141   1        return;
 142   1      }
 143          
 144          /*
 145          parameter: 
 146            none
 147          return :
 148            none
 149          */
 150          void mmi_wait_sleep_task_proc(void)
 151          {
 152   1        //unsigned int timer1_count = 0;
 153   1      
 154   1        //if((mmi_dq_rfid_check() == RET_SUCESS) || (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() == 0))
 155   1        if ((key_last_value == KEY_INVALID) && (mmi_dq_aud_get_state() == 0) && (mmi_dq_rst_get_pin() != 0)
 156   1      #ifdef __LOCK_FP_SUPPORT__
 157   1          && (mmi_dq_fp_get_pin() != 0)
 158   1      #endif
 159   1        )
 160   1        {
 161   2          mmi_dq_sys_enter_sleep();
 162   2        }
 163   1      
 164   1        return;
 165   1      }
 166          
 167          /*
 168          parameter: 
 169            none
 170          return :
 171            none
 172          */
 173          unsigned char mmi_dq_ms_get_run_flag(void)
 174          {
 175   1        if (
 176   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 4   

 177   1          rfid_last_flag == 0 &&
 178   1      #endif
 179   1          key_last_value == KEY_INVALID)
 180   1          return 1;
 181   1      
 182   1        return 0;
 183   1      }
 184          
 185          /*
 186          parameter: 
 187            none
 188          return :
 189            none
 190          */
 191          void mmi_dq_ms_sys_msg_handle(void)
 192          {
 193   1        Sys_MSG_Queue_M sys_msg_que;
 194   1        if (mmi_OutQueue(&sys_msg_que))
 195   1        {
 196   2          mmi_dq_sys_sleep_timer_reset();
 197   2          switch (sys_msg_que.que_event)
 198   2          {
 199   3          case QUE_EVENT_KEY:
 200   3            mmi_ms_pwd_opt_fun(sys_msg_que.que_data);
 201   3            break;
 202   3      #ifdef __LOCK_FP_SUPPORT__
 203   3          case QUE_EVENT_FP:
 204   3            mmi_ms_fps_opt_fun(sys_msg_que.que_data);
 205   3            break;
 206   3      #endif
 207   3      #ifdef __LOCK_RFID_CARD_SUPPORT__
 208   3          case QUE_EVENT_RFID:
 209   3            mmi_ms_rfid_opt_fun(sys_msg_que.que_data);
 210   3            break;
 211   3      #endif
 212   3          case QUE_EVENT_RST:
 213   3            mmi_ms_reset_opt_fun();
 214   3            break;
 215   3          case QUE_EVENT_AUDIO_END:
 216   3      
 217   3            break;
 218   3          case QUE_EVENT_TIMER_END:
 219   3            mmi_dq_sys_delay_event_pro();
 220   3            break;
 221   3          case QUE_EVENT_WIFI_CHECK:
 222   3            mmi_ms_wifi_opt_fun();
 223   3            break;
 224   3          default:
 225   3            break;
 226   3          }
 227   2        }
 228   1      }
 229          
 230          /*
 231          parameter: 
 232            none
 233          return :
 234            none
 235          */
 236          void mmi_dq_ms_set_msg_que(SYS_QUEUE_EVENT q_event, SYS_QUEUE_PRO q_pro, unsigned char q_data)
 237          {
 238   1        Sys_MSG_Queue_M que;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 5   

 239   1        que.que_event = q_event;
 240   1        que.que_pro = q_pro;
 241   1        que.que_data = q_data;
 242   1        //printf("mmi_dq_ms_set_msg_que  event : %d",q_event);
 243   1        mmi_InQueue(que);
 244   1        return;
 245   1      }
 246          
 247          /*
 248          parameter: 
 249            none
 250          return :
 251            none
 252          */
 253          void mmi_dq_ms_set_sys_state(SYS_BASE_STATUS state)
 254          {
 255   1        sys_state = state;
 256   1        return;
 257   1      }
 258          
 259          /*
 260          parameter: 
 261            none
 262          return :
 263            none
 264          */
 265          SYS_BASE_STATUS mmi_dq_ms_get_sys_state(void)
 266          {
 267   1        return sys_state;
 268   1      }
 269          
 270          /*
 271          parameter: 
 272            none
 273          return :
 274            none
 275          */
 276          void mmi_ms_pwd_init_var(void)
 277          {
 278   1        key_len = 0;
 279   1        opt_time = OPT_ONE_TIME;
 280   1        memset(input_key_1, 0xFF, sizeof(input_key_1));
 281   1        memset(input_key_2, 0xFF, sizeof(input_key_2));
 282   1      }
 283          
 284          /*
 285          parameter: 
 286            none
 287          return :
 288            none
 289          */
 290          void mmi_ms_opt_time_init(void)
 291          {
 292   1        opt_time = OPT_ONE_TIME;
 293   1      }
 294          
 295          /*
 296          parameter: 
 297            none
 298          return :
 299            none
 300          */
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 6   

 301          void mmi_ms_pwd_opt_fun(unsigned char key_val)
 302          {
 303   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 304   1        //printf("mmi_ms_pwd_opt_fun status: 0x%x  key: %d",status,key_val);
 305   1        switch (status)
 306   1        {
 307   2        case SYS_STATUS_INPUT_PWD:
 308   2        case SYS_STATUS_INPUT_ADMIN_PWD:
 309   2        case SYS_STATUS_ADD_PWD:
 310   2        case SYS_STATUS_DEL_PWD:
 311   2        case SYS_STATUS_ADD_ADMIN_PWD:
 312   2        case SYS_STATUS_CHG_ADMIN_PWD:
 313   2          if (mmi_dq_sys_door_state_check() == 1)
 314   2          {
 315   3            mmi_dq_aud_stop();
 316   3            mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 317   3            return;
 318   3          }
 319   2          if (key_len == 0)
 320   2          {
 321   3            if (key_val == KEY_S)
 322   3            {
 323   4              if (SYS_STATUS_ADD_ADMIN_PWD != status)
 324   4              {
 325   5                mmi_dq_aud_play_key_tone();
 326   5                if (status == SYS_STATUS_INPUT_PWD)
 327   5                  //mmi_dq_sys_enter_sleep();
 328   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 329   5                else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 330   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 331   5                else
 332   5                  mmi_dq_sys_show_cur_menu_list();
 333   5              }
 334   4              break;
 335   4            }
 336   3            else if (key_val == KEY_H)
 337   3            {
 338   4              if (status == SYS_STATUS_INPUT_PWD)
 339   4              {
 340   5                mmi_dq_aud_play_key_tone();
 341   5                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 342   5                mmi_dq_ms_set_sys_state(SYS_STATUS_INPUT_ADMIN_PWD);
 343   5              }
 344   4              break;
 345   4            }
 346   3          }
 347   2      
 348   2          // mmi_dq_aud_play_key_num(key_val);
 349   2          mmi_dq_aud_play_key_tone();
 350   2      
 351   2          //input pwd
 352   2          if (key_val == KEY_S)
 353   2          {
 354   3            if (opt_time == OPT_ONE_TIME)
 355   3              input_key_1[key_len--] = 0xFF;
 356   3            else if (opt_time == OPT_TWO_TIME)
 357   3              input_key_2[key_len--] = 0xFF;
 358   3      
 359   3            if (key_len == 0)
 360   3            {
 361   4              if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 362   4                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 7   

 363   4              else if (opt_time == OPT_ONE_TIME)
 364   4              {
 365   5                if (status == SYS_STATUS_ADD_PWD)
 366   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 367   5                else if (status == SYS_STATUS_DEL_PWD)
 368   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 369   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 370   5                  mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 371   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 372   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 373   5              }
 374   4              else if (opt_time == OPT_TWO_TIME)
 375   4              {
 376   5                if (status == SYS_STATUS_ADD_PWD)
 377   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 378   5                else if (status == SYS_STATUS_DEL_PWD)
 379   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 380   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 381   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 382   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 383   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 384   5              }
 385   4            }
 386   3          }
 387   2          else if ((key_val == KEY_H) || (key_len == PWD_INPUT_MAX_LEN))
 388   2          {
 389   3            if (key_len < PWD_INPUT_MIN_LEN)
 390   3            {
 391   4              if (status == SYS_STATUS_INPUT_PWD)
 392   4              {
 393   5                if (key_len == 2 && input_key_1[0] == KEY_0 && input_key_1[1] == KEY_0)
 394   5                {
 395   6                  mmi_dq_sys_wifi_open();
 396   6                }
 397   5                else
 398   5                {
 399   6                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 400   6                }
 401   5                key_len = 0;
 402   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 403   5              }
 404   4              else
 405   4              {
 406   5                mmi_dq_aud_play_with_id(AUD_ID_PWD_68_LEN);
 407   5                key_len = 0;
 408   5                if (opt_time == OPT_ONE_TIME)
 409   5                  memset(input_key_1, 0xFF, sizeof(input_key_1));
 410   5                else if (opt_time == OPT_TWO_TIME)
 411   5                  memset(input_key_2, 0xFF, sizeof(input_key_2));
 412   5              }
 413   4            }
 414   3            else
 415   3            {
 416   4              if (status == SYS_STATUS_INPUT_PWD)
 417   4              {
 418   5                if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ALL) == 0xFF)
 419   5                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 420   5                else
 421   5                  mmi_dq_sys_door_open(SYS_OPEN_BY_PASSWORD);
 422   5                key_len = 0;
 423   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 424   5              }
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 8   

 425   4              else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 426   4              {
 427   5                if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == 0xFF)
 428   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 429   5                else
 430   5                {
 431   6                  mmi_dq_sys_set_menu_father_id(STR_ID_SYSTEM);
 432   6                  mmi_dq_sys_show_cur_menu_list();
 433   6                }
 434   5                key_len = 0;
 435   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 436   5              }
 437   4              else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_DEL_PWD)||(status == SYS_STATUS_ADD_A
             -DMIN_PWD)||(status == SYS_STATUS_CHG_ADMIN_PWD))
 438   4              {
 439   5                if (opt_time == OPT_ONE_TIME)
 440   5                {
 441   6                  if (status == SYS_STATUS_ADD_PWD)
 442   6                    mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 443   6                  else if (status == SYS_STATUS_DEL_PWD)
 444   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 445   6                  else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 446   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 447   6                  else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 448   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 449   6      
 450   6                  opt_time = OPT_TWO_TIME;
 451   6                  key_len = 0;
 452   6                  memset(input_key_2, 0xFF, sizeof(input_key_2));
 453   6                }
 454   5                else if (opt_time == OPT_TWO_TIME)
 455   5                {
 456   6                  if (0 == memcmp(input_key_1, input_key_2, PWD_INPUT_MAX_LEN))
 457   6                  {
 458   7                    if (status == SYS_STATUS_ADD_PWD)
 459   7                    {
 460   8                      if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ALL) != 0xFF)
 461   8                        mmi_dq_aud_play_with_id(AUD_ID_PWD_EXIST);
 462   8                      else
 463   8                      {
 464   9                        if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_USER) == RET_FAIL)
 465   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 466   9                        else
 467   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_PWD_SUCESS);
 468   9                        mmi_dq_sys_add_pwd_con();
 469   9                      }
 470   8                    }
 471   7                    else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 472   7                    {
 473   8                      if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 474   8                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 475   8                      else
 476   8                        mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_INIT_SUCESS);
 477   8                      mmi_dq_sys_chg_admin_fp_No1();
 478   8                    }
 479   7                    else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 480   7                    {
 481   8                      if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 482   8                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 483   8                      else
 484   8                        mmi_dq_aud_play_with_id(AUD_ID_CHG_ADMIN_PWD_SUCESS);
 485   8                      mmi_dq_sys_show_cur_menu_list();
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 9   

 486   8                    }
 487   7                    else if (status == SYS_STATUS_DEL_PWD)
 488   7                    {
 489   8                      unsigned char del_index = mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_USER);
 490   8                      if (del_index == 0xFF)
 491   8                        mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_EXIST);
 492   8                      else
 493   8                      {
 494   9                        if (mmi_dq_fs_del_pwd(del_index, FDS_USE_TYPE_USER) == RET_SUCESS)
 495   9                          mmi_dq_aud_play_with_id(AUD_ID_DEL_PWD_SUCESS);
 496   9                        else
 497   9                          mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
 498   9                        mmi_dq_sys_del_pwd_con();
 499   9                      }
 500   8                    }
 501   7                  }
 502   6                  else
 503   6                  {
 504   7                    mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_SAME_RETRY);
 505   7                  }
 506   6                  mmi_ms_pwd_init_var();
 507   6                }
 508   5              }
 509   4            }
 510   3            return;
 511   3          }
 512   2          else
 513   2          {
 514   3            if ((status == SYS_STATUS_INPUT_PWD) || (status == SYS_STATUS_INPUT_ADMIN_PWD))
 515   3            {
 516   4              input_key_1[key_len++] = key_val;
 517   4            }
 518   3            else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_DEL_PWD)||(status == SYS_STATUS_ADD_AD
             -MIN_PWD)||(status == SYS_STATUS_CHG_ADMIN_PWD))
 519   3            {
 520   4              if (opt_time == OPT_ONE_TIME)
 521   4              {
 522   5                input_key_1[key_len++] = key_val;
 523   5              }
 524   4              else if (opt_time == OPT_TWO_TIME)
 525   4              {
 526   5                input_key_2[key_len++] = key_val;
 527   5              }
 528   4            }
 529   3          }
 530   2          break;
 531   2      #ifdef __LOCK_FP_SUPPORT__
 532   2        case SYS_STATUS_ADD_FP:
 533   2        case SYS_STATUS_DEL_FP:
 534   2      #endif
 535   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 536   2        case SYS_STATUS_ADD_RFID:
 537   2        case SYS_STATUS_DEL_RFID:
 538   2      #endif
 539   2          if (key_val == KEY_S)
 540   2          {
 541   3            mmi_dq_aud_play_key_tone();
 542   3            mmi_dq_sys_show_cur_menu_list();
 543   3          }
 544   2          break;
 545   2      #ifdef __LOCK_FP_SUPPORT__
 546   2        case SYS_STATUS_ADD_ADMIN_FP1:
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 10  

 547   2        case SYS_STATUS_ADD_ADMIN_FP2:
 548   2          if (key_val == KEY_S)
 549   2          {
 550   3            mmi_dq_aud_play_key_tone();
 551   3            if (0 == mmi_dq_fs_get_admin_status())
 552   3              mmi_dq_sys_lock_add_admin_suc();
 553   3            else
 554   3              mmi_dq_sys_show_cur_menu_list();
 555   3          }
 556   2          break;
 557   2      #endif
 558   2        case SYS_STATUS_CLR_PWD:
 559   2        case SYS_STATUS_ADD_PWD_CON:
 560   2        case SYS_STATUS_DEL_PWD_CON:
 561   2      #ifdef __LOCK_FP_SUPPORT__
 562   2        case SYS_STATUS_CLR_FP:
 563   2        case SYS_STATUS_ADD_FP_CON:
 564   2        case SYS_STATUS_DEL_FP_CON:
 565   2      #endif
 566   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 567   2        case SYS_STATUS_CLR_RFID:
 568   2        case SYS_STATUS_ADD_RFID_CON:
 569   2        case SYS_STATUS_DEL_RFID_CON:
 570   2      #endif
 571   2        case SYS_STATUS_RESTORE_LOCK_CON:
 572   2          if (key_val == KEY_H)
 573   2          {
 574   3            mmi_dq_aud_play_key_tone();
 575   3            switch (status)
 576   3            {
 577   4            case SYS_STATUS_CLR_PWD:
 578   4              if (RET_SUCESS == mmi_dq_fs_clr_pwd())
 579   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_SUCESS);
 580   4              else
 581   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_FAIL);
 582   4              mmi_dq_sys_show_cur_menu_list();
 583   4              break;
 584   4      #ifdef __LOCK_FP_SUPPORT__
 585   4            case SYS_STATUS_CLR_FP:
 586   4              if (RET_SUCESS == mmi_dq_fs_clr_fp())
 587   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_SUCESS);
 588   4              else
 589   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_FAIL);
 590   4              mmi_dq_sys_show_cur_menu_list();
 591   4              break;
 592   4      #endif
 593   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
 594   4            case SYS_STATUS_CLR_RFID:
 595   4              if (RET_SUCESS == mmi_dq_fs_clr_rfid())
 596   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_SUCESS);
 597   4              else
 598   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_FAIL);
 599   4              mmi_dq_sys_show_cur_menu_list();
 600   4              break;
 601   4      #endif
 602   4            case SYS_STATUS_ADD_PWD_CON:
 603   4              mmi_dq_sys_add_pwd();
 604   4              break;
 605   4            case SYS_STATUS_DEL_PWD_CON:
 606   4              mmi_dq_sys_del_pwd();
 607   4              break;
 608   4      #ifdef __LOCK_FP_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 11  

 609   4            case SYS_STATUS_ADD_FP_CON:
 610   4              mmi_dq_sys_add_fp();
 611   4              break;
 612   4            case SYS_STATUS_DEL_FP_CON:
 613   4              mmi_dq_sys_del_fp();
 614   4              break;
 615   4      #endif
 616   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
 617   4            case SYS_STATUS_ADD_RFID_CON:
 618   4              mmi_dq_sys_add_rf();
 619   4              break;
 620   4            case SYS_STATUS_DEL_RFID_CON:
 621   4              mmi_dq_sys_del_rf();
 622   4              break;
 623   4      #endif
 624   4            case SYS_STATUS_RESTORE_LOCK_CON:
 625   4              mmi_dq_sys_restore_lock();
 626   4              break;
 627   4            }
 628   3          }
 629   2          else if (key_val == KEY_S)
 630   2          {
 631   3            mmi_dq_aud_play_key_tone();
 632   3            mmi_dq_sys_show_cur_menu_list();
 633   3          }
 634   2          break;
 635   2        case SYS_STATUS_SYS_MENU:
 636   2          if (key_val == KEY_S)
 637   2          {
 638   3            mmi_dq_aud_play_key_tone();
 639   3            mmi_dq_sys_get_pre_menu_list();
 640   3          }
 641   2          else if (key_val <= mmi_dq_sys_get_menu_count())
 642   2          {
 643   3            mmi_dq_aud_play_key_tone();
 644   3            mmi_dq_sys_exe_menu_fun(key_val - 1);
 645   3          }
 646   2          break;
 647   2        case SYS_STATUS_FM_MODE:
 648   2        {
 649   3          unsigned char str = mmi_dq_factory_mode_get_test_project();
 650   3          if (str == STR_ID_KEY)
 651   3          {
 652   4            // mmi_dq_aud_play_key_num(key_val);
 653   4            mmi_dq_aud_play_key_tone();
 654   4            mmi_dq_factory_mode_key_test(key_val);
 655   4          }
 656   3          else if (str == STR_ID_MOTO)
 657   3          {
 658   4            if (key_val == KEY_S)
 659   4            {
 660   5              mmi_dq_aud_play_key_tone();
 661   5              mmi_dq_factory_mode_motor_test_back();
 662   5              if (mmi_dq_fs_get_factory_flag() != 0)
 663   5                mmi_dq_factory_mode_test_stop();
 664   5              else
 665   5              {
 666   6                delay_ms(600);
 667   6                mmi_dq_factory_mode_motor_test();
 668   6              }
 669   5            }
 670   4            else if (key_val == KEY_H)
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 12  

 671   4            {
 672   5              mmi_dq_aud_play_key_tone();
 673   5              mmi_dq_factory_mode_motor_test_back();
 674   5              mmi_dq_factory_mode_test_item_result(STR_ID_MOTO, 1);
 675   5            }
 676   4          }
 677   3          else if (mmi_dq_fs_get_factory_flag() != 0)
 678   3          {
 679   4            mmi_dq_aud_play_key_tone();
 680   4            mmi_dq_factory_mode_test_stop();
 681   4          }
 682   3        }
 683   2        break;
 684   2        case SYS_STATUS_WAIT_FOR_ENTER_SLEEP:
 685   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 686   2          break;
 687   2        case SYS_STATUS_WIFI_MODE:
 688   2          //if(key_val == KEY_S)
 689   2          //{
 690   2          //  mmi_dq_aud_play_key_tone();
 691   2          //  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 692   2          //}
 693   2          break;
 694   2        case SYS_STATUS_LOW_POWER:
 695   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 696   2          break;
 697   2        default:
 698   2          break;
 699   2        }
 700   1        return;
 701   1      }
 702          
 703          #ifdef __LOCK_FP_SUPPORT__
 704          /*
 705          parameter: 
 706            none
 707          return :
 708            none
 709          */
 710          void mmi_ms_fps_opt_fun(unsigned char fps_val)
 711          {
 712   1        RET_VAL retval = 0;
 713   1        unsigned short index = 0;
 714   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 715   1        if (status == SYS_STATUS_LOW_POWER)
 716   1        {
 717   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 718   2          return;
 719   2        }
 720   1      
 721   1        if ((status != SYS_STATUS_INPUT_FP && status != SYS_STATUS_ADD_FP && status != SYS_STATUS_DEL_FP && statu
             -s != SYS_STATUS_ADD_ADMIN_FP1 && status != SYS_STATUS_ADD_ADMIN_FP2) || (status == SYS_STATUS_FM_MODE && STR_ID_RF_CARD 
             -!= mmi_dq_factory_mode_get_test_project()))
 722   1          return;
 723   1      
 724   1      #ifdef __LOCK_AUDIO_SUPPORT__
 725   1        mmi_dq_aud_stop();
 726   1      #endif
 727   1        if (mmi_dq_sys_door_state_check() == 1)
 728   1        {
 729   2          mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 730   2          return;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 13  

 731   2        }
 732   1      
 733   1        retval = mmi_dq_fp_get_image();
 734   1        if (retval == 0)
 735   1        {
 736   2          retval = mmi_dq_fp_gen_char(opt_time);
 737   2          if (retval == 0)
 738   2          {
 739   3            retval = mmi_dq_fp_high_speed_search(opt_time, &index);
 740   3            if (retval == 0)
 741   3            {
 742   4              if (status == SYS_STATUS_INPUT_FP)
 743   4              {
 744   5                retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_ALL);
 745   5                if (retval == RET_SUCESS)
 746   5                {
 747   6                  mmi_dq_fp_light(FP_GREEN);
 748   6                  mmi_dq_sys_door_open(SYS_OPEN_BY_FP);
 749   6                }
 750   5                else
 751   5                {
 752   6                  mmi_dq_fp_light(FP_RED);
 753   6                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_FP);
 754   6                }
 755   5              }
 756   4              else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_FM_MODE)
 757   4              {
 758   5                mmi_dq_fp_light(FP_RED);
 759   5                mmi_dq_aud_play_with_id(AUD_ID_FP_EXIST);
 760   5              }
 761   4              else if (status == SYS_STATUS_DEL_FP)
 762   4              {
 763   5                retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_USER);
 764   5                if (retval == RET_SUCESS)
 765   5                {
 766   6                  if (opt_time == OPT_ONE_TIME)
 767   6                  {
 768   7                    opt_time = OPT_TWO_TIME;
 769   7                    mmi_dq_fp_light(FP_GREEN);
 770   7                    mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_FP_AGAIN);
 771   7                  }
 772   6                  else
 773   6                  {
 774   7                    retval = mmi_dq_fp_match();
 775   7                    if (retval == 0 || retval == 255)
 776   7                    {
 777   8                      retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_USER);
 778   8                      if (retval == RET_SUCESS)
 779   8                      {
 780   9                        retval = mmi_dq_fp_delete(index);
 781   9                      }
 782   8                      if (retval == 0)
 783   8                      {
 784   9                        mmi_dq_fp_light(FP_GREEN);
 785   9                        mmi_dq_aud_play_with_id(AUD_ID_DEL_FP_SUCESS);
 786   9                      }
 787   8                      else
 788   8                      {
 789   9                        mmi_dq_fp_light(FP_RED);
 790   9                        mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
 791   9                      }
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 14  

 792   8                      mmi_dq_sys_del_fp_con();
 793   8                    }
 794   7                    else
 795   7                    {
 796   8                      mmi_dq_fp_light(FP_RED);
 797   8                      mmi_dq_aud_play_with_id(AUD_ID_FP_TWICE_NOT_SAME);
 798   8                    }
 799   7                    opt_time = OPT_ONE_TIME;
 800   7                  }
 801   6                }
 802   5                else
 803   5                {
 804   6                  mmi_dq_fp_light(FP_RED);
 805   6                  mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
 806   6                }
 807   5              }
 808   4            }
 809   3            else
 810   3            {
 811   4              if (status == SYS_STATUS_INPUT_FP)
 812   4              {
 813   5                mmi_dq_fp_light(FP_RED);
 814   5                mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
 815   5              }
 816   4              else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_FM_MODE)
 817   4              {
 818   5                if (opt_time == FPS_MAX_INPUT_TIME)
 819   5                {
 820   6                  retval = mmi_dq_fp_reg_module();
 821   6                  if (retval == 0)
 822   6                  {
 823   7                    if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_FM_MODE)
 824   7                    {
 825   8                      index = mmi_dq_fs_get_fp_unuse_index();
 826   8                      if (index == 0xFF)
 827   8                      {
 828   9                        mmi_dq_fp_light(FP_RED);
 829   9                        mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 830   9                        mmi_dq_sys_show_cur_menu_list();
 831   9                      }
 832   8                      else
 833   8                      {
 834   9                        retval = mmi_dq_fp_store_char(0, index);
 835   9                        if (status == SYS_STATUS_ADD_FP)
 836   9                        {
 837  10                          if (retval == 0)
 838  10                          {
 839  11                            retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_USER);
 840  11                            if (retval != 0)
 841  11                              mmi_dq_fp_delete(index);
 842  11                          }
 843  10                          if (retval == 0)
 844  10                          {
 845  11                            mmi_dq_fp_light(FP_GREEN);
 846  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
 847  11                          }
 848  10                          else
 849  10                          {
 850  11                            mmi_dq_fp_light(FP_RED);
 851  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 852  11                          }
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 15  

 853  10                          mmi_dq_sys_add_fp_con();
 854  10                        }
 855   9                        else
 856   9                        {
 857  10                          if (retval == 0)
 858  10                          {
 859  11                            retval = mmi_dq_fp_delete(index);
 860  11                          }
 861  10                          if (retval == 0)
 862  10                          {
 863  11                            mmi_dq_fp_light(FP_GREEN);
 864  11                            mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 1);
 865  11                          }
 866  10                          else
 867  10                          {
 868  11                            mmi_dq_fp_light(FP_RED);
 869  11                            mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 0);
 870  11                          }
 871  10                        }
 872   9                      }
 873   8                    }
 874   7                    else
 875   7                    {
 876   8                      if (status == SYS_STATUS_ADD_ADMIN_FP1)
 877   8                        index = 0;
 878   8                      else if (status == SYS_STATUS_ADD_ADMIN_FP2)
 879   8                        index = 1;
 880   8                      retval = mmi_dq_fp_store_char(0, index);
 881   8                      if (retval == 0)
 882   8                      {
 883   9                        retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_ADMIN);
 884   9                      }
 885   8                      if (retval == 0)
 886   8                      {
 887   9                        mmi_dq_fp_light(FP_GREEN);
 888   9                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
 889   9                      }
 890   8                      else
 891   8                      {
 892   9                        mmi_dq_fp_light(FP_RED);
 893   9                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 894   9                      }
 895   8                      if (0 == mmi_dq_fs_get_admin_status())
 896   8                      {
 897   9                        if (status == SYS_STATUS_ADD_ADMIN_FP1)
 898   9                          mmi_dq_sys_chg_admin_fp_No2();
 899   9                        else
 900   9                          mmi_dq_sys_lock_add_admin_suc();
 901   9                      }
 902   8                      else
 903   8                        mmi_dq_sys_show_cur_menu_list();
 904   8                    }
 905   7                  }
 906   6                  else
 907   6                  {
 908   7                    mmi_dq_fp_light(FP_RED);
 909   7                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
 910   7                  }
 911   6                  opt_time = OPT_ONE_TIME;
 912   6                }
 913   5                else
 914   5                {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 16  

 915   6                  opt_time++;
 916   6                  mmi_dq_fp_light(FP_GREEN);
 917   6                  mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
 918   6                }
 919   5              }
 920   4              else if (status == SYS_STATUS_DEL_FP)
 921   4              {
 922   5                mmi_dq_fp_light(FP_RED);
 923   5                mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
 924   5              }
 925   4            }
 926   3            return;
 927   3          }
 928   2        }
 929   1        mmi_dq_fp_light(FP_RED);
 930   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
 931   1        return;
 932   1      }
*** WARNING C280 IN LINE 710 OF mmi_src\mmi_ms.c: 'fps_val': unreferenced local variable
 933          #endif
 934          
 935          #ifdef __LOCK_RFID_CARD_SUPPORT__
 936          /*
 937          parameter: 
 938            none
 939          return :
 940            none
 941          */
 942          void mmi_ms_rfid_opt_fun(unsigned char rfid_val)
 943          {
 944   1        RET_VAL retval = RET_SUCESS;
 945   1        unsigned char index = 0;
 946   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 947   1      
 948   1        if (status == SYS_STATUS_LOW_POWER)
 949   1        {
 950   2          mmi_dq_aud_play_with_id(AUD_BASE_ID_LOW_BATTERY);
 951   2          return;
 952   2        }
 953   1      
 954   1        if ((status != SYS_STATUS_INPUT_RFID && status != SYS_STATUS_ADD_RFID && status != SYS_STATUS_DEL_RFID) |
             -| (status == SYS_STATUS_FM_MODE && STR_ID_RF_CARD != mmi_dq_factory_mode_get_test_project()))
 955   1          return;
 956   1      
 957   1      #ifdef __LOCK_AUDIO_SUPPORT__
 958   1        mmi_dq_aud_stop();
 959   1      #endif
 960   1      
 961   1        if (mmi_dq_sys_door_state_check() == 1)
 962   1        {
 963   2          mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 964   2          return;
 965   2        }
 966   1      
 967   1        if (status == SYS_STATUS_FM_MODE)
 968   1        {
 969   2          retval = mmi_dq_rfid_gen_char(opt_time);
 970   2          if (retval == RET_SUCESS)
 971   2          {
 972   3            if (opt_time == OPT_ONE_TIME)
 973   3            {
 974   4              mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 17  

 975   4              opt_time = OPT_TWO_TIME;
 976   4            }
 977   3            else
 978   3            {
 979   4              retval = mmi_dq_rfid_match();
 980   4              if (retval == RET_SUCESS)
 981   4                mmi_dq_factory_mode_test_item_result(STR_ID_RF_CARD, 1);
 982   4              else
 983   4                mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_SAME);
 984   4              opt_time = OPT_ONE_TIME;
 985   4            }
 986   3          }
 987   2          return;
 988   2        }
 989   1      
 990   1        retval = mmi_dq_rfid_search_by_temp(&index);
 991   1        if (retval == RET_SUCESS)
 992   1        {
 993   2          if (status == SYS_STATUS_INPUT_RFID)
 994   2          {
 995   3            mmi_dq_sys_door_open(SYS_OPEN_BY_RFID);
 996   3          }
 997   2          else if (status == SYS_STATUS_ADD_RFID)
 998   2          {
 999   3            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_EXIST);
1000   3          }
1001   2          else if (status == SYS_STATUS_DEL_RFID)
1002   2          {
1003   3            retval = mmi_dq_rfid_gen_char(opt_time);
1004   3            if (retval == RET_SUCESS)
1005   3            {
1006   4              if (opt_time == OPT_ONE_TIME)
1007   4              {
1008   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_RFCARD_AGAIN);
1009   5                opt_time = OPT_TWO_TIME;
1010   5              }
1011   4              else
1012   4              {
1013   5                retval = mmi_dq_rfid_match();
1014   5                if (retval == RET_SUCESS)
1015   5                {
1016   6                  retval = mmi_dq_fs_del_rfid(index);
1017   6                  if (retval == RET_SUCESS)
1018   6                  {
1019   7                    mmi_dq_aud_play_with_id(AUD_ID_DEL_RFCARD_SUCESS);
1020   7                  }
1021   6                  else
1022   6                    mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
1023   6                  mmi_dq_sys_del_rf_con();
1024   6                }
1025   5                else
1026   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_SAME);
1027   5                opt_time = OPT_ONE_TIME;
1028   5              }
1029   4            }
1030   3            else
1031   3              mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL_RETRY);
1032   3          }
1033   2        }
1034   1        else
1035   1        {
1036   2          if (status == SYS_STATUS_ADD_RFID)
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 18  

1037   2          {
1038   3            retval = mmi_dq_rfid_gen_char(opt_time);
1039   3            if (retval == RET_SUCESS)
1040   3            {
1041   4              if (opt_time == OPT_ONE_TIME)
1042   4              {
1043   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
1044   5                opt_time = OPT_TWO_TIME;
1045   5              }
1046   4              else
1047   4              {
1048   5                retval = mmi_dq_rfid_match();
1049   5                if (retval == RET_SUCESS)
1050   5                {
1051   6                  retval = mmi_dq_rfid_store(0);
1052   6                  if (retval == RET_SUCESS)
1053   6                  {
1054   7                    mmi_dq_aud_play_with_id(AUD_ID_ADD_RFCARD_SUCESS);
1055   7                  }
1056   6                  else
1057   6                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
1058   6                  mmi_dq_sys_add_rf_con();
1059   6                }
1060   5                else
1061   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_SAME);
1062   5                opt_time = OPT_ONE_TIME;
1063   5              }
1064   4            }
1065   3            else
1066   3              mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
1067   3          }
1068   2          else if (status == SYS_STATUS_INPUT_RFID)
1069   2            mmi_dq_sys_door_open_fail(SYS_OPEN_BY_RFID);
1070   2          else
1071   2            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_EXIST);
1072   2        }
1073   1      
1074   1        return;
1075   1      }
*** WARNING C280 IN LINE 942 OF mmi_src\mmi_ms.c: 'rfid_val': unreferenced local variable
1076          #endif
1077          
1078          /*
1079          parameter: 
1080            none
1081          return :
1082            none
1083          */
1084          void mmi_ms_reset_opt_fun(void)
1085          {
1086   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
1087   1      
1088   1        if (status == SYS_STATUS_FM_MODE && STR_ID_RESET == mmi_dq_factory_mode_get_test_project())
1089   1        {
1090   2          mmi_dq_factory_mode_reset_test();
1091   2          return;
1092   2        }
1093   1        else
1094   1        {
1095   2          if (RET_SUCESS == mmi_dq_fs_reset())
1096   2            mmi_dq_aud_play_with_id(AUD_BASE_ID_SYS_RESTORE_SUCCESS);
1097   2          else
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/06/2021 11:31:07 PAGE 19  

1098   2            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
1099   2      
1100   2          mmi_dq_sys_add_admin_pwd();
1101   2        }
1102   1      }
1103          
1104          /*
1105          parameter: 
1106            none
1107          return :
1108            none
1109          */
1110          void mmi_ms_wifi_opt_fun(void)
1111          {
1112   1        unsigned char type = mmi_dq_sys_get_wifi_check_type();
1113   1        if (type == 0)
1114   1          mmi_dq_wifi_check_connect();
1115   1        else if (type == 1)
1116   1          mmi_dq_wifi_check_open();
*** WARNING C206 IN LINE 1116 OF mmi_src\mmi_ms.c: 'mmi_dq_wifi_check_open': missing function-prototype
1117   1      }
1118          
1119          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     27      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
