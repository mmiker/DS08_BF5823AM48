C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_MS
OBJECT MODULE PLACED IN .\output\mmi_ms.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_ms.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\
                    -Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rfi
                    -d;.\mmi_inc) DEBUG PRINT(.\list\mmi_ms.lst) TABS(2) OBJECT(.\output\mmi_ms.obj)

line level    source

   1          #ifndef __MMI_MS_C__
   2          #define __MMI_MS_C__
   3          
   4          #include "string.h"
   5          #include "mmi_ms.h"
   6          #include "mmi_key.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_audio.h"
   9          #include "mmi_fps.h"
  10          #include "mmi_rfid.h"
  11          #include "mmi_com.h"
  12          #include "mmi_fs.h"
  13          #include "mmi_rst.h"
  14          #include "dqiot_drv.h"
  15          #include "delay.h"
  16          #include "mmi_fs.h"
  17          #include "mmi_fm.h"
  18          #include "mmi_wifi.h"
  19          // #include "stdio.h"
  20          
  21          unsigned char input_key_1[KEY_INPUT_MAX_LEN];
  22          unsigned char input_key_2[KEY_INPUT_MAX_LEN];
  23          unsigned char key_len = 0;
  24          OPERATE_TIME opt_time = OPT_TIME_INVALID;
  25          static SYS_BASE_STATUS data sys_state = SYS_STATUS_INVALID;
  26          
  27          static unsigned char data key_last_value = KEY_INVALID;
  28          #ifdef __LOCK_RFID_CARD_SUPPORT__
  29          static unsigned char rfid_last_flag = 0;
  30          #endif
  31          #ifdef __LOCK_BUS_SUPPORT__
  32          static unsigned char admin_check_type = 0;
  33          #endif
  34          /*
  35          parameter: 
  36            none
  37          return :
  38            none
  39          */
  40          void mmi_task_proc(void)
  41          {
  42   1        unsigned char touch_value = 0xFF;
  43   1        unsigned char key_value = KEY_INVALID;
  44   1      
  45   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
  46   1        if (mmi_dq_sys_get_rfid_flag() == 1)
  47   1        {
  48   2          //check rfid press
  49   2          if (mmi_dq_rfid_check() == RET_SUCESS)
  50   2          {
  51   3            if (mmi_dq_rfid_work() == RET_SUCESS)
  52   3            {
  53   4              if (rfid_last_flag == 0)
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 2   

  54   4              {
  55   5                rfid_last_flag = 1;
  56   5                mmi_dq_ms_set_msg_que(QUE_EVENT_RFID, QUE_PRO_LOW, 0);
  57   5              }
  58   4            }
  59   3            else
  60   3            {
  61   4              rfid_last_flag = 0;
  62   4            }
  63   3          }
  64   2        }
  65   1      #endif
  66   1        //check key press
  67   1        touch_value = mmi_dq_key_work();
  68   1        if (touch_value != 0xFF)
  69   1        {
  70   2          key_value = mmi_dq_get_key_map(touch_value);
  71   2          if (key_value != KEY_INVALID)
  72   2          {
  73   3            if (key_last_value != key_value)
  74   3            {
  75   4              key_last_value = key_value;
  76   4              mmi_dq_ms_set_msg_que(QUE_EVENT_KEY, QUE_PRO_LOW, key_value);
  77   4            }
  78   3          }
  79   2          else
  80   2            key_last_value = KEY_INVALID;
  81   2        }
  82   1        else
  83   1          key_last_value = KEY_INVALID;
  84   1      
  85   1        if (mmi_dq_aud_get_end_flag() != 0)
  86   1          mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
  87   1      
  88   1        if (mmi_dq_rst_get_state() != 0)
  89   1          mmi_dq_ms_set_msg_que(QUE_EVENT_RST, QUE_PRO_LOW, 0);
  90   1      
  91   1        if (mmi_dq_sys_get_timer2_flag() != 0)
  92   1          mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END, QUE_PRO_LOW, 0);
  93   1      
  94   1      #ifdef __LOCK_FP_SUPPORT__
  95   1        //check fp press
  96   1        if (mmi_dq_fp_work() != 0)
  97   1          mmi_dq_ms_set_msg_que(QUE_EVENT_FP, QUE_PRO_LOW, 0);
  98   1      #endif
  99   1      
 100   1        if (mmi_dq_sys_get_wifi_check_flag() != 0)
 101   1          mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK, QUE_PRO_LOW, 0);
 102   1        return;
 103   1      }
 104          
 105          /*
 106          parameter: 
 107            none
 108          return :
 109            none
 110          */
 111          void mmi_sleep_task_proc(void)
 112          {
 113   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 114   1        unsigned char ret = 0xFF;
 115   1        static unsigned char time_count = 0;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 3   

 116   1      
 117   1        time_count++;
 118   1        if (time_count > 4)
 119   1        {
 120   2          time_count = 0;
 121   2          ret = mmi_dq_rfid_check();
 122   2        }
 123   1      #endif
 124   1      
 125   1        if (
 126   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 127   1          (ret == RET_SUCESS) ||
 128   1      #endif
 129   1          (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() != 0)
 130   1      #ifdef __LOCK_FP_SUPPORT__
 131   1          || (mmi_dq_fp_get_pin() == 0)
 132   1      #endif
 133   1        )
 134   1        {
 135   2          key_last_value = mmi_dq_get_key_map(dqiot_drv_get_touch_value());
 136   2          mmi_dq_sys_wake_up();
 137   2        }
 138   1      
 139   1        //if(mmi_dq_sys_get_wifi_check_flag() != 0)
 140   1        //  mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK,QUE_PRO_LOW,0);
 141   1        return;
 142   1      }
 143          
 144          /*
 145          parameter: 
 146            none
 147          return :
 148            none
 149          */
 150          void mmi_wait_sleep_task_proc(void)
 151          {
 152   1        //unsigned int timer1_count = 0;
 153   1        if (mmi_dq_wifi_get_running_flag() == 1)
 154   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 155   1        //if((mmi_dq_rfid_check() == RET_SUCESS) || (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() == 0))
 156   1        else if (mmi_dq_ms_get_run_flag() == 0)
 157   1        {
 158   2          mmi_dq_sys_enter_sleep();
 159   2        }
 160   1      
 161   1        return;
 162   1      }
 163          
 164          /*
 165          parameter: 
 166            none
 167          return :
 168            none
 169          */
 170          unsigned char mmi_dq_ms_get_run_flag(void)
 171          {
 172   1        if ((key_last_value == KEY_INVALID) && (mmi_dq_aud_get_state() == 0) && (mmi_dq_rst_get_pin() == 0)
 173   1      #ifdef __LOCK_FP_SUPPORT__
 174   1          && (mmi_dq_fp_get_pin() != 0)
 175   1      #endif
 176   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 177   1          && rfid_last_flag == 0
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 4   

 178   1      #endif
 179   1        )
 180   1          return 0;
 181   1      
 182   1        return 1;
 183   1      }
 184          
 185          /*
 186          parameter: 
 187            none
 188          return :
 189            none
 190          */
 191          void mmi_dq_ms_sys_msg_handle(void)
 192          {
 193   1        Sys_MSG_Queue_M sys_msg_que;
 194   1        if (mmi_OutQueue(&sys_msg_que))
 195   1        {
 196   2          mmi_dq_sys_sleep_timer_reset();
 197   2          switch (sys_msg_que.que_event)
 198   2          {
 199   3          case QUE_EVENT_KEY:
 200   3            mmi_ms_pwd_opt_fun(sys_msg_que.que_data);
 201   3            break;
 202   3      #ifdef __LOCK_FP_SUPPORT__
 203   3          case QUE_EVENT_FP:
 204   3            mmi_ms_fps_opt_fun(sys_msg_que.que_data);
 205   3            break;
 206   3      #endif
 207   3      #ifdef __LOCK_RFID_CARD_SUPPORT__
 208   3          case QUE_EVENT_RFID:
 209   3            mmi_ms_rfid_opt_fun(sys_msg_que.que_data);
 210   3            break;
 211   3      #endif
 212   3          case QUE_EVENT_RST:
 213   3            mmi_ms_reset_opt_fun();
 214   3            break;
 215   3          case QUE_EVENT_AUDIO_END:
 216   3      
 217   3            break;
 218   3          case QUE_EVENT_TIMER_END:
 219   3            mmi_dq_sys_delay_event_pro();
 220   3            break;
 221   3          case QUE_EVENT_WIFI_CHECK:
 222   3            mmi_ms_wifi_opt_fun();
 223   3            break;
 224   3          default:
 225   3            break;
 226   3          }
 227   2        }
 228   1      }
 229          
 230          /*
 231          parameter: 
 232            none
 233          return :
 234            none
 235          */
 236          void mmi_dq_ms_set_msg_que(SYS_QUEUE_EVENT q_event, SYS_QUEUE_PRO q_pro, unsigned char q_data)
 237          {
 238   1        Sys_MSG_Queue_M que;
 239   1        que.que_event = q_event;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 5   

 240   1        que.que_pro = q_pro;
 241   1        que.que_data = q_data;
 242   1        //printf("mmi_dq_ms_set_msg_que  event : %d",q_event);
 243   1        mmi_InQueue(que);
 244   1        return;
 245   1      }
 246          
 247          /*
 248          parameter: 
 249            none
 250          return :
 251            none
 252          */
 253          void mmi_dq_ms_set_sys_state(SYS_BASE_STATUS state)
 254          {
 255   1        sys_state = state;
 256   1        return;
 257   1      }
 258          
 259          /*
 260          parameter: 
 261            none
 262          return :
 263            none
 264          */
 265          SYS_BASE_STATUS mmi_dq_ms_get_sys_state(void)
 266          {
 267   1        return sys_state;
 268   1      }
 269          
 270          /*
 271          parameter: 
 272            none
 273          return :
 274            none
 275          */
 276          void mmi_ms_pwd_init_var(void)
 277          {
 278   1        key_len = 0;
 279   1        opt_time = OPT_ONE_TIME;
 280   1        memset(input_key_1, 0xFF, sizeof(input_key_1));
 281   1        memset(input_key_2, 0xFF, sizeof(input_key_2));
 282   1      }
 283          
 284          /*
 285          parameter: 
 286            none
 287          return :
 288            none
 289          */
 290          void mmi_ms_opt_time_init(void)
 291          {
 292   1        opt_time = OPT_ONE_TIME;
 293   1      }
 294          
 295          /*
 296          parameter: 
 297            none
 298          return :
 299            none
 300          */
 301          void mmi_ms_pwd_opt_fun(unsigned char key_val)
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 6   

 302          {
 303   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 304   1        switch (status)
 305   1        {
 306   2        case SYS_STATUS_WAIT_FOR_ENTER_SLEEP:
 307   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 308   2          status = SYS_STATUS_IDLE;
 309   2        case SYS_STATUS_INPUT_PWD:
 310   2        case SYS_STATUS_INPUT_ADMIN_PWD:
 311   2        case SYS_STATUS_ADD_PWD:
 312   2        case SYS_STATUS_DEL_PWD:
 313   2        case SYS_STATUS_ADD_ADMIN_PWD:
 314   2        case SYS_STATUS_CHG_ADMIN_PWD:
 315   2      #ifdef __LOCK_110_SUPPORT__
 316   2        case SYS_STATUS_ADD_110_PWD:
 317   2      #endif
 318   2          if (mmi_dq_sys_door_state_check() == 1)
 319   2          {
 320   3            mmi_dq_aud_stop();
 321   3            mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 322   3            return;
 323   3          }
 324   2          if (key_len == 0)
 325   2          {
 326   3            if (key_val == KEY_S)
 327   3            {
 328   4              if (SYS_STATUS_ADD_ADMIN_PWD != status)
 329   4              {
 330   5                mmi_dq_aud_play_key_tone();
 331   5                if (status == SYS_STATUS_INPUT_PWD)
 332   5                  //mmi_dq_sys_enter_sleep();
 333   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 334   5                else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 335   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 336   5                else
 337   5                  mmi_dq_sys_show_cur_menu_list();
 338   5              }
 339   4              break;
 340   4            }
 341   3            else if (key_val == KEY_H)
 342   3            {
 343   4              if (status == SYS_STATUS_INPUT_PWD)
 344   4              {
 345   5                mmi_dq_aud_play_key_tone();
 346   5                admin_check_type = 0;
 347   5                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 348   5                mmi_dq_ms_set_sys_state(SYS_STATUS_INPUT_ADMIN_PWD);
 349   5              }
 350   4              break;
 351   4            }
 352   3          }
 353   2      
 354   2          // mmi_dq_aud_play_key_num(key_val);
 355   2          mmi_dq_aud_play_key_tone();
 356   2          //input pwd
 357   2          if ((key_val >= KEY_0 && key_val <= KEY_9) && key_len < KEY_INPUT_MAX_LEN)
 358   2          {
 359   3            if ((status == SYS_STATUS_INPUT_PWD) || (status == SYS_STATUS_INPUT_ADMIN_PWD))
 360   3              input_key_1[key_len++] = key_val;
 361   3            else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_ADD_110_PWD)||(status == SYS_STATUS_AD
             -D_ADMIN_PWD))
 362   3            {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 7   

 363   4              if (opt_time == OPT_ONE_TIME)
 364   4              {
 365   5                input_key_1[key_len++] = key_val;
 366   5              }
 367   4              else if (opt_time == OPT_TWO_TIME)
 368   4              {
 369   5                input_key_2[key_len++] = key_val;
 370   5              }
 371   4            }
 372   3          }
 373   2      
 374   2          if (key_val == KEY_S)
 375   2          {
 376   3            if (opt_time == OPT_ONE_TIME)
 377   3              input_key_1[key_len--] = 0xFF;
 378   3            else if (opt_time == OPT_TWO_TIME)
 379   3              input_key_2[key_len--] = 0xFF;
 380   3      
 381   3            if (key_len == 0)
 382   3            {
 383   4              if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 384   4                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 385   4              else if (opt_time == OPT_ONE_TIME)
 386   4              {
 387   5                if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 388   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 389   5                else if (status == SYS_STATUS_DEL_PWD)
 390   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 391   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 392   5                  mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 393   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 394   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 395   5              }
 396   4              else if (opt_time == OPT_TWO_TIME)
 397   4              {
 398   5                if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 399   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 400   5                else if (status == SYS_STATUS_DEL_PWD)
 401   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 402   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 403   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 404   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 405   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 406   5              }
 407   4            }
 408   3          }
 409   2          else if ((key_val == KEY_H) || (key_len == PWD_INPUT_MAX_LEN))
 410   2          {
 411   3            if (key_len < PWD_INPUT_MIN_LEN)
 412   3            {
 413   4              if (status == SYS_STATUS_INPUT_PWD)
 414   4              {
 415   5                if (key_len == 2 && input_key_1[0] == KEY_0 && input_key_1[1] == KEY_0)
 416   5                {
 417   6                  mmi_dq_sys_wifi_open();
 418   6                }
 419   5      #ifdef __LOCK_BUS_SUPPORT__
 420   5                else if (key_len == 2 && input_key_1[0] == KEY_0 && input_key_1[1] == KEY_1)
 421   5                {
 422   6      
 423   6                  if (mmi_dq_fs_get_business_flag() == 1)
 424   6                  {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 8   

 425   7                    admin_check_type = 1;
 426   7                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 427   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_INPUT_ADMIN_PWD);
 428   7                  }
 429   6                  else
 430   6                  {
 431   7                    mmi_dq_fs_set_business_flag(1);
 432   7                    mmi_dq_aud_play_with_id(AUD_ID_OUT_OPEN);
 433   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 434   7                  }
 435   6                }
 436   5      #endif
 437   5                else
 438   5                {
 439   6                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 440   6                }
 441   5                key_len = 0;
 442   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 443   5              }
 444   4              else
 445   4              {
 446   5                mmi_dq_aud_play_with_id(AUD_ID_PWD_68_LEN);
 447   5                key_len = 0;
 448   5                if (opt_time == OPT_ONE_TIME)
 449   5                  memset(input_key_1, 0xFF, sizeof(input_key_1));
 450   5                else if (opt_time == OPT_TWO_TIME)
 451   5                  memset(input_key_2, 0xFF, sizeof(input_key_2));
 452   5              }
 453   4            }
 454   3            else
 455   3            {
 456   4              if (status == SYS_STATUS_INPUT_PWD)
 457   4              {
 458   5                //if(mmi_dq_fs_check_input_pwd(input_key_1,key_len,FDS_USE_TYPE_ALL) == 0xFF)
 459   5                unsigned char ret = 0;
 460   5                ret = mmi_dq_fs_check_input_pwd_for_open(input_key_1, key_len);
 461   5                //printf("check input ret: %d",(unsigned int)ret);
 462   5                if (ret == 0xFF)
 463   5                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 464   5      #ifdef __LOCK_BUS_SUPPORT__
 465   5                else if (ret == 0xFE && mmi_dq_fs_get_business_flag() == 1)
 466   5                {
 467   6                  mmi_dq_fs_set_business_flag(0);
 468   6                  mmi_dq_aud_play_with_id(AUD_ID_OUT_CLOSED);
 469   6                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 470   6                }
 471   5      #endif
 472   5      #ifdef __LOCK_110_SUPPORT__
 473   5                else if (ret == 1)
 474   5                  mmi_dq_sys_door_open(SYS_OPEN_BY_110_PASSWORD);
 475   5      #endif
 476   5                else
 477   5                  mmi_dq_sys_door_open(SYS_OPEN_BY_PASSWORD);
 478   5                key_len = 0;
 479   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 480   5              }
 481   4              else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 482   4              {
 483   5                if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == 0xFF)
 484   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 485   5                else
 486   5                {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 9   

 487   6      #ifdef __LOCK_BUS_SUPPORT__
 488   6                  if (admin_check_type == 1)
 489   6                  {
 490   7                    mmi_dq_fs_set_business_flag(0);
 491   7                    mmi_dq_aud_play_with_id(AUD_ID_OUT_CLOSED);
 492   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 493   7                  }
 494   6                  else
 495   6      #endif
 496   6                  {
 497   7                    mmi_dq_sys_set_menu_father_id(STR_ID_SYSTEM);
 498   7                    mmi_dq_sys_show_cur_menu_list();
 499   7                  }
 500   6                }
 501   5                key_len = 0;
 502   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 503   5              }
 504   4              else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_DEL_PWD)||(status == SYS_STATUS_ADD_A
             -DMIN_PWD)||(status == SYS_STATUS_CHG_ADMIN_PWD)||(status == SYS_STATUS_ADD_110_PWD))
 505   4              {
 506   5                if (opt_time == OPT_ONE_TIME)
 507   5                {
 508   6                  if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 509   6                    mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 510   6                  else if (status == SYS_STATUS_DEL_PWD)
 511   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 512   6                  else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 513   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 514   6                  else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 515   6                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 516   6      
 517   6                  opt_time = OPT_TWO_TIME;
 518   6                  key_len = 0;
 519   6                  memset(input_key_2, 0xFF, sizeof(input_key_2));
 520   6                }
 521   5                else if (opt_time == OPT_TWO_TIME)
 522   5                {
 523   6                  if (0 == memcmp(input_key_1, input_key_2, PWD_INPUT_MAX_LEN))
 524   6                  {
 525   7                    if (status == SYS_STATUS_DEL_PWD)
 526   7                    {
 527   8                      unsigned char del_index = mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_USER);
 528   8                      if (del_index == 0xFF)
 529   8                        mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_EXIST);
 530   8                      else
 531   8                      {
 532   9                        if (mmi_dq_fs_del_pwd(del_index, FDS_USE_TYPE_USER) == RET_SUCESS)
 533   9                          mmi_dq_aud_play_with_id(AUD_ID_DEL_PWD_SUCESS);
 534   9                        else
 535   9                          mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
 536   9                        mmi_dq_sys_del_pwd_con();
 537   9                      }
 538   8                    }
 539   7                    else if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ALL) != 0xFF)
 540   7                      mmi_dq_aud_play_with_id(AUD_ID_PWD_EXIST);
 541   7                    else
 542   7                    {
 543   8                      if (status == SYS_STATUS_ADD_PWD)
 544   8                      {
 545   9                        if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_USER) == RET_FAIL)
 546   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 547   9                        else
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 10  

 548   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_PWD_SUCESS);
 549   9                        mmi_dq_sys_add_pwd_con();
 550   9                      }
 551   8                      else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 552   8                      {
 553   9                        if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 554   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 555   9                        else
 556   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_INIT_SUCESS);
 557   9                        mmi_dq_sys_chg_admin_fp_No1();
 558   9                      }
 559   8                      else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 560   8                      {
 561   9                        if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 562   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 563   9                        else
 564   9                          mmi_dq_aud_play_with_id(AUD_ID_CHG_ADMIN_PWD_SUCESS);
 565   9                        mmi_dq_sys_show_cur_menu_list();
 566   9                      }
 567   8      #ifdef __LOCK_110_SUPPORT__
 568   8                      else if (status == SYS_STATUS_ADD_110_PWD)
 569   8                      {
 570   9                        if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_110) == RET_FAIL)
 571   9                          mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 572   9                        else
 573   9                        {
 574  10      #ifdef __LOCK_WIFI_SUPPORT__
 575  10                          mmi_dq_wifi_set_110();
 576  10      #endif
 577  10                          mmi_dq_aud_play_with_id(AUD_ID_ADD_PWD_SUCESS);
 578  10                        }
 579   9                        mmi_dq_sys_show_cur_menu_list();
 580   9                      }
 581   8      #endif
 582   8                    }
 583   7                  }
 584   6                  else
 585   6                  {
 586   7                    mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_SAME_RETRY);
 587   7                  }
 588   6                  mmi_ms_pwd_init_var();
 589   6                }
 590   5              }
 591   4            }
 592   3            return;
 593   3          }
 594   2          break;
 595   2      #ifdef __LOCK_FP_SUPPORT__
 596   2        case SYS_STATUS_ADD_FP:
 597   2        case SYS_STATUS_DEL_FP:
 598   2      #ifdef __LOCK_110_SUPPORT__
 599   2        case SYS_STATUS_ADD_110_FP:
 600   2        case SYS_STATUS_DEL_110_FP:
 601   2      #endif
 602   2      #endif
 603   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 604   2        case SYS_STATUS_ADD_RFID:
 605   2        case SYS_STATUS_DEL_RFID:
 606   2      #endif
 607   2          if (key_val == KEY_S)
 608   2          {
 609   3            mmi_dq_aud_play_key_tone();
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 11  

 610   3            mmi_dq_sys_show_cur_menu_list();
 611   3          }
 612   2          break;
 613   2      #ifdef __LOCK_FP_SUPPORT__
 614   2        case SYS_STATUS_ADD_ADMIN_FP1:
 615   2        case SYS_STATUS_ADD_ADMIN_FP2:
 616   2          if (key_val == KEY_S)
 617   2          {
 618   3            mmi_dq_aud_play_key_tone();
 619   3            if (0 == mmi_dq_fs_get_admin_status())
 620   3              mmi_dq_sys_lock_add_admin_suc();
 621   3            else
 622   3              mmi_dq_sys_show_cur_menu_list();
 623   3          }
 624   2          break;
 625   2      #endif
 626   2        case SYS_STATUS_CLR_PWD:
 627   2        case SYS_STATUS_ADD_PWD_CON:
 628   2        case SYS_STATUS_DEL_PWD_CON:
 629   2      #ifdef __LOCK_FP_SUPPORT__
 630   2        case SYS_STATUS_CLR_FP:
 631   2        case SYS_STATUS_ADD_FP_CON:
 632   2        case SYS_STATUS_DEL_FP_CON:
 633   2      #endif
 634   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 635   2        case SYS_STATUS_CLR_RFID:
 636   2        case SYS_STATUS_ADD_RFID_CON:
 637   2        case SYS_STATUS_DEL_RFID_CON:
 638   2      #endif
 639   2        case SYS_STATUS_RESTORE_LOCK_CON:
 640   2          if (key_val == KEY_H)
 641   2          {
 642   3            mmi_dq_aud_play_key_tone();
 643   3            switch (status)
 644   3            {
 645   4            case SYS_STATUS_CLR_PWD:
 646   4              if (RET_SUCESS == mmi_dq_fs_clr_pwd())
 647   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_SUCESS);
 648   4              else
 649   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_FAIL);
 650   4              mmi_dq_sys_show_cur_menu_list();
 651   4              break;
 652   4      #ifdef __LOCK_FP_SUPPORT__
 653   4            case SYS_STATUS_CLR_FP:
 654   4              if (RET_SUCESS == mmi_dq_fs_clr_fp())
 655   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_SUCESS);
 656   4              else
 657   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_FAIL);
 658   4              mmi_dq_sys_show_cur_menu_list();
 659   4              break;
 660   4      #endif
 661   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
 662   4            case SYS_STATUS_CLR_RFID:
 663   4              if (RET_SUCESS == mmi_dq_fs_clr_rfid())
 664   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_SUCESS);
 665   4              else
 666   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_FAIL);
 667   4              mmi_dq_sys_show_cur_menu_list();
 668   4              break;
 669   4      #endif
 670   4            case SYS_STATUS_ADD_PWD_CON:
 671   4              mmi_dq_sys_add_pwd();
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 12  

 672   4              break;
 673   4            case SYS_STATUS_DEL_PWD_CON:
 674   4              mmi_dq_sys_del_pwd();
 675   4              break;
 676   4      #ifdef __LOCK_FP_SUPPORT__
 677   4            case SYS_STATUS_ADD_FP_CON:
 678   4              mmi_dq_sys_add_fp();
 679   4              break;
 680   4            case SYS_STATUS_DEL_FP_CON:
 681   4              mmi_dq_sys_del_fp();
 682   4              break;
 683   4      #endif
 684   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
 685   4            case SYS_STATUS_ADD_RFID_CON:
 686   4              mmi_dq_sys_add_rf();
 687   4              break;
 688   4            case SYS_STATUS_DEL_RFID_CON:
 689   4              mmi_dq_sys_del_rf();
 690   4              break;
 691   4      #endif
 692   4            case SYS_STATUS_RESTORE_LOCK_CON:
 693   4              mmi_dq_sys_restore_lock();
 694   4              break;
 695   4            }
 696   3          }
 697   2          else if (key_val == KEY_S)
 698   2          {
 699   3            mmi_dq_aud_play_key_tone();
 700   3            mmi_dq_sys_show_cur_menu_list();
 701   3          }
 702   2          break;
 703   2        case SYS_STATUS_SYS_MENU:
 704   2          if (key_val == KEY_S)
 705   2          {
 706   3            mmi_dq_aud_play_key_tone();
 707   3            mmi_dq_sys_get_pre_menu_list();
 708   3          }
 709   2          else if (key_val != KEY_0 && key_val <= mmi_dq_sys_get_menu_count())
 710   2          {
 711   3            mmi_dq_aud_play_key_tone();
 712   3            mmi_dq_sys_exe_menu_fun(key_val - 1);
 713   3          }
 714   2          break;
 715   2      #ifdef __FACTORY_TEST_SUPPORT__
 716   2        case SYS_STATUS_FM_MODE:
 717   2        {
 718   3          unsigned char str = mmi_dq_factory_mode_get_test_project();
 719   3          if (str == STR_ID_KEY)
 720   3          {
 721   4            // mmi_dq_aud_play_key_num(key_val);
 722   4            mmi_dq_aud_play_key_tone();
 723   4            mmi_dq_factory_mode_key_test(key_val);
 724   4          }
 725   3          else if (str == STR_ID_MOTO)
 726   3          {
 727   4            if (key_val == KEY_S)
 728   4            {
 729   5              mmi_dq_aud_play_key_tone();
 730   5              mmi_dq_factory_mode_motor_test_back();
 731   5              if (mmi_dq_fs_get_factory_flag() != 0)
 732   5                mmi_dq_factory_mode_test_stop();
 733   5              else
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 13  

 734   5              {
 735   6                delay_ms(600);
 736   6                mmi_dq_factory_mode_motor_test();
 737   6              }
 738   5            }
 739   4            else if (key_val == KEY_H)
 740   4            {
 741   5              mmi_dq_aud_play_key_tone();
 742   5              mmi_dq_factory_mode_motor_test_back();
 743   5              mmi_dq_factory_mode_test_item_result(STR_ID_MOTO, 1);
 744   5            }
 745   4          }
 746   3          else if (mmi_dq_fs_get_factory_flag() != 0)
 747   3          {
 748   4            mmi_dq_aud_play_key_tone();
 749   4            mmi_dq_factory_mode_test_stop();
 750   4          }
 751   3        }
 752   2        break;
 753   2      #endif
 754   2        case SYS_STATUS_WIFI_MODE:
 755   2          //if(key_val == KEY_S)
 756   2          //{
 757   2          mmi_dq_aud_stop();
 758   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
 759   2          //  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 760   2          //}
 761   2          break;
 762   2        case SYS_STATUS_LOW_POWER:
 763   2          mmi_dq_aud_stop();
 764   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 765   2          break;
 766   2        default:
 767   2          break;
 768   2        }
 769   1        return;
 770   1      }
 771          
 772          #ifdef __LOCK_FP_SUPPORT__
 773          /*
 774          parameter: 
 775            none
 776          return :
 777            none
 778          */
 779          void mmi_ms_fps_opt_fun(unsigned char fps_val)
 780          {
 781   1        RET_VAL retval = 0;
 782   1        unsigned short index = 0;
 783   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 784   1        if (status == SYS_STATUS_LOW_POWER)
 785   1        {
 786   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
 787   2          return;
 788   2        }
 789   1        else if (status == SYS_STATUS_WAIT_FOR_ENTER_SLEEP)
 790   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 791   1      
 792   1        if ((status != SYS_STATUS_INPUT_FP && status != SYS_STATUS_ADD_FP && status != SYS_STATUS_DEL_FP && statu
             -s != SYS_STATUS_ADD_ADMIN_FP1 && status != SYS_STATUS_ADD_ADMIN_FP2 && status != SYS_STATUS_ADD_110_FP && status != SYS_
             -STATUS_DEL_110_FP)
 793   1      #ifdef __FACTORY_TEST_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 14  

 794   1          || (status == SYS_STATUS_FM_MODE && STR_ID_FINGERPRINT != mmi_dq_factory_mode_get_test_project())
 795   1      #endif
 796   1        )
 797   1          return;
 798   1      
 799   1      #ifdef __LOCK_AUDIO_SUPPORT__
 800   1        mmi_dq_aud_stop();
 801   1      #endif
 802   1        if (mmi_dq_sys_door_state_check() == 1)
 803   1        {
 804   2          mmi_dq_aud_stop();
 805   2          mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 806   2          return;
 807   2        }
 808   1      
 809   1        retval = mmi_dq_fp_get_image();
 810   1      
 811   1        if (retval == 0)
 812   1        {
 813   2          if (opt_time != 0)
 814   2            retval = mmi_dq_fp_gen_char(0);
 815   2          if (retval == 0)
 816   2            retval = mmi_dq_fp_gen_char(opt_time);
 817   2          if (retval == 0)
 818   2          {
 819   3            retval = mmi_dq_fp_high_speed_search(opt_time, &index);
 820   3            if (retval == 0)
 821   3            {
 822   4              if (status == SYS_STATUS_INPUT_FP)
 823   4              {
 824   5                retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_ALL);
 825   5                if (retval == RET_SUCESS)
 826   5                {
 827   6                  mmi_dq_fp_light(FP_GREEN);
 828   6      #ifdef __LOCK_110_SUPPORT__
 829   6                  if (mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_110) == RET_SUCESS)
 830   6                    mmi_dq_sys_door_open(SYS_OPEN_BY_110_FP);
 831   6                  else
 832   6      #endif
 833   6                    mmi_dq_sys_door_open(SYS_OPEN_BY_FP);
 834   6                }
 835   5                else
 836   5                {
 837   6                  mmi_dq_fp_light(FP_RED);
 838   6                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_FP);
 839   6                }
 840   5              }
 841   4              else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
 842   4              {
 843   5                mmi_dq_fp_light(FP_RED);
 844   5                mmi_dq_aud_play_with_id(AUD_ID_FP_EXIST);
 845   5              }
 846   4              else if (status == SYS_STATUS_DEL_FP || status == SYS_STATUS_DEL_110_FP)
 847   4              {
 848   5      #ifdef __LOCK_110_SUPPORT__
 849   5                if (status == SYS_STATUS_DEL_FP)
 850   5                  retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_USER);
 851   5                else if (status == SYS_STATUS_DEL_110_FP)
 852   5                  retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_110);
 853   5      #else
                        retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_USER);
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 15  

              #endif
 856   5                if (retval == RET_SUCESS)
 857   5                {
 858   6                  static unsigned char del_num = 0;
 859   6                  if (opt_time == OPT_ONE_TIME)
 860   6                  {
 861   7                    opt_time = OPT_TWO_TIME;
 862   7                    del_num = index;
 863   7                    mmi_dq_fp_light(FP_GREEN);
 864   7                    mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_FP_AGAIN);
 865   7                  }
 866   6                  else
 867   6                  {
 868   7                    //retval = mmi_dq_fp_match();
 869   7                    if (del_num == index)
 870   7                      retval = 0;
 871   7                    else
 872   7                      retval = 255;
 873   7                    if (retval == 0) //|| retval == 255)
 874   7                    {
 875   8      #ifdef __LOCK_110_SUPPORT__
 876   8                      if (status == SYS_STATUS_DEL_FP)
 877   8                        retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_USER);
 878   8                      else if (status == SYS_STATUS_DEL_110_FP)
 879   8                        retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_110);
 880   8      #else
                              retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_USER);
              #endif
 883   8                      if (retval == RET_SUCESS)
 884   8                      {
 885   9                        retval = mmi_dq_fp_delete(index);
 886   9                      }
 887   8                      if (retval == 0)
 888   8                      {
 889   9                        mmi_dq_fp_light(FP_GREEN);
 890   9                        mmi_dq_aud_play_with_id(AUD_ID_DEL_FP_SUCESS);
 891   9                      }
 892   8                      else
 893   8                      {
 894   9                        mmi_dq_fp_light(FP_RED);
 895   9                        mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
 896   9                      }
 897   8      #ifdef __LOCK_110_SUPPORT__
 898   8                      if (status == SYS_STATUS_DEL_FP)
 899   8                        mmi_dq_sys_del_fp_con();
 900   8                      else if (status == SYS_STATUS_DEL_110_FP)
 901   8                        mmi_dq_sys_show_cur_menu_list();
 902   8      #else
                              mmi_dq_sys_del_fp_con();
              #endif
 905   8                    }
 906   7                    else
 907   7                    {
 908   8                      mmi_dq_fp_light(FP_RED);
 909   8                      mmi_dq_aud_play_with_id(AUD_ID_FP_TWICE_NOT_SAME_RETRY);
 910   8                    }
 911   7                    opt_time = OPT_ONE_TIME;
 912   7                  }
 913   6                }
 914   5                else
 915   5                {
 916   6                  mmi_dq_fp_light(FP_RED);
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 16  

 917   6                  mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
 918   6                }
 919   5              }
 920   4            }
 921   3            else
 922   3            {
 923   4              if (status == SYS_STATUS_INPUT_FP)
 924   4              {
 925   5                mmi_dq_fp_light(FP_RED);
 926   5                mmi_dq_sys_door_open_fail(SYS_OPEN_BY_FP);
 927   5              }
 928   4              else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
 929   4              {
 930   5                if (opt_time == FPS_MAX_INPUT_TIME)
 931   5                {
 932   6                  retval = mmi_dq_fp_reg_module();
 933   6                  if (retval == 0)
 934   6                  {
 935   7                    if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
 936   7                    {
 937   8      #ifdef __LOCK_110_SUPPORT__
 938   8                      if (status == SYS_STATUS_ADD_110_FP)
 939   8                        index = mmi_dq_fs_get_fp_110_unuse_index();
 940   8                      else
 941   8      #endif
 942   8                        index = mmi_dq_fs_get_fp_unuse_index();
 943   8                      if (index == 0xFF)
 944   8                      {
 945   9                        mmi_dq_fp_light(FP_RED);
 946   9                        mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
 947   9                        mmi_dq_sys_show_cur_menu_list();
 948   9                      }
 949   8                      else
 950   8                      {
 951   9                        retval = mmi_dq_fp_store_char(0, index);
 952   9                        if (status == SYS_STATUS_ADD_FP)
 953   9                        {
 954  10                          if (retval == 0)
 955  10                          {
 956  11                            retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_USER);
 957  11                            if (retval != 0)
 958  11                              mmi_dq_fp_delete(index);
 959  11                          }
 960  10                          if (retval == 0)
 961  10                          {
 962  11                            mmi_dq_fp_light(FP_GREEN);
 963  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
 964  11                          }
 965  10                          else
 966  10                          {
 967  11                            mmi_dq_fp_light(FP_RED);
 968  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 969  11                          }
 970  10                          mmi_dq_sys_add_fp_con();
 971  10                        }
 972   9      #ifdef __LOCK_110_SUPPORT__
 973   9                        else if (status == SYS_STATUS_ADD_110_FP)
 974   9                        {
 975  10                          if (retval == 0)
 976  10                          {
 977  11                            retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_110);
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 17  

 978  11                            if (retval != 0)
 979  11                              mmi_dq_fp_delete(index);
 980  11                          }
 981  10                          if (retval == 0)
 982  10                          {
 983  11                            mmi_dq_fp_light(FP_GREEN);
 984  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
 985  11                            mmi_dq_wifi_set_110();
 986  11                          }
 987  10                          else
 988  10                          {
 989  11                            mmi_dq_fp_light(FP_RED);
 990  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
 991  11                          }
 992  10                          mmi_dq_sys_show_cur_menu_list();
 993  10                        }
 994   9      #endif
 995   9      #ifdef __FACTORY_TEST_SUPPORT__
 996   9                        else
 997   9                        {
 998  10                          if (retval == 0)
 999  10                          {
1000  11                            retval = mmi_dq_fp_delete(index);
1001  11                          }
1002  10                          if (retval == 0)
1003  10                          {
1004  11                            mmi_dq_fp_light(FP_GREEN);
1005  11                            mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 1);
1006  11                          }
1007  10                          else
1008  10                          {
1009  11                            mmi_dq_fp_light(FP_RED);
1010  11                            mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 0);
1011  11                          }
1012  10                        }
1013   9      #endif
1014   9                      }
1015   8                    }
1016   7                    else
1017   7                    {
1018   8                      if (status == SYS_STATUS_ADD_ADMIN_FP1)
1019   8                        index = 0;
1020   8                      else if (status == SYS_STATUS_ADD_ADMIN_FP2)
1021   8                        index = 1;
1022   8                      retval = mmi_dq_fp_delete(index);
1023   8                      if (retval == 0)
1024   8                        retval = mmi_dq_fp_store_char(0, index);
1025   8                      if (retval == 0)
1026   8                        retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_ADMIN);
1027   8                      if (retval == 0)
1028   8                      {
1029   9                        mmi_dq_fp_light(FP_GREEN);
1030   9                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
1031   9                      }
1032   8                      else
1033   8                      {
1034   9                        mmi_dq_fp_light(FP_RED);
1035   9                        mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
1036   9                      }
1037   8                      if (0 == mmi_dq_fs_get_admin_status())
1038   8                      {
1039   9                        if (status == SYS_STATUS_ADD_ADMIN_FP1)
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 18  

1040   9                          mmi_dq_sys_chg_admin_fp_No2();
1041   9                        else
1042   9                          mmi_dq_sys_lock_add_admin_suc();
1043   9                      }
1044   8                      else
1045   8                        mmi_dq_sys_show_cur_menu_list();
1046   8                    }
1047   7                  }
1048   6                  else
1049   6                  {
1050   7                    mmi_dq_fp_light(FP_RED);
1051   7                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
1052   7                  }
1053   6                  opt_time = OPT_ONE_TIME;
1054   6                }
1055   5                else
1056   5                {
1057   6                  opt_time++;
1058   6                  mmi_dq_fp_light(FP_GREEN);
1059   6                  mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
1060   6                }
1061   5              }
1062   4              else if (status == SYS_STATUS_DEL_FP)
1063   4              {
1064   5                mmi_dq_fp_light(FP_RED);
1065   5                mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
1066   5              }
1067   4            }
1068   3            return;
1069   3          }
1070   2        }
1071   1      
1072   1        mmi_dq_fp_light(FP_RED);
1073   1        mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
1074   1        return;
1075   1      }
*** WARNING C280 IN LINE 779 OF mmi_src\mmi_ms.c: 'fps_val': unreferenced local variable
1076          #endif
1077          
1078          #ifdef __LOCK_RFID_CARD_SUPPORT__
1079          /*
1080          parameter: 
1081            none
1082          return :
1083            none
1084          */
1085          void mmi_ms_rfid_opt_fun(unsigned char rfid_val)
1086          {
1087   1        RET_VAL retval = RET_SUCESS;
1088   1        unsigned char index = 0;
1089   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
1090   1      
1091   1        if (status == SYS_STATUS_LOW_POWER)
1092   1        {
1093   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
1094   2          return;
1095   2        }
1096   1        else if (status == SYS_STATUS_WAIT_FOR_ENTER_SLEEP)
1097   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1098   1      
1099   1        if ((status != SYS_STATUS_INPUT_RFID && status != SYS_STATUS_ADD_RFID && status != SYS_STATUS_DEL_RFID)
1100   1      #ifdef __FACTORY_TEST_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 19  

1101   1          || (status == SYS_STATUS_FM_MODE && STR_ID_RF_CARD != mmi_dq_factory_mode_get_test_project())
1102   1      #endif
1103   1        )
1104   1          return;
1105   1      
1106   1      #ifdef __LOCK_AUDIO_SUPPORT__
1107   1        mmi_dq_aud_stop();
1108   1      #endif
1109   1      
1110   1        if (mmi_dq_sys_door_state_check() == 1)
1111   1        {
1112   2          mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
1113   2          return;
1114   2        }
1115   1      #ifdef __FACTORY_TEST_SUPPORT__
1116   1        if (status == SYS_STATUS_FM_MODE)
1117   1        {
1118   2          retval = mmi_dq_rfid_gen_char(opt_time);
1119   2          if (retval == RET_SUCESS)
1120   2          {
1121   3            if (opt_time == OPT_ONE_TIME)
1122   3            {
1123   4              mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
1124   4              opt_time = OPT_TWO_TIME;
1125   4            }
1126   3            else
1127   3            {
1128   4              retval = mmi_dq_rfid_match();
1129   4              if (retval == RET_SUCESS)
1130   4      
1131   4                mmi_dq_factory_mode_test_item_result(STR_ID_RF_CARD, 1);
1132   4              else
1133   4                mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY);
1134   4              opt_time = OPT_ONE_TIME;
1135   4            }
1136   3          }
1137   2          return;
1138   2        }
1139   1      #endif
1140   1        retval = mmi_dq_rfid_search_by_temp(&index);
1141   1        if (retval == RET_SUCESS)
1142   1        {
1143   2          if (status == SYS_STATUS_INPUT_RFID)
1144   2          {
1145   3            mmi_dq_sys_door_open(SYS_OPEN_BY_RFID);
1146   3          }
1147   2          else if (status == SYS_STATUS_ADD_RFID)
1148   2          {
1149   3            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_EXIST);
1150   3          }
1151   2          else if (status == SYS_STATUS_DEL_RFID)
1152   2          {
1153   3            retval = mmi_dq_rfid_gen_char(opt_time);
1154   3            if (retval == RET_SUCESS)
1155   3            {
1156   4              if (opt_time == OPT_ONE_TIME)
1157   4              {
1158   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_RFCARD_AGAIN);
1159   5                opt_time = OPT_TWO_TIME;
1160   5              }
1161   4              else
1162   4              {
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 20  

1163   5                retval = mmi_dq_rfid_match();
1164   5                if (retval == RET_SUCESS)
1165   5                {
1166   6                  retval = mmi_dq_fs_del_rfid(index);
1167   6                  if (retval == RET_SUCESS)
1168   6                  {
1169   7                    mmi_dq_aud_play_with_id(AUD_ID_DEL_RFCARD_SUCESS);
1170   7                  }
1171   6                  else
1172   6                    mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
1173   6                  mmi_dq_sys_del_rf_con();
1174   6                }
1175   5                else
1176   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY);
1177   5                opt_time = OPT_ONE_TIME;
1178   5              }
1179   4            }
1180   3            else
1181   3              mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL_RETRY);
1182   3          }
1183   2        }
1184   1        else
1185   1        {
1186   2          if (status == SYS_STATUS_ADD_RFID)
1187   2          {
1188   3            retval = mmi_dq_rfid_gen_char(opt_time);
1189   3            if (retval == RET_SUCESS)
1190   3            {
1191   4              if (opt_time == OPT_ONE_TIME)
1192   4              {
1193   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
1194   5                opt_time = OPT_TWO_TIME;
1195   5              }
1196   4              else
1197   4              {
1198   5                retval = mmi_dq_rfid_match();
1199   5                if (retval == RET_SUCESS)
1200   5                {
1201   6                  retval = mmi_dq_rfid_store(0);
1202   6                  if (retval == RET_SUCESS)
1203   6                  {
1204   7                    mmi_dq_aud_play_with_id(AUD_ID_ADD_RFCARD_SUCESS);
1205   7                  }
1206   6                  else
1207   6                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
1208   6                  mmi_dq_sys_add_rf_con();
1209   6                }
1210   5                else
1211   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY);
1212   5                opt_time = OPT_ONE_TIME;
1213   5              }
1214   4            }
1215   3            else
1216   3              mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
1217   3          }
1218   2          else if (status == SYS_STATUS_INPUT_RFID)
1219   2            mmi_dq_sys_door_open_fail(SYS_OPEN_BY_RFID);
1220   2          else
1221   2            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_EXIST);
1222   2        }
1223   1      
1224   1        return;
C51 COMPILER V9.59.0.0   MMI_MS                                                            03/11/2021 16:02:31 PAGE 21  

1225   1      }
*** WARNING C280 IN LINE 1085 OF mmi_src\mmi_ms.c: 'rfid_val': unreferenced local variable
1226          #endif
1227          
1228          /*
1229          parameter: 
1230            none
1231          return :
1232            none
1233          */
1234          void mmi_ms_reset_opt_fun(void)
1235          {
1236   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
1237   1      
1238   1        if (status == SYS_STATUS_FM_MODE && STR_ID_RESET == mmi_dq_factory_mode_get_test_project())
1239   1        {
1240   2          mmi_dq_factory_mode_reset_test();
1241   2          return;
1242   2        }
1243   1        else
1244   1        {
1245   2          if (RET_SUCESS == mmi_dq_fs_reset())
1246   2            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1247   2          else
1248   2            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
1249   2      
1250   2          mmi_dq_sys_add_admin_pwd();
1251   2        }
1252   1      }
1253          
1254          /*
1255          parameter: 
1256            none
1257          return :
1258            none
1259          */
1260          void mmi_ms_wifi_opt_fun(void)
1261          {
1262   1        unsigned char type = mmi_dq_sys_get_wifi_check_type();
1263   1        if (type == 0)
1264   1          mmi_dq_wifi_check_connect();
1265   1        else if (type == 1)
1266   1          mmi_dq_wifi_check_open();
1267   1      }
1268          
1269          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3694    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     74      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
