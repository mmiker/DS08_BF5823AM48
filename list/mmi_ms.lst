C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_MS
OBJECT MODULE PLACED IN .\output\mmi_ms.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mmi_src\mmi_ms.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\
                    -Library\byd_standard_peripheral\include;.\byd_api\byd_key\include;.\byd_api\byd_mifare\include;.\byd_tool_comm;.\byd_rfi
                    -d;.\mmi_inc) DEBUG PRINT(.\list\mmi_ms.lst) TABS(2) OBJECT(.\output\mmi_ms.obj)

line level    source

   1          #ifndef __MMI_MS_C__
   2          #define __MMI_MS_C__
   3          
   4          #include "string.h"
   5          #include "mmi_ms.h"
   6          #include "mmi_key.h"
   7          #include "mmi_sys.h"
   8          #include "mmi_audio.h"
   9          #include "mmi_fps.h"
  10          #include "mmi_rfid.h"
  11          #include "mmi_com.h"
  12          #include "mmi_fs.h"
  13          #include "mmi_rst.h"
  14          #include "dqiot_drv.h"
  15          #include "delay.h"
  16          #include "mmi_fs.h"
  17          #include "mmi_fm.h"
  18          #include "mmi_wifi.h"
  19          #include "dqiot_drv_wifi.h"
  20          #include <stdio.h>
  21          // #ifdef __LOCK_VIRTUAL_PASSWORD__
  22          #include "dq_sdk_main.h"
  23          #include "mmi_ms.h"
  24          // #endif
  25          #ifdef __LOCK_DECODE_SUPPORT__
  26          #include "mmi_decode.h"
  27          #endif
  28          
  29          unsigned char input_key_1[KEY_INPUT_MAX_LEN];
  30          unsigned char input_key_2[KEY_INPUT_MAX_LEN];
  31          unsigned char key_len = 0;
  32          OPERATE_TIME opt_time = OPT_TIME_INVALID;
  33          static SYS_BASE_STATUS data sys_state = SYS_STATUS_INVALID;
  34          
  35          static unsigned char data key_last_value = KEY_INVALID;
  36          #ifdef __LOCK_RFID_CARD_SUPPORT__
  37          static unsigned char rfid_last_flag = 0;
  38          #endif
  39          #ifdef __LOCK_BUS_SUPPORT__
  40          static unsigned char admin_check_type = 0;
  41          #endif
  42          
  43          static unsigned char g_dbl_open_mode_pwd_flag = 0;
  44          static unsigned char g_dbl_open_mode_fp_flag = 0;
  45          static unsigned char g_dbl_open_mode_rf_flag = 0;
  46          
  47          // extern void printfS(char *show, char *status);
  48          // extern void printfV(char *show, int value);
  49          
  50          /*
  51          parameter: 
  52            none
  53          return :
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 2   

  54            none
  55          */
  56          void mmi_task_proc(void)
  57          {
  58   1        unsigned char touch_value = 0xFF;
  59   1        unsigned char key_value = KEY_INVALID;
  60   1      
  61   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
  62   1        if (mmi_dq_sys_get_rfid_flag() == 1)
  63   1        {
  64   2          //check rfid press
  65   2          if (mmi_dq_rfid_check() == RET_SUCESS)
  66   2          {
  67   3            if (mmi_dq_rfid_work() == RET_SUCESS)
  68   3            {
  69   4              if (rfid_last_flag == 0)
  70   4              {
  71   5                rfid_last_flag = 1;
  72   5                mmi_dq_ms_set_msg_que(QUE_EVENT_RFID, QUE_PRO_LOW, 0);
  73   5              }
  74   4            }
  75   3            else
  76   3            {
  77   4              rfid_last_flag = 0;
  78   4            }
  79   3          }
  80   2        }
  81   1      #endif
  82   1        //check key press
  83   1        touch_value = mmi_dq_key_work();
  84   1        if (touch_value != 0xFF)
  85   1        {
  86   2          key_value = mmi_dq_get_key_map(touch_value);
  87   2          if (key_value != KEY_INVALID)
  88   2          {
  89   3            if (key_last_value != key_value)
  90   3            {
  91   4              key_last_value = key_value;
  92   4              mmi_dq_ms_set_msg_que(QUE_EVENT_KEY, QUE_PRO_LOW, key_value);
  93   4            }
  94   3          }
  95   2          else
  96   2            key_last_value = KEY_INVALID;
  97   2        }
  98   1        else
  99   1          key_last_value = KEY_INVALID;
 100   1      
 101   1      #ifdef __LOCK_AUDIO_SUPPORT__
 102   1        if (mmi_dq_aud_get_end_flag() != 0)
 103   1          mmi_dq_ms_set_msg_que(QUE_EVENT_AUDIO_END, QUE_PRO_LOW, 0);
 104   1      #endif
 105   1      
 106   1        if (mmi_dq_rst_get_state() != 0)
 107   1          mmi_dq_ms_set_msg_que(QUE_EVENT_RST, QUE_PRO_LOW, 0);
 108   1      
 109   1        if (mmi_dq_sys_get_timer2_flag() != 0)
 110   1          mmi_dq_ms_set_msg_que(QUE_EVENT_TIMER_END, QUE_PRO_LOW, 0);
 111   1      
 112   1      #ifdef __LOCK_FP_SUPPORT__
                  //check fp press
                  // if (mmi_dq_fp_work() != 0)
                  //  mmi_dq_ms_set_msg_que(QUE_EVENT_FP, QUE_PRO_LOW, 0);
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 3   

              #endif
 117   1      
 118   1      #ifdef __LOCK_WIFI_SUPPORT__
 119   1        if (mmi_dq_sys_get_wifi_check_flag() != 0)
 120   1          mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK, QUE_PRO_LOW, 0);
 121   1      #endif
 122   1      
 123   1        return;
 124   1      }
 125          
 126          /*
 127          parameter: 
 128            none
 129          return :
 130            none
 131          */
 132          void mmi_sleep_task_proc(void)
 133          {
 134   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 135   1        unsigned char ret = 0xFF;
 136   1        static unsigned char time_count = 0;
 137   1      
 138   1        time_count++;
 139   1        if (time_count > 4)
 140   1        {
 141   2          time_count = 0;
 142   2          ret = mmi_dq_rfid_check();
 143   2        }
 144   1      #endif
 145   1      
 146   1        if (
 147   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 148   1          (ret == RET_SUCESS) ||
 149   1      #endif
 150   1          (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() != 0)
 151   1      #ifdef __LOCK_FP_SUPPORT__
                  || (mmi_dq_fp_get_pin() == 1)
              #endif
 154   1        )
 155   1        {
 156   2          key_last_value = mmi_dq_get_key_map(dqiot_drv_get_touch_value());
 157   2          mmi_dq_sys_wake_up();
 158   2        }
 159   1      
 160   1      #ifdef __LOCK_WIFI_SUPPORT__
 161   1        //if(mmi_dq_sys_get_wifi_check_flag() != 0)
 162   1        //  mmi_dq_ms_set_msg_que(QUE_EVENT_WIFI_CHECK,QUE_PRO_LOW,0);
 163   1      #endif
 164   1      
 165   1        return;
 166   1      }
 167          
 168          /*
 169          parameter: 
 170            none
 171          return :
 172            none
 173          */
 174          void mmi_wait_sleep_task_proc(void)
 175          {
 176   1      //unsigned int timer1_count = 0;
 177   1      #ifdef __LOCK_WIFI_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 4   

 178   1        if (mmi_dq_wifi_get_running_flag() == 1)
 179   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 180   1        //if((mmi_dq_rfid_check() == RET_SUCESS) || (mmi_dq_key_check() != 0) || (mmi_dq_rst_get_pin() == 0))
 181   1        else
 182   1      #endif
 183   1          if (mmi_dq_ms_get_run_flag() == 0)
 184   1        {
 185   2          mmi_dq_sys_enter_sleep();
 186   2        }
 187   1      
 188   1        return;
 189   1      }
 190          
 191          /*
 192          parameter: 
 193            none
 194          return :
 195            none
 196          */
 197          unsigned char mmi_dq_ms_get_run_flag(void)
 198          {
 199   1        if ((key_last_value == KEY_INVALID)
 200   1      #ifdef __LOCK_AUDIO_SUPPORT__
 201   1          && (mmi_dq_aud_get_state() == 0)
 202   1      #endif
 203   1          && (mmi_dq_rst_get_pin() == 0)
 204   1      #ifdef __LOCK_FP_SUPPORT__
                  && (mmi_dq_fp_get_pin() != 1)
              #endif
 207   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
 208   1          && rfid_last_flag == 0
 209   1      #endif
 210   1        )
 211   1          return 0;
 212   1      
 213   1        return 1;
 214   1      }
 215          
 216          /*
 217          parameter: 
 218            none
 219          return :
 220            none
 221          */
 222          void mmi_dq_ms_sys_msg_handle(void)
 223          {
 224   1        Sys_MSG_Queue_M sys_msg_que;
 225   1        if (mmi_OutQueue(&sys_msg_que))
 226   1        {
 227   2          mmi_dq_sys_sleep_timer_reset();
 228   2          switch (sys_msg_que.que_event)
 229   2          {
 230   3          case QUE_EVENT_KEY:
 231   3            mmi_ms_pwd_opt_fun(sys_msg_que.que_data);
 232   3            break;
 233   3      #ifdef __LOCK_FP_SUPPORT__
                  case QUE_EVENT_FP:
                    mmi_ms_fps_opt_fun(sys_msg_que.que_data);
                    break;
              #endif
 238   3      #ifdef __LOCK_RFID_CARD_SUPPORT__
 239   3          case QUE_EVENT_RFID:
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 5   

 240   3            mmi_ms_rfid_opt_fun(sys_msg_que.que_data);
 241   3            break;
 242   3      #endif
 243   3          case QUE_EVENT_RST:
 244   3            mmi_ms_reset_opt_fun();
 245   3            break;
 246   3          case QUE_EVENT_AUDIO_END:
 247   3      
 248   3            break;
 249   3          case QUE_EVENT_TIMER_END:
 250   3            mmi_dq_sys_delay_event_pro();
 251   3            break;
 252   3      #ifdef __LOCK_WIFI_SUPPORT__
 253   3          case QUE_EVENT_WIFI_CHECK:
 254   3            mmi_ms_wifi_opt_fun();
 255   3            break;
 256   3      #endif
 257   3          default:
 258   3            break;
 259   3          }
 260   2        }
 261   1      }
 262          
 263          /*
 264          parameter: 
 265            none
 266          return :
 267            none
 268          */
 269          void mmi_dq_ms_set_msg_que(SYS_QUEUE_EVENT q_event, SYS_QUEUE_PRO q_pro, unsigned char q_data)
 270          {
 271   1        Sys_MSG_Queue_M que;
 272   1        que.que_event = q_event;
 273   1        que.que_pro = q_pro;
 274   1        que.que_data = q_data;
 275   1        //printf("mmi_dq_ms_set_msg_que  event : %d",q_event);
 276   1        mmi_InQueue(que);
 277   1        return;
 278   1      }
 279          
 280          /*
 281          parameter: 
 282            none
 283          return :
 284            none
 285          */
 286          void mmi_dq_ms_set_sys_state(SYS_BASE_STATUS state)
 287          {
 288   1        sys_state = state;
 289   1        return;
 290   1      }
 291          
 292          /*
 293          parameter: 
 294            none
 295          return :
 296            none
 297          */
 298          SYS_BASE_STATUS mmi_dq_ms_get_sys_state(void)
 299          {
 300   1        return sys_state;
 301   1      }
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 6   

 302          
 303          /*
 304          parameter: 
 305            none
 306          return :
 307            none
 308          */
 309          void mmi_ms_pwd_init_var(void)
 310          {
 311   1        key_len = 0;
 312   1        opt_time = OPT_ONE_TIME;
 313   1        memset(input_key_1, 0xFF, sizeof(input_key_1));
 314   1        memset(input_key_2, 0xFF, sizeof(input_key_2));
 315   1      }
 316          
 317          /*
 318          parameter: 
 319            none
 320          return :
 321            none
 322          */
 323          void mmi_ms_opt_time_init(void)
 324          {
 325   1        opt_time = OPT_ONE_TIME;
 326   1      }
 327          
 328          /*
 329          parameter: 
 330            none
 331          return :
 332            none
 333          */
 334          void mmi_ms_pwd_opt_fun(unsigned char key_val)
 335          {
 336   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
 337   1        //printf("mmi_ms_pwd_opt_fun status: 0x%x  key: %d",status,key_val);
 338   1        switch (status)
 339   1        {
 340   2        case SYS_STATUS_WAIT_FOR_ENTER_SLEEP:
 341   2          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 342   2          status = SYS_STATUS_IDLE;
 343   2      #ifdef __LOCK_DECODE_SUPPORT__
 344   2        case SYS_STATUS_ADD_DECODE_RANDOM:
 345   2          if (key_len == 0)
 346   2          {
 347   3            if (key_val == KEY_S)
 348   3            {
 349   4      #ifdef __LOCK_AUDIO_SUPPORT__
 350   4              mmi_dq_aud_play_key_tone();
 351   4      #endif
 352   4              mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 353   4              mmi_dq_sys_show_cur_menu_list();
 354   4              break;
 355   4            }
 356   3            else if (key_val == KEY_H)
 357   3            {
 358   4      #ifdef __LOCK_AUDIO_SUPPORT__
 359   4              mmi_dq_aud_play_key_tone();
 360   4      #endif
 361   4      #ifdef __LOCK_AUDIO_SUPPORT__
 362   4              mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 363   4      #endif
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 7   

 364   4              break;
 365   4            }
 366   3          }
 367   2      
 368   2      // mmi_dq_aud_play_key_num(key_val);
 369   2      #ifdef __LOCK_AUDIO_SUPPORT__
 370   2          mmi_dq_aud_play_key_tone();
 371   2      #endif
 372   2          //input pwd
 373   2          if ((key_val >= KEY_0 && key_val <= KEY_9) && key_len < KEY_INPUT_MAX_LEN)
 374   2          {
 375   3            if (opt_time == OPT_ONE_TIME)
 376   3            {
 377   4              input_key_1[key_len++] = key_val;
 378   4            }
 379   3          }
 380   2      
 381   2          if (key_val == KEY_S)
 382   2          {
 383   3            if (opt_time == OPT_ONE_TIME)
 384   3              input_key_1[key_len--] = 0xFF;
 385   3      
 386   3            if (key_len == 0)
 387   3            {
 388   4              if (opt_time == OPT_ONE_TIME)
 389   4              {
 390   5      #ifdef __LOCK_AUDIO_SUPPORT__
 391   5                mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 392   5      #endif
 393   5              }
 394   4            }
 395   3          }
 396   2          else if ((key_val == KEY_H) || (key_len == PWD_INPUT_DECODE_RANDOM))
 397   2          {
 398   3            if (key_len < PWD_INPUT_DECODE_RANDOM)
 399   3            {
 400   4      #ifdef __LOCK_AUDIO_SUPPORT__
 401   4              mmi_dq_aud_play_with_id(AUD_ID_PWD_68_LEN);
 402   4      #endif
 403   4              key_len = 0;
 404   4              if (opt_time == OPT_ONE_TIME)
 405   4                memset(input_key_1, 0xFF, sizeof(input_key_1));
 406   4            }
 407   3            else
 408   3            {
 409   4              if (opt_time == OPT_ONE_TIME)
 410   4              {
 411   5                decode_check_code(input_key_1, 15);
 412   5                if (get_decode.chk_key_2[0] == input_key_1[13] && get_decode.chk_key_2[1] == input_key_1[14])
 413   5                {
 414   6                  unsigned char i, j;
 415   6                  unsigned char a[10][5] = {
 416   6                    {0x26, 0x41, 0x53, 0x89, 0x70},
 417   6                    {0x43, 0x16, 0x98, 0x25, 0x07},
 418   6                    {0x92, 0x35, 0x64, 0x70, 0x81},
 419   6                    {0x72, 0x59, 0x03, 0x18, 0x46},
 420   6                    {0x02, 0x85, 0x19, 0x63, 0x74},
 421   6                    {0x12, 0x05, 0x69, 0x43, 0x87},
 422   6                    {0x18, 0x95, 0x42, 0x76, 0x30},
 423   6                    {0x09, 0x58, 0x26, 0x17, 0x34},
 424   6                    {0x10, 0x63, 0x52, 0x74, 0x89},
 425   6                    {0x21, 0x69, 0x50, 0x37, 0x84},
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 8   

 426   6                  };
 427   6      
 428   6                  for (i = 0; i < 10; i++)
 429   6                  {
 430   7                    for (j = 0; j < 5; j++)
 431   7                    {
 432   8                      g_pwd_signed_data[i].exchg_num[j] = a[i][j];
 433   8                    }
 434   7                  }
 435   6      
 436   6                  //解码
 437   6                  mmi_dq_decode_app_random_code(input_key_1);
 438   6                  decode_time_stamp_10num(input_key_1, 15, get_decode.sec_key_10, get_decode.exg_key_10);
 439   6      
 440   6                  //写flash
 441   6                  if (mmi_dq_fs_set_decode(FDS_USE_TYPE_ADMIN) == RET_SUCESS)
 442   6                  {
 443   7                    //时间戳转时间
 444   7                    localtime(get_decode.tim_key_10, &t);
 445   7      
 446   7                    dqiot_drv_uart0A_init();
 447   7                    printf("flash is success\n");
 448   7                    printf("A %04d-%02d-%02d %02d:%02d:%02d\r\n", t.tm_year, t.tm_mon + 1, t.tm_mday, t.tm_hour + 8, t.
             -tm_min, t.tm_sec);
 449   7                    dqiot_drv_uart0B_init();
 450   7      #ifdef __LOCK_AUDIO_SUPPORT__
 451   7                    mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
 452   7      #endif
 453   7                  }
 454   6                  else
 455   6                  {
 456   7      #ifdef __LOCK_AUDIO_SUPPORT__
 457   7                    mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 458   7      #endif
 459   7                    dqiot_drv_uart0A_init();
 460   7                    printf("flash is error\n");
 461   7                    dqiot_drv_uart0B_init();
 462   7                  }
 463   6      
 464   6                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 465   6                }
 466   5                else
 467   5                {
 468   6                  dqiot_drv_uart0A_init();
 469   6                  printf("check is error\n");
 470   6                  dqiot_drv_uart0B_init();
 471   6                  mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 472   6                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 473   6                }
 474   5      
 475   5                mmi_ms_pwd_init_var();
 476   5              }
 477   4            }
 478   3          }
 479   2          break;
 480   2      #endif
 481   2        case SYS_STATUS_INPUT_PWD:
 482   2        case SYS_STATUS_INPUT_ADMIN_PWD:
 483   2        case SYS_STATUS_ADD_PWD:
 484   2        case SYS_STATUS_DEL_PWD:
 485   2        case SYS_STATUS_ADD_ADMIN_PWD:
 486   2        case SYS_STATUS_CHG_ADMIN_PWD:
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 9   

 487   2      #ifdef __LOCK_110_SUPPORT__
 488   2        case SYS_STATUS_ADD_110_PWD:
 489   2      #endif
 490   2          if (mmi_dq_sys_door_state_check() == 1)
 491   2          {
 492   3      #ifdef __LOCK_AUDIO_SUPPORT__
 493   3            mmi_dq_aud_stop();
 494   3            mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
 495   3      #endif
 496   3      #ifdef __LOCK_WIFI_SUPPORT__
 497   3            mmi_dq_wifi_pw_alarm();
 498   3      #endif
 499   3            return;
 500   3          }
 501   2          if (key_len == 0)
 502   2          {
 503   3            if (key_val == KEY_S)
 504   3            {
 505   4              if (SYS_STATUS_ADD_ADMIN_PWD != status)
 506   4              {
 507   5      #ifdef __LOCK_AUDIO_SUPPORT__
 508   5                mmi_dq_aud_play_key_tone();
 509   5      #endif
 510   5                if (status == SYS_STATUS_INPUT_PWD)
 511   5                  //mmi_dq_sys_enter_sleep();
 512   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_WAIT_FOR_ENTER_SLEEP);
 513   5                else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 514   5                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 515   5      #ifdef __LOCK_WIFI_SUPPORT__
 516   5                else if (wifi_add_flag == 1)
 517   5                {
 518   6                  wifi_add_flag = 0xff;
 519   6                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 520   6                }
 521   5                else
 522   5      #endif
 523   5                  mmi_dq_sys_show_cur_menu_list();
 524   5              }
 525   4              break;
 526   4            }
 527   3            else if (key_val == KEY_H)
 528   3            {
 529   4              if (status == SYS_STATUS_INPUT_PWD)
 530   4              {
 531   5      #ifdef __LOCK_AUDIO_SUPPORT__
 532   5                mmi_dq_aud_play_key_tone();
 533   5      #endif
 534   5      #ifdef __LOCK_BUS_SUPPORT__
 535   5                admin_check_type = 0;
 536   5      #endif
 537   5      #ifdef __LOCK_AUDIO_SUPPORT__
 538   5                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 539   5      #endif
 540   5                mmi_dq_ms_set_sys_state(SYS_STATUS_INPUT_ADMIN_PWD);
 541   5              }
 542   4              break;
 543   4            }
 544   3          }
 545   2      
 546   2      // mmi_dq_aud_play_key_num(key_val);
 547   2      #ifdef __LOCK_AUDIO_SUPPORT__
 548   2          mmi_dq_aud_play_key_tone();
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 10  

 549   2      #endif
 550   2          //input pwd
 551   2          if ((key_val >= KEY_0 && key_val <= KEY_9) && key_len < KEY_INPUT_MAX_LEN)
 552   2          {
 553   3            if ((status == SYS_STATUS_INPUT_PWD) || (status == SYS_STATUS_INPUT_ADMIN_PWD))
 554   3              input_key_1[key_len++] = key_val;
 555   3            else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_ADD_110_PWD)||(status == SYS_STATUS_AD
             -D_ADMIN_PWD))
 556   3            {
 557   4              if (opt_time == OPT_ONE_TIME)
 558   4              {
 559   5                input_key_1[key_len++] = key_val;
 560   5              }
 561   4              else if (opt_time == OPT_TWO_TIME)
 562   4              {
 563   5                input_key_2[key_len++] = key_val;
 564   5              }
 565   4            }
 566   3          }
 567   2      
 568   2          if (key_val == KEY_S)
 569   2          {
 570   3            if (opt_time == OPT_ONE_TIME)
 571   3              input_key_1[key_len--] = 0xFF;
 572   3            else if (opt_time == OPT_TWO_TIME)
 573   3              input_key_2[key_len--] = 0xFF;
 574   3      
 575   3            if (key_len == 0)
 576   3            {
 577   4              if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 578   4      #ifdef __LOCK_AUDIO_SUPPORT__
 579   4                mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD)
 580   4      #endif
 581   4                  ;
 582   4              else if (opt_time == OPT_ONE_TIME)
 583   4              {
 584   5      #ifdef __LOCK_AUDIO_SUPPORT__
 585   5                if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 586   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_68_PWD);
 587   5                else if (status == SYS_STATUS_DEL_PWD)
 588   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_NUM);
 589   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 590   5                  mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_FIRST);
 591   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 592   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD);
 593   5      #endif
 594   5              }
 595   4              else if (opt_time == OPT_TWO_TIME)
 596   4              {
 597   5      #ifdef __LOCK_AUDIO_SUPPORT__
 598   5                if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 599   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 600   5                else if (status == SYS_STATUS_DEL_PWD)
 601   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 602   5                else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 603   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 604   5                else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 605   5                  mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 606   5      #endif
 607   5              }
 608   4            }
 609   3          }
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 11  

 610   2          else if (key_val == KEY_H) //|| (key_len == PWD_INPUT_MAX_LEN))
 611   2          {
 612   3            if (key_len < PWD_INPUT_MIN_LEN)
 613   3            {
 614   4              if (status == SYS_STATUS_INPUT_PWD)
 615   4              {
 616   5                if (key_len == 2 && input_key_1[0] == KEY_0 && input_key_1[1] == KEY_0) //00 远程开门
 617   5                  mmi_dq_sys_wifi_open();
 618   5      #ifdef __LOCK_WIFI_SUPPORT__
 619   5                else if (key_len == 1 && input_key_1[0] == KEY_5) //5 添加删除密码/指纹/RF卡
 620   5                  mmi_dq_wifi_cmd_add_del();
 621   5                else if (key_len == 1 && input_key_1[0] == KEY_6) //6 设置拍照/录像开关
 622   5                  mmi_dq_wifi_pv_switch();
 623   5                  // else if (key_len == 2 && input_key_1[0] == KEY_1 && input_key_1[1] == KEY_8) //18 应急钥匙开
             -门成功
 624   5                  //  mmi_dq_wifi_open_by_key();
 625   5                  // else if (key_len == 2 && input_key_1[0] == KEY_1 && input_key_1[1] == KEY_9) //19 门未关
 626   5                  //  mmi_dq_wifi_close_over_time();
 627   5                  // else if (key_len == 2 && input_key_1[0] == KEY_2 && input_key_1[1] == KEY_0) //20 震动报警
 628   5                  //  mmi_dq_wifi_via_alarm();
 629   5                  // else if (key_len == 2 && input_key_1[0] == KEY_2 && input_key_1[1] == KEY_5) //25 睡眠
 630   5                  //  mmi_dq_wifi_sleep();
 631   5                  // else if (key_len == 2 && input_key_1[0] == KEY_2 && input_key_1[1] == KEY_6) //26 唤醒
 632   5                  //  mmi_dq_wifi_wakeup();
 633   5                  // else if (key_len == 2 && input_key_1[0] == KEY_2 && input_key_1[1] == KEY_7) //27 拍照
 634   5                  //  mmi_dq_wifi_take_photos();
 635   5                  // else if (key_len == 2 && input_key_1[0] == KEY_2 && input_key_1[1] == KEY_8) //28 录像
 636   5                  //  mmi_dq_wifi_take_videos();
 637   5                  // else if (key_len == 2 && input_key_1[0] == KEY_3 && input_key_1[1] == KEY_0) //30 查询网络状
             -态
 638   5                  //  mmi_dq_wifi_check_net();
 639   5                  // else if (key_len == 2 && input_key_1[0] == KEY_3 && input_key_1[1] == KEY_1) //31 Airkiss配网(a
             -dmin 8)
 640   5                  //  mmi_dq_wifi_arikiss_con();
 641   5                  // else if (key_len == 2 && input_key_1[0] == KEY_3 && input_key_1[1] == KEY_2) //32 二维码配网
             -(admin 9)
 642   5                  //  mmi_dq_wifi_code_con();
 643   5      #endif
 644   5      #ifdef __LOCK_BUS_SUPPORT__
 645   5                else if (key_len == 2 && input_key_1[0] == KEY_0 && input_key_1[1] == KEY_1) //01
 646   5                {
 647   6      
 648   6                  if (mmi_dq_fs_get_business_flag() == 1)
 649   6                  {
 650   7                    admin_check_type = 1;
 651   7      #ifdef __LOCK_AUDIO_SUPPORT__
 652   7                    mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD);
 653   7      #endif
 654   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_INPUT_ADMIN_PWD);
 655   7                  }
 656   6                  else
 657   6                  {
 658   7                    mmi_dq_fs_set_business_flag(1);
 659   7      #ifdef __LOCK_AUDIO_SUPPORT__
 660   7                    mmi_dq_aud_play_with_id(AUD_ID_OUT_OPEN);
 661   7      #endif
 662   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 663   7                  }
 664   6                }
 665   5      #endif
 666   5                else
 667   5                {
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 12  

 668   6                  mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 669   6                }
 670   5                key_len = 0;
 671   5                memset(input_key_1, 0xFF, sizeof(input_key_1));
 672   5              }
 673   4              else
 674   4              {
 675   5      #ifdef __LOCK_AUDIO_SUPPORT__
 676   5                mmi_dq_aud_play_with_id(AUD_ID_PWD_68_LEN);
 677   5      #endif
 678   5                key_len = 0;
 679   5                if (opt_time == OPT_ONE_TIME)
 680   5                  memset(input_key_1, 0xFF, sizeof(input_key_1));
 681   5                else if (opt_time == OPT_TWO_TIME)
 682   5                  memset(input_key_2, 0xFF, sizeof(input_key_2));
 683   5              }
 684   4            }
 685   3            else
 686   3            {
 687   4              if (key_len < PWD_INPUT_MAX_LEN)
 688   4              {
 689   5                if (status == SYS_STATUS_INPUT_PWD)
 690   5                {
 691   6                  //if(mmi_dq_fs_check_input_pwd(input_key_1,key_len,FDS_USE_TYPE_ALL) == 0xFF)
 692   6                  unsigned char ret = 0;
 693   6                  ret = mmi_dq_fs_check_input_pwd_for_open(input_key_1, key_len);
 694   6                  //printf("check input ret: %d",(unsigned int)ret);
 695   6                  if (ret == 0xFF)
 696   6                    mmi_dq_sys_door_open_fail(SYS_OPEN_BY_PASSWORD);
 697   6      #ifdef __LOCK_BUS_SUPPORT__
 698   6                  else if (ret == 0xFE && mmi_dq_fs_get_business_flag() == 1)
 699   6                  {
 700   7                    mmi_dq_fs_set_business_flag(0);
 701   7      #ifdef __LOCK_AUDIO_SUPPORT__
 702   7                    mmi_dq_aud_play_with_id(AUD_ID_OUT_CLOSED);
 703   7      #endif
 704   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 705   7                  }
 706   6      #endif
 707   6      #ifdef __LOCK_110_SUPPORT__
 708   6                  else if (ret == 1)
 709   6                    mmi_dq_sys_door_open(SYS_OPEN_BY_110_PASSWORD);
 710   6      #endif
 711   6                  else
 712   6                    mmi_dq_sys_door_open(SYS_OPEN_BY_PASSWORD);
 713   6                  key_len = 0;
 714   6                  memset(input_key_1, 0xFF, sizeof(input_key_1));
 715   6                }
 716   5                else if (status == SYS_STATUS_INPUT_ADMIN_PWD)
 717   5                {
 718   6                  if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == 0xFF)
 719   6      #ifdef __LOCK_AUDIO_SUPPORT__
 720   6                    mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY)
 721   6      #endif
 722   6                      ;
 723   6                  else
 724   6                  {
 725   7      #ifdef __LOCK_BUS_SUPPORT__
 726   7                    if (admin_check_type == 1)
 727   7                    {
 728   8                      mmi_dq_fs_set_business_flag(0);
 729   8      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 13  

 730   8                      mmi_dq_aud_play_with_id(AUD_ID_OUT_CLOSED);
 731   8      #endif
 732   8                      mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 733   8                    }
 734   7                    else
 735   7      #endif
 736   7                    {
 737   8                      mmi_dq_sys_set_menu_father_id(STR_ID_SYSTEM);
 738   8                      mmi_dq_sys_show_cur_menu_list();
 739   8                    }
 740   7                  }
 741   6                  key_len = 0;
 742   6                  memset(input_key_1, 0xFF, sizeof(input_key_1));
 743   6                }
 744   5                else // if((status == SYS_STATUS_ADD_PWD)||(status == SYS_STATUS_DEL_PWD)||(status == SYS_STATUS_ADD_
             -ADMIN_PWD)||(status == SYS_STATUS_CHG_ADMIN_PWD)||(status == SYS_STATUS_ADD_110_PWD))
 745   5                {
 746   6                  if (opt_time == OPT_ONE_TIME)
 747   6                  {
 748   7      #ifdef __LOCK_AUDIO_SUPPORT__
 749   7                    if (status == SYS_STATUS_ADD_PWD || status == SYS_STATUS_ADD_110_PWD)
 750   7                      mmi_dq_aud_play_with_id(AUD_ID_PWD_INPUT_AGAIN);
 751   7                    else if (status == SYS_STATUS_DEL_PWD)
 752   7                      mmi_dq_aud_play_with_id(AUD_ID_INPUT_DEL_PWD_AGAIN);
 753   7                    else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 754   7                      mmi_dq_aud_play_with_id(AUD_ID_INPUT_ADMIN_PWD_INIT_AGAIN);
 755   7                    else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 756   7                      mmi_dq_aud_play_with_id(AUD_ID_INPUT_NEW_ADMIN_PWD_AGAIN);
 757   7      #endif
 758   7      
 759   7                    opt_time = OPT_TWO_TIME;
 760   7                    key_len = 0;
 761   7                    memset(input_key_2, 0xFF, sizeof(input_key_2));
 762   7                  }
 763   6                  else if (opt_time == OPT_TWO_TIME)
 764   6                  {
 765   7                    if (0 == memcmp(input_key_1, input_key_2, PWD_INPUT_MAX_LEN))
 766   7                    {
 767   8                      if (status == SYS_STATUS_DEL_PWD)
 768   8                      {
 769   9                        unsigned char del_index = mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_USER);
 770   9                        if (del_index == 0xFF)
 771   9      #ifdef __LOCK_AUDIO_SUPPORT__
 772   9                          mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_EXIST)
 773   9      #endif
 774   9                            ;
 775   9                        else
 776   9                        {
 777  10                          if (mmi_dq_fs_del_pwd(del_index, FDS_USE_TYPE_USER) == RET_SUCESS)
 778  10                          {
 779  11                            get_index = del_index;
 780  11      #ifdef __LOCK_AUDIO_SUPPORT__
 781  11                            mmi_dq_aud_play_with_id(AUD_ID_DEL_PWD_SUCESS);
 782  11      #endif
 783  11      #ifdef __LOCK_WIFI_SUPPORT__
 784  11                            mmi_dq_wifi_del_password(get_index);
 785  11      #endif
 786  11                            // printfV("get_index", (int)get_index);
 787  11                          }
 788  10                          else
 789  10      #ifdef __LOCK_AUDIO_SUPPORT__
 790  10                            mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL)
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 14  

 791  10      #endif
 792  10                              ;
 793  10                          mmi_dq_sys_del_pwd_con();
 794  10                        }
 795   9                      }
 796   8                      else if (mmi_dq_fs_check_input_pwd(input_key_1, key_len, FDS_USE_TYPE_ALL) != 0xFF)
 797   8      #ifdef __LOCK_AUDIO_SUPPORT__
 798   8                        mmi_dq_aud_play_with_id(AUD_ID_PWD_EXIST)
 799   8      #endif
 800   8                          ;
 801   8                      else
 802   8                      {
 803   9                        if (status == SYS_STATUS_ADD_PWD)
 804   9                        {
 805  10                          if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_USER) == RET_FAIL)
 806  10      #ifdef __LOCK_AUDIO_SUPPORT__
 807  10                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL)
 808  10      #endif
 809  10                              ;
 810  10                          else
 811  10                          {
 812  11      #ifdef __LOCK_AUDIO_SUPPORT__
 813  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_PWD_SUCESS);
 814  11      #endif
 815  11      #ifdef __LOCK_WIFI_SUPPORT__
 816  11                            mmi_dq_wifi_add_password(get_index);
 817  11      #endif
 818  11                            // printfV("get_index", (int)get_index);
 819  11                          }
 820  10      #ifdef __LOCK_WIFI_SUPPORT__
 821  10                          if (wifi_add_flag == 1)
 822  10                          {
 823  11                            wifi_add_flag = 0xff;
 824  11                            mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 825  11                          }
 826  10                          else
 827  10      #endif
 828  10                            mmi_dq_sys_add_pwd_con();
 829  10                        }
 830   9                        else if (status == SYS_STATUS_ADD_ADMIN_PWD)
 831   9                        {
 832  10                          if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 833  10      #ifdef __LOCK_AUDIO_SUPPORT__
 834  10                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL)
 835  10      #endif
 836  10                              ;
 837  10                          else
 838  10                          {
 839  11      #ifdef __LOCK_AUDIO_SUPPORT__
 840  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_ADMIN_PWD_INIT_SUCESS);
 841  11      #endif
 842  11      #ifdef __LOCK_WIFI_SUPPORT__
 843  11                            mmi_dq_wifi_add_password(get_index);
 844  11      #endif
 845  11                            // printfV("get_index", (int)get_index);
 846  11                          }
 847  10      #ifdef __LOCK_FP_SUPPORT__
                                  mmi_dq_sys_chg_admin_fp_No1();
              #else
 850  10                          if (0 == mmi_dq_fs_get_admin_status())
 851  10                            mmi_dq_sys_lock_add_admin_suc();
 852  10                          else
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 15  

 853  10                            mmi_dq_sys_show_cur_menu_list();
 854  10      #endif
 855  10                        }
 856   9                        else if (status == SYS_STATUS_CHG_ADMIN_PWD)
 857   9                        {
 858  10                          if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_ADMIN) == RET_FAIL)
 859  10      #ifdef __LOCK_AUDIO_SUPPORT__
 860  10                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL)
 861  10      #endif
 862  10                              ;
 863  10                          else
 864  10                          {
 865  11      #ifdef __LOCK_AUDIO_SUPPORT__
 866  11                            mmi_dq_aud_play_with_id(AUD_ID_CHG_ADMIN_PWD_SUCESS);
 867  11      #endif
 868  11      #ifdef __LOCK_WIFI_SUPPORT__
 869  11                            mmi_dq_wifi_add_password(get_index);
 870  11      #endif
 871  11                            // printfV("get_index", (int)get_index);
 872  11                          }
 873  10                          mmi_dq_sys_show_cur_menu_list();
 874  10                        }
 875   9      #ifdef __LOCK_110_SUPPORT__
 876   9                        else if (status == SYS_STATUS_ADD_110_PWD)
 877   9                        {
 878  10                          if (mmi_dq_fs_set_pwd(input_key_1, key_len, FDS_USE_TYPE_110) == RET_FAIL)
 879  10      #ifdef __LOCK_AUDIO_SUPPORT__
 880  10                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL)
 881  10      #endif
 882  10                              ;
 883  10                          else
 884  10                          {
 885  11      #ifdef __LOCK_WIFI_SUPPORT__
 886  11                            mmi_dq_wifi_set_110();
 887  11      #endif
 888  11      #ifdef __LOCK_AUDIO_SUPPORT__
 889  11                            mmi_dq_aud_play_with_id(AUD_ID_ADD_PWD_SUCESS);
 890  11      #endif
 891  11      #ifdef __LOCK_WIFI_SUPPORT__
 892  11                            mmi_dq_wifi_add_password(get_index);
 893  11      #endif
 894  11                            // printfV("get_index", (int)get_index);
 895  11                          }
 896  10                          mmi_dq_sys_show_cur_menu_list();
 897  10                        }
 898   9      #endif
 899   9                      }
 900   8                    }
 901   7                    else
 902   7                    {
 903   8      #ifdef __LOCK_AUDIO_SUPPORT__
 904   8                      mmi_dq_aud_play_with_id(AUD_ID_PWD_NOT_SAME_RETRY);
 905   8      #endif
 906   8                    }
 907   7                    mmi_ms_pwd_init_var();
 908   7                  }
 909   6                }
 910   5              }
 911   4              else
 912   4              {
 913   5                if (key_len == PWD_INPUT_VIRTUAL_PWD || key_len == PWD_INPUT_MAX_LEN)
 914   5                {
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 16  

 915   6                  mmi_dq_fs_check_input_pwd_from_app(input_key_1, key_len);
 916   6                  key_len = 0;
 917   6                }
 918   5                else if (key_len == PWD_INPUT_SYNC_TIM_STAMP)
 919   5                {
 920   6                  decode_check_code(input_key_1, 10);
 921   6                  if (get_decode.chk_key_2[0] == input_key_1[8] && get_decode.chk_key_2[1] == input_key_1[9])
 922   6                  {
 923   7                    unsigned char i, j;
 924   7                    unsigned char a[10][5] = {
 925   7                      {0x26, 0x41, 0x53, 0x89, 0x70},
 926   7                      {0x43, 0x16, 0x98, 0x25, 0x07},
 927   7                      {0x92, 0x35, 0x64, 0x70, 0x81},
 928   7                      {0x72, 0x59, 0x03, 0x18, 0x46},
 929   7                      {0x02, 0x85, 0x19, 0x63, 0x74},
 930   7                      {0x12, 0x05, 0x69, 0x43, 0x87},
 931   7                      {0x18, 0x95, 0x42, 0x76, 0x30},
 932   7                      {0x09, 0x58, 0x26, 0x17, 0x34},
 933   7                      {0x10, 0x63, 0x52, 0x74, 0x89},
 934   7                      {0x21, 0x69, 0x50, 0x37, 0x84},
 935   7                    };
 936   7      
 937   7                    for (i = 0; i < 10; i++)
 938   7                    {
 939   8                      for (j = 0; j < 5; j++)
 940   8                      {
 941   9                        g_pwd_signed_data[i].exchg_num[j] = a[i][j];
 942   9                      }
 943   8                    }
 944   7      
 945   7                    //解码
 946   7                    decode_time_stamp_10num(input_key_1, 10, get_decode.sec_key_10, get_decode.exg_key_10);
 947   7      
 948   7                    //写flash
 949   7                    if (mmi_dq_fs_set_decode(FDS_USE_TYPE_ADMIN) == RET_SUCESS)
 950   7                    {
 951   8                      //时间戳转时间
 952   8                      localtime(get_decode.tim_key_10, &t);
 953   8      
 954   8                      dqiot_drv_uart0A_init();
 955   8                      printf("flash is success\n");
 956   8                      printf("A %04d-%02d-%02d %02d:%02d:%02d\r\n", t.tm_year, t.tm_mon + 1, t.tm_mday, t.tm_hour + 8, t
             -.tm_min, t.tm_sec);
 957   8                      dqiot_drv_uart0B_init();
 958   8      #ifdef __LOCK_AUDIO_SUPPORT__
 959   8                      mmi_dq_aud_play_with_id(AUD_BASE_ID_SUCCESS);
 960   8      #endif
 961   8                    }
 962   7                    else
 963   7                    {
 964   8      #ifdef __LOCK_AUDIO_SUPPORT__
 965   8                      mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 966   8      #endif
 967   8                      dqiot_drv_uart0A_init();
 968   8                      printf("flash is error\n");
 969   8                      dqiot_drv_uart0B_init();
 970   8                    }
 971   7      
 972   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 973   7                  }
 974   6                  else
 975   6                  {
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 17  

 976   7                    dqiot_drv_uart0A_init();
 977   7                    printf("check is error\n");
 978   7                    dqiot_drv_uart0B_init();
 979   7                    mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL);
 980   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
 981   7                  }
 982   6                }
 983   5                else
 984   5                  mmi_dq_aud_play_with_id(AUD_ID_PWD_WRONG_TRY);
 985   5              }
 986   4            }
 987   3            return;
 988   3          }
 989   2          break;
 990   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_STATUS_ADD_FP:
                case SYS_STATUS_DEL_FP:
              #ifdef __LOCK_110_SUPPORT__
                case SYS_STATUS_ADD_110_FP:
                case SYS_STATUS_DEL_110_FP:
              #endif
              #endif
 998   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
 999   2        case SYS_STATUS_ADD_RFID:
1000   2        case SYS_STATUS_DEL_RFID:
1001   2      #endif
1002   2          if (key_val == KEY_S)
1003   2          {
1004   3      #ifdef __LOCK_AUDIO_SUPPORT__
1005   3            mmi_dq_aud_play_key_tone();
1006   3      #endif
1007   3      #ifdef __LOCK_WIFI_SUPPORT__
1008   3            if (wifi_add_flag == 1)
1009   3            {
1010   4              wifi_add_flag = 0xff;
1011   4              mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1012   4            }
1013   3            else
1014   3      #endif
1015   3              mmi_dq_sys_show_cur_menu_list();
1016   3          }
1017   2          break;
1018   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_STATUS_ADD_ADMIN_FP1:
                case SYS_STATUS_ADD_ADMIN_FP2:
                  if (key_val == KEY_S)
                  {
              #ifdef __LOCK_AUDIO_SUPPORT__
                    mmi_dq_aud_play_key_tone();
              #endif
                    if (0 == mmi_dq_fs_get_admin_status())
                      mmi_dq_sys_lock_add_admin_suc();
                    else
                      mmi_dq_sys_show_cur_menu_list();
                  }
                  break;
              #endif
1033   2        case SYS_STATUS_CLR_PWD:
1034   2        case SYS_STATUS_ADD_PWD_CON:
1035   2        case SYS_STATUS_DEL_PWD_CON:
1036   2      #ifdef __LOCK_FP_SUPPORT__
                case SYS_STATUS_CLR_FP:
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 18  

                case SYS_STATUS_ADD_FP_CON:
                case SYS_STATUS_DEL_FP_CON:
              #endif
1041   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
1042   2        case SYS_STATUS_CLR_RFID:
1043   2        case SYS_STATUS_ADD_RFID_CON:
1044   2        case SYS_STATUS_DEL_RFID_CON:
1045   2      #endif
1046   2        case SYS_STATUS_RESTORE_LOCK_CON:
1047   2          if (key_val == KEY_H)
1048   2          {
1049   3      #ifdef __LOCK_AUDIO_SUPPORT__
1050   3            mmi_dq_aud_play_key_tone();
1051   3      #endif
1052   3            switch (status)
1053   3            {
1054   4            case SYS_STATUS_CLR_PWD:
1055   4              if (RET_SUCESS == mmi_dq_fs_clr_pwd())
1056   4              {
1057   5      #ifdef __LOCK_AUDIO_SUPPORT__
1058   5                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_SUCESS)
1059   5      #endif
1060   5                  ;
1061   5      #ifdef __LOCK_WIFI_SUPPORT__
1062   5                mmi_dq_wifi_clr_pwd_suc();
1063   5      #endif
1064   5              }
1065   4              else
1066   4      #ifdef __LOCK_AUDIO_SUPPORT__
1067   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_PWD_FAIL)
1068   4      #endif
1069   4                  ;
1070   4              mmi_dq_sys_show_cur_menu_list();
1071   4              break;
1072   4      #ifdef __LOCK_FP_SUPPORT__
                    case SYS_STATUS_CLR_FP:
                      if (RET_SUCESS == mmi_dq_fs_clr_fp())
                      {
              #ifdef __LOCK_AUDIO_SUPPORT__
                        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_SUCESS);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                        mmi_dq_wifi_clr_fps_suc();
              #endif
                      }
                      else
              #ifdef __LOCK_AUDIO_SUPPORT__
                        mmi_dq_aud_play_with_id(AUD_ID_CLR_FP_FAIL)
              #endif
                          ;
                      mmi_dq_sys_show_cur_menu_list();
                      break;
              #endif
1091   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
1092   4            case SYS_STATUS_CLR_RFID:
1093   4              if (RET_SUCESS == mmi_dq_fs_clr_rfid())
1094   4              {
1095   5      #ifdef __LOCK_AUDIO_SUPPORT__
1096   5                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_SUCESS);
1097   5      #endif
1098   5      #ifdef __LOCK_WIFI_SUPPORT__
1099   5                mmi_dq_wifi_clr_rfid_suc();
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 19  

1100   5      #endif
1101   5              }
1102   4              else
1103   4      #ifdef __LOCK_AUDIO_SUPPORT__
1104   4                mmi_dq_aud_play_with_id(AUD_ID_CLR_RFCARD_FAIL)
1105   4      #endif
1106   4                  ;
1107   4              mmi_dq_sys_show_cur_menu_list();
1108   4              break;
1109   4      #endif
1110   4            case SYS_STATUS_ADD_PWD_CON:
1111   4              mmi_dq_sys_add_pwd();
1112   4              break;
1113   4            case SYS_STATUS_DEL_PWD_CON:
1114   4              mmi_dq_sys_del_pwd();
1115   4              break;
1116   4      #ifdef __LOCK_FP_SUPPORT__
                    case SYS_STATUS_ADD_FP_CON:
                      mmi_dq_sys_add_fp();
                      break;
                    case SYS_STATUS_DEL_FP_CON:
                      mmi_dq_sys_del_fp();
                      break;
              #endif
1124   4      #ifdef __LOCK_RFID_CARD_SUPPORT__
1125   4            case SYS_STATUS_ADD_RFID_CON:
1126   4              mmi_dq_sys_add_rf();
1127   4              break;
1128   4            case SYS_STATUS_DEL_RFID_CON:
1129   4              mmi_dq_sys_del_rf();
1130   4              break;
1131   4      #endif
1132   4            case SYS_STATUS_RESTORE_LOCK_CON:
1133   4              mmi_dq_sys_restore_lock();
1134   4              break;
1135   4            }
1136   3          }
1137   2          else if (key_val == KEY_S)
1138   2          {
1139   3      #ifdef __LOCK_AUDIO_SUPPORT__
1140   3            mmi_dq_aud_play_key_tone();
1141   3      #endif
1142   3            mmi_dq_sys_show_cur_menu_list();
1143   3          }
1144   2          break;
1145   2        case SYS_STATUS_SYS_MENU:
1146   2          if (key_val == KEY_S)
1147   2          {
1148   3      #ifdef __LOCK_AUDIO_SUPPORT__
1149   3            mmi_dq_aud_play_key_tone();
1150   3      #endif
1151   3            mmi_dq_sys_get_pre_menu_list();
1152   3          }
1153   2          else if (key_val != KEY_0 && key_val <= mmi_dq_sys_get_menu_count())
1154   2          {
1155   3      #ifdef __LOCK_AUDIO_SUPPORT__
1156   3            mmi_dq_aud_play_key_tone();
1157   3      #endif
1158   3            mmi_dq_sys_exe_menu_fun(key_val - 1);
1159   3          }
1160   2          break;
1161   2      #ifdef __FACTORY_TEST_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 20  

1162   2        case SYS_STATUS_FM_MODE:
1163   2        {
1164   3          unsigned char str = mmi_dq_factory_mode_get_test_project();
1165   3          if (str == STR_ID_KEY)
1166   3          {
1167   4      #ifdef __LOCK_AUDIO_SUPPORT__
1168   4            // mmi_dq_aud_play_key_num(key_val);
1169   4            mmi_dq_aud_play_key_tone();
1170   4      #endif
1171   4            mmi_dq_factory_mode_key_test(key_val);
1172   4          }
1173   3          else if (str == STR_ID_MOTO)
1174   3          {
1175   4            if (key_val == KEY_S)
1176   4            {
1177   5      #ifdef __LOCK_AUDIO_SUPPORT__
1178   5              mmi_dq_aud_play_key_tone();
1179   5      #endif
1180   5      #ifdef __LOCK_MOTOR_SUPPORT__
1181   5              mmi_dq_factory_mode_motor_test_back();
1182   5      #endif
1183   5              if (mmi_dq_fs_get_factory_flag() != 0)
1184   5                mmi_dq_factory_mode_test_stop();
1185   5              else
1186   5              {
1187   6      #ifdef __LOCK_MOTOR_SUPPORT__
1188   6                delay_ms(600);
1189   6                mmi_dq_factory_mode_motor_test();
1190   6      #endif
1191   6              }
1192   5            }
1193   4            else if (key_val == KEY_H)
1194   4            {
1195   5      #ifdef __LOCK_AUDIO_SUPPORT__
1196   5              mmi_dq_aud_play_key_tone();
1197   5      #endif
1198   5      #ifdef __LOCK_MOTOR_SUPPORT__
1199   5              mmi_dq_factory_mode_motor_test_back();
1200   5      #endif
1201   5              mmi_dq_factory_mode_test_item_result(STR_ID_MOTO, 1);
1202   5            }
1203   4          }
1204   3          else if (mmi_dq_fs_get_factory_flag() != 0)
1205   3          {
1206   4      #ifdef __LOCK_AUDIO_SUPPORT__
1207   4            mmi_dq_aud_play_key_tone();
1208   4      #endif
1209   4            mmi_dq_factory_mode_test_stop();
1210   4          }
1211   3        }
1212   2        break;
1213   2      #endif
1214   2      #ifdef __LOCK_WIFI_SUPPORT__
1215   2        case SYS_STATUS_WIFI_MODE:
1216   2          //if(key_val == KEY_S)
1217   2          //{
1218   2      #ifdef __LOCK_AUDIO_SUPPORT__
1219   2          mmi_dq_aud_stop();
1220   2      #endif
1221   2      #ifdef __LOCK_AUDIO_SUPPORT__
1222   2          mmi_dq_aud_play_with_id(AUD_ID_WIFI_CONNECTING);
1223   2      #endif
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 21  

1224   2          //  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1225   2          //}
1226   2          break;
1227   2      #endif
1228   2        case SYS_STATUS_LOW_POWER:
1229   2      #ifdef __LOCK_AUDIO_SUPPORT__
1230   2          mmi_dq_aud_stop();
1231   2      #endif
1232   2      #ifdef __LOCK_AUDIO_SUPPORT__
1233   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
1234   2      #endif
1235   2      #ifdef __LOCK_WIFI_SUPPORT__
1236   2          mmi_dq_wifi_lowpower_alarm();
1237   2      #endif
1238   2          break;
1239   2        default:
1240   2          break;
1241   2        }
1242   1        return;
1243   1      }
1244          
1245          #ifdef __LOCK_FP_SUPPORT__
              /*
              parameter: 
                none
              return :
                none
              */
              void mmi_ms_fps_opt_fun(unsigned char fps_val)
              {
                RET_VAL retval = 0;
                unsigned short index = 0;
                SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
                if (status == SYS_STATUS_LOW_POWER)
                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_stop();
              #endif
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                  mmi_dq_wifi_lowpower_alarm();
              #endif
                  return;
                }
                else if (status == SYS_STATUS_WAIT_FOR_ENTER_SLEEP)
                  mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
              
                if ((status != SYS_STATUS_INPUT_FP && status != SYS_STATUS_ADD_FP && status != SYS_STATUS_DEL_FP && statu
             -s != SYS_STATUS_ADD_ADMIN_FP1 && status != SYS_STATUS_ADD_ADMIN_FP2 && status != SYS_STATUS_ADD_110_FP && status != SYS_
             -STATUS_DEL_110_FP)
              #ifdef __FACTORY_TEST_SUPPORT__
                  || (status == SYS_STATUS_FM_MODE && STR_ID_FINGERPRINT != mmi_dq_factory_mode_get_test_project())
              #endif
                )
                  return;
              
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_stop();
              #endif
                if (mmi_dq_sys_door_state_check() == 1)
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 22  

                {
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_stop();
              #endif
              #ifdef __LOCK_AUDIO_SUPPORT__
                  mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                  mmi_dq_wifi_fp_alarm();
              #endif
                  return;
                }
              
                retval = mmi_dq_fp_get_image();
              
                if (retval == 0)
                {
                  // printfS("mmi_dq_fp_get_image", "ok");
                  // if (opt_time != 0)
                  //  retval = mmi_dq_fp_gen_char(0);
                  // if (retval == 0)
                  retval = mmi_dq_fp_gen_char(opt_time);
                  if (retval == 0)
                  {
                    // printfS("mmi_dq_fp_gen_char", "ok");
                    retval = mmi_dq_fp_high_speed_search(opt_time, &index);
                    if (retval == 0)
                    {
                      // printfS("mmi_dq_fp_high_speed_search", "ok");
                      if (status == SYS_STATUS_INPUT_FP)
                      {
                        retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_ALL);
                        if (retval == RET_SUCESS)
                        {
                          get_index = index;
                          mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_110_SUPPORT__
                          if (mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_110) == RET_SUCESS)
                          {
                            mmi_dq_sys_door_open(SYS_OPEN_BY_110_FP);
                          }
                          else
              #endif
                            mmi_dq_sys_door_open(SYS_OPEN_BY_FP);
                        }
                        else
                        {
                          mmi_dq_fp_light(FP_RED);
                          mmi_dq_sys_door_open_fail(SYS_OPEN_BY_FP);
                        }
                      }
                      else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
                      {
                        mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                        mmi_dq_aud_play_with_id(AUD_ID_FP_EXIST);
              #endif
                      }
                      else if (status == SYS_STATUS_DEL_FP || status == SYS_STATUS_DEL_110_FP)
                      {
              #ifdef __LOCK_110_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 23  

                        if (status == SYS_STATUS_DEL_FP)
                          retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_USER);
                        else if (status == SYS_STATUS_DEL_110_FP)
                          retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_110);
              #else
                        retval = mmi_dq_fs_check_fp((unsigned char)index, FDS_USE_TYPE_USER);
              #endif
                        if (retval == RET_SUCESS)
                        {
                          static unsigned char del_num = 0;
                          if (opt_time == OPT_ONE_TIME)
                          {
                            opt_time = OPT_TWO_TIME;
                            del_num = index;
                            mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                            mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_FP_AGAIN);
              #endif
                          }
                          else
                          {
                            //retval = mmi_dq_fp_match();
                            if (del_num == index)
                              retval = 0;
                            else
                              retval = 255;
                            if (retval == 0) //|| retval == 255)
                            {
              #ifdef __LOCK_110_SUPPORT__
                              if (status == SYS_STATUS_DEL_FP)
                                retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_USER);
                              else if (status == SYS_STATUS_DEL_110_FP)
                                retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_110);
              #else
                              retval = mmi_dq_fs_del_fp((unsigned char)index, FDS_USE_TYPE_USER);
              #endif
                              if (retval == RET_SUCESS)
                              {
                                retval = mmi_dq_fp_delete(index);
                              }
                              if (retval == 0)
                              {
                                mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                mmi_dq_aud_play_with_id(AUD_ID_DEL_FP_SUCESS);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                                mmi_dq_wifi_del_fp(index);
              #endif
                              }
                              else
                              {
                                mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL);
              #endif
                              }
              #ifdef __LOCK_110_SUPPORT__
                              if (status == SYS_STATUS_DEL_FP)
                                mmi_dq_sys_del_fp_con();
                              else if (status == SYS_STATUS_DEL_110_FP)
                                mmi_dq_sys_show_cur_menu_list();
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 24  

              #else
                              mmi_dq_sys_del_fp_con();
              #endif
                            }
                            else
                            {
                              mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                              mmi_dq_aud_play_with_id(AUD_ID_FP_TWICE_NOT_SAME_RETRY);
              #endif
                            }
                            opt_time = OPT_ONE_TIME;
                          }
                        }
                        else
                        {
                          mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                          mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
              #endif
                        }
                      }
                    }
                    else
                    {
                      // printfS("mmi_dq_fp_high_speed_search", "error");
                      if (status == SYS_STATUS_INPUT_FP)
                      {
                        mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                        // mmi_dq_aud_play_with_id(AUD_ID_FP_WRONG_TRY);
              #endif
                        mmi_dq_sys_door_open_fail(SYS_OPEN_BY_FP);
                      }
                      else if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_ADMIN_FP1 || status == SYS_STATUS_ADD
             -_ADMIN_FP2 || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
                      {
                        if (opt_time == FPS_MAX_INPUT_TIME)
                        {
                          retval = mmi_dq_fp_reg_module();
                          if (retval == 0)
                          {
                            // printfS("mmi_dq_fp_reg_module", "ok");
                            if (status == SYS_STATUS_ADD_FP || status == SYS_STATUS_ADD_110_FP || status == SYS_STATUS_FM_MODE)
                            {
              #ifdef __LOCK_110_SUPPORT__
                              if (status == SYS_STATUS_ADD_110_FP)
                                index = mmi_dq_fs_get_fp_110_unuse_index();
                              else
              #endif
                                index = mmi_dq_fs_get_fp_unuse_index();
                              if (index == 0xFF)
                              {
                                // printfS("mmi_dq_fs_get_fp_unuse_index", "error");
                                mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                mmi_dq_aud_play_with_id(AUD_ID_FP_FULL);
              #endif
                                mmi_dq_sys_show_cur_menu_list();
                              }
                              else
                              {
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 25  

                                // printfS("mmi_dq_fs_get_fp_unuse_index", "ok");
                                // printfV("index", (int)index);
                                retval = mmi_dq_fp_store_char(0, index);
                                if (status == SYS_STATUS_ADD_FP)
                                {
                                  if (retval == 0)
                                  {
                                    // printfS("mmi_dq_fp_store_char", "ok");
                                    retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_USER);
                                    if (retval != 0)
                                      mmi_dq_fp_delete(index);
                                  }
                                  if (retval == 0)
                                  {
                                    // printfS("mmi_dq_fs_set_fp", "ok");
                                    mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                                    mmi_dq_wifi_add_fp(index);
              #endif
                                  }
                                  else
                                  {
                                    // printfS("mmi_dq_fp_store_char", "error");
                                    mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
              #endif
                                  }
              #ifdef __LOCK_WIFI_SUPPORT__
                                  if (wifi_add_flag == 1)
                                  {
                                    wifi_add_flag = 0xff;
                                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
                                  }
                                  else
              #endif
                                    mmi_dq_sys_add_fp_con();
                                }
              #ifdef __LOCK_110_SUPPORT__
                                else if (status == SYS_STATUS_ADD_110_FP)
                                {
                                  if (retval == 0)
                                  {
                                    retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_110);
                                    if (retval != 0)
                                      mmi_dq_fp_delete(index);
                                  }
                                  if (retval == 0)
                                  {
                                    mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                                    mmi_dq_wifi_set_110();
                                    mmi_dq_wifi_add_fp(index);
              #endif
                                  }
                                  else
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 26  

                                  {
                                    mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
              #endif
                                  }
                                  mmi_dq_sys_show_cur_menu_list();
                                }
              #endif
              #ifdef __FACTORY_TEST_SUPPORT__
                                else
                                {
                                  if (retval == 0)
                                  {
                                    retval = mmi_dq_fp_delete(index);
                                  }
                                  if (retval == 0)
                                  {
                                    mmi_dq_fp_light(FP_GREEN);
                                    mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 1);
                                  }
                                  else
                                  {
                                    mmi_dq_fp_light(FP_RED);
                                    mmi_dq_factory_mode_test_item_result(STR_ID_FINGERPRINT, 0);
                                  }
                                }
              #endif
                              }
                            }
                            else
                            {
                              if (status == SYS_STATUS_ADD_ADMIN_FP1)
                                index = 0;
                              else if (status == SYS_STATUS_ADD_ADMIN_FP2)
                                index = 1;
                              retval = mmi_dq_fp_delete(index);
                              if (retval == 0)
                                retval = mmi_dq_fp_store_char(0, index);
                              if (retval == 0)
                                retval = mmi_dq_fs_set_fp((unsigned char)index, FDS_USE_TYPE_ADMIN);
                              if (retval == 0)
                              {
                                mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                mmi_dq_aud_play_with_id(AUD_ID_ADD_FP_SUCESS);
              #endif
              #ifdef __LOCK_WIFI_SUPPORT__
                                mmi_dq_wifi_add_fp(index);
              #endif
                              }
                              else
                              {
                                mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                                mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL);
              #endif
                              }
                              if (0 == mmi_dq_fs_get_admin_status())
                              {
                                if (status == SYS_STATUS_ADD_ADMIN_FP1)
                                  mmi_dq_sys_chg_admin_fp_No2();
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 27  

                                else
                                  mmi_dq_sys_lock_add_admin_suc();
                              }
                              else
                                mmi_dq_sys_show_cur_menu_list();
                            }
                          }
                          else
                          {
                            mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                            mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY);
              #endif
                          }
                          opt_time = OPT_ONE_TIME;
                        }
                        else
                        {
                          opt_time++;
                          mmi_dq_fp_light(FP_GREEN);
              #ifdef __LOCK_AUDIO_SUPPORT__
                          mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
              #endif
                        }
                      }
                      else if (status == SYS_STATUS_DEL_FP)
                      {
                        mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                        mmi_dq_aud_play_with_id(AUD_ID_FP_NOT_EXIST);
              #endif
                      }
                    }
                    return;
                  }
                }
                // printfS("mmi_dq_fp_get_image", "error");
              
                mmi_dq_fp_light(FP_RED);
              #ifdef __LOCK_AUDIO_SUPPORT__
                mmi_dq_aud_play_with_id(AUD_ID_PRESS_FP_AGAIN);
              #endif
                return;
              }
              #endif
1637          
1638          #ifdef __LOCK_RFID_CARD_SUPPORT__
1639          /*
1640          parameter: 
1641            none
1642          return :
1643            none
1644          */
1645          void mmi_ms_rfid_opt_fun(unsigned char rfid_val)
1646          {
1647   1        RET_VAL retval = RET_SUCESS;
1648   1        unsigned char index = 0;
1649   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
1650   1      
1651   1        if (status == SYS_STATUS_LOW_POWER)
1652   1        {
1653   2      #ifdef __LOCK_AUDIO_SUPPORT__
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 28  

1654   2          mmi_dq_aud_stop();
1655   2      #endif
1656   2      #ifdef __LOCK_AUDIO_SUPPORT__
1657   2          mmi_dq_aud_play_with_id(AUD_ID_LOW_BATTERY);
1658   2      #endif
1659   2      #ifdef __LOCK_WIFI_SUPPORT__
1660   2          mmi_dq_wifi_lowpower_alarm();
1661   2      #endif
1662   2          return;
1663   2        }
1664   1        else if (status == SYS_STATUS_WAIT_FOR_ENTER_SLEEP)
1665   1          mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1666   1      
1667   1        if ((status != SYS_STATUS_INPUT_RFID && status != SYS_STATUS_ADD_RFID && status != SYS_STATUS_DEL_RFID)
1668   1      #ifdef __FACTORY_TEST_SUPPORT__
1669   1          || (status == SYS_STATUS_FM_MODE && STR_ID_RF_CARD != mmi_dq_factory_mode_get_test_project())
1670   1      #endif
1671   1        )
1672   1          return;
1673   1      
1674   1      #ifdef __LOCK_AUDIO_SUPPORT__
1675   1        mmi_dq_aud_stop();
1676   1      #endif
1677   1      
1678   1        if (mmi_dq_sys_door_state_check() == 1)
1679   1        {
1680   2      #ifdef __LOCK_AUDIO_SUPPORT__
1681   2          mmi_dq_aud_play_with_id(AUD_ID_RONG_TIMES_EXCEED);
1682   2      #endif
1683   2      #ifdef __LOCK_WIFI_SUPPORT__
1684   2          mmi_dq_wifi_rfid_alarm();
1685   2      #endif
1686   2          return;
1687   2        }
1688   1      #ifdef __FACTORY_TEST_SUPPORT__
1689   1        if (status == SYS_STATUS_FM_MODE)
1690   1        {
1691   2          retval = mmi_dq_rfid_gen_char(opt_time);
1692   2          if (retval == RET_SUCESS)
1693   2          {
1694   3            if (opt_time == OPT_ONE_TIME)
1695   3            {
1696   4      #ifdef __LOCK_AUDIO_SUPPORT__
1697   4              mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
1698   4      #endif
1699   4              opt_time = OPT_TWO_TIME;
1700   4            }
1701   3            else
1702   3            {
1703   4              retval = mmi_dq_rfid_match();
1704   4              if (retval == RET_SUCESS)
1705   4      
1706   4                mmi_dq_factory_mode_test_item_result(STR_ID_RF_CARD, 1);
1707   4              else
1708   4      #ifdef __LOCK_AUDIO_SUPPORT__
1709   4                mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY)
1710   4      #endif
1711   4                  ;
1712   4              opt_time = OPT_ONE_TIME;
1713   4            }
1714   3          }
1715   2          return;
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 29  

1716   2        }
1717   1      #endif
1718   1        retval = mmi_dq_rfid_search_by_temp(&index);
1719   1        if (retval == RET_SUCESS)
1720   1        {
1721   2          if (status == SYS_STATUS_INPUT_RFID)
1722   2          {
1723   3            mmi_dq_sys_door_open(SYS_OPEN_BY_RFID);
1724   3          }
1725   2          else if (status == SYS_STATUS_ADD_RFID)
1726   2          {
1727   3      #ifdef __LOCK_AUDIO_SUPPORT__
1728   3            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_EXIST);
1729   3      #endif
1730   3          }
1731   2          else if (status == SYS_STATUS_DEL_RFID)
1732   2          {
1733   3            retval = mmi_dq_rfid_gen_char(opt_time);
1734   3            if (retval == RET_SUCESS)
1735   3            {
1736   4              if (opt_time == OPT_ONE_TIME)
1737   4              {
1738   5      #ifdef __LOCK_AUDIO_SUPPORT__
1739   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_DEL_RFCARD_AGAIN);
1740   5      #endif
1741   5                opt_time = OPT_TWO_TIME;
1742   5              }
1743   4              else
1744   4              {
1745   5                retval = mmi_dq_rfid_match();
1746   5                if (retval == RET_SUCESS)
1747   5                {
1748   6                  retval = mmi_dq_fs_del_rfid(index);
1749   6                  if (retval == RET_SUCESS)
1750   6                  {
1751   7                    get_index = index;
1752   7      #ifdef __LOCK_AUDIO_SUPPORT__
1753   7                    mmi_dq_aud_play_with_id(AUD_ID_DEL_RFCARD_SUCESS);
1754   7      #endif
1755   7      #ifdef __LOCK_WIFI_SUPPORT__
1756   7                    mmi_dq_wifi_del_rfid_suc(get_index);
1757   7      #endif
1758   7                    // printfV("get_index", (int)get_index);
1759   7                  }
1760   6                  else
1761   6      #ifdef __LOCK_AUDIO_SUPPORT__
1762   6                    mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL)
1763   6      #endif
1764   6                      ;
1765   6                  mmi_dq_sys_del_rf_con();
1766   6                }
1767   5                else
1768   5      #ifdef __LOCK_AUDIO_SUPPORT__
1769   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY)
1770   5      #endif
1771   5                    ;
1772   5                opt_time = OPT_ONE_TIME;
1773   5              }
1774   4            }
1775   3            else
1776   3      #ifdef __LOCK_AUDIO_SUPPORT__
1777   3              mmi_dq_aud_play_with_id(AUD_ID_DEL_FAIL_RETRY)
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 30  

1778   3      #endif
1779   3                ;
1780   3          }
1781   2        }
1782   1        else
1783   1        {
1784   2          if (status == SYS_STATUS_ADD_RFID)
1785   2          {
1786   3            retval = mmi_dq_rfid_gen_char(opt_time);
1787   3            if (retval == RET_SUCESS)
1788   3            {
1789   4              if (opt_time == OPT_ONE_TIME)
1790   4              {
1791   5      #ifdef __LOCK_AUDIO_SUPPORT__
1792   5                mmi_dq_aud_play_with_id(AUD_ID_PRESS_RFCARD_AGAIN);
1793   5      #endif
1794   5                opt_time = OPT_TWO_TIME;
1795   5              }
1796   4              else
1797   4              {
1798   5                retval = mmi_dq_rfid_match();
1799   5                if (retval == RET_SUCESS)
1800   5                {
1801   6                  retval = mmi_dq_rfid_store(0);
1802   6                  if (retval == RET_SUCESS)
1803   6                  {
1804   7      #ifdef __LOCK_AUDIO_SUPPORT__
1805   7                    mmi_dq_aud_play_with_id(AUD_ID_ADD_RFCARD_SUCESS);
1806   7      #endif
1807   7      #ifdef __LOCK_WIFI_SUPPORT__
1808   7                    mmi_dq_wifi_add_rfid_suc(get_index);
1809   7      #endif
1810   7                    // printfV("get_index", (int)get_index);
1811   7                  }
1812   6                  else
1813   6      #ifdef __LOCK_AUDIO_SUPPORT__
1814   6                    mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL)
1815   6      #endif
1816   6                      ;
1817   6      #ifdef __LOCK_WIFI_SUPPORT__
1818   6                  if (wifi_add_flag == 1)
1819   6                  {
1820   7                    wifi_add_flag = 0xff;
1821   7                    mmi_dq_ms_set_sys_state(SYS_STATUS_IDLE);
1822   7                  }
1823   6                  else
1824   6      #endif
1825   6                    mmi_dq_sys_add_rf_con();
1826   6                }
1827   5                else
1828   5      #ifdef __LOCK_AUDIO_SUPPORT__
1829   5                  mmi_dq_aud_play_with_id(AUD_ID_RFCARD_TWICE_NOT_SAME_RETRY)
1830   5      #endif
1831   5                    ;
1832   5                opt_time = OPT_ONE_TIME;
1833   5              }
1834   4            }
1835   3            else
1836   3      #ifdef __LOCK_AUDIO_SUPPORT__
1837   3              mmi_dq_aud_play_with_id(AUD_ID_ADD_FAIL_RETRY)
1838   3      #endif
1839   3                ;
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 31  

1840   3          }
1841   2          else if (status == SYS_STATUS_INPUT_RFID)
1842   2            mmi_dq_sys_door_open_fail(SYS_OPEN_BY_RFID);
1843   2          else
1844   2      #ifdef __LOCK_AUDIO_SUPPORT__
1845   2            mmi_dq_aud_play_with_id(AUD_ID_RFCARD_NOT_EXIST)
1846   2      #endif
1847   2              ;
1848   2        }
1849   1      
1850   1        return;
1851   1      }
*** WARNING C280 IN LINE 1645 OF mmi_src\mmi_ms.c: 'rfid_val': unreferenced local variable
1852          #endif
1853          
1854          /*
1855          parameter: 
1856            none
1857          return :
1858            none
1859          */
1860          void mmi_ms_reset_opt_fun(void)
1861          {
1862   1        SYS_BASE_STATUS status = mmi_dq_ms_get_sys_state();
1863   1      
1864   1        if (status == SYS_STATUS_FM_MODE
1865   1      #ifdef __FACTORY_TEST_SUPPORT__
1866   1          && STR_ID_RESET == mmi_dq_factory_mode_get_test_project()
1867   1      #endif
1868   1        )
1869   1        {
1870   2      #ifdef __FACTORY_TEST_SUPPORT__
1871   2          mmi_dq_factory_mode_reset_test();
1872   2      #endif
1873   2          return;
1874   2        }
1875   1        else
1876   1        {
1877   2          if (RET_SUCESS == mmi_dq_fs_reset())
1878   2          {
1879   3      #ifdef __LOCK_AUDIO_SUPPORT__
1880   3            mmi_dq_aud_play_with_id(AUD_ID_RESTORE_SUCESS);
1881   3      #endif
1882   3      
1883   3      #ifdef __LOCK_WIFI_SUPPORT__
1884   3            mmi_dq_wifi_clr_pwd_suc();
1885   3            mmi_dq_wifi_clr_fps_suc();
1886   3            mmi_dq_wifi_clr_rfid_suc();
1887   3      #endif
1888   3          }
1889   2          else
1890   2      #ifdef __LOCK_AUDIO_SUPPORT__
1891   2            mmi_dq_aud_play_with_id(AUD_BASE_ID_FAIL)
1892   2      #endif
1893   2              ;
1894   2      
1895   2          mmi_dq_sys_add_admin_pwd();
1896   2        }
1897   1      }
1898          
1899          #ifdef __LOCK_WIFI_SUPPORT__
1900          /*
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 32  

1901          parameter: 
1902            none
1903          return :
1904            none
1905          */
1906          void mmi_ms_wifi_opt_fun(void)
1907          {
1908   1        unsigned char type = mmi_dq_sys_get_wifi_check_type();
1909   1        if (type == 0)
1910   1          mmi_dq_wifi_check_connect();
1911   1        else if (type == 1)
1912   1          mmi_dq_wifi_check_open();
1913   1      }
1914          
1915          /************************************************************************************
1916           *                     Own function                     *
1917           ************************************************************************************/
1918          #ifdef __LOCK_VIRTUAL_PASSWORD__
1919          void mmi_dq_ms_idle_input_with_app_result(unsigned char ret_code)
1920          {
1921   1        unsigned char open_mode = 0;
1922   1      
1923   1        if (ret_code == 0xFF || ret_code == 4)
1924   1        {
1925   2          if (mmi_dq_sys_lock_error() == 1)
*** WARNING C206 IN LINE 1925 OF mmi_src\mmi_ms.c: 'mmi_dq_sys_lock_error': missing function-prototype
1926   2            ;
1927   2          // mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_PWD_WRONG_TRY, SHOW_MESSAGE_DELAY
             -_TIME, BASE_STATUS_M_SAVE_LOG);
1928   2          else
1929   2            ;
1930   2          //  mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_PWD_WRONG_TRY, SHOW_MESSAGE_DELA
             -Y_TIME, BASE_STATUS_M_IDLE);
1931   2        }
1932   1        else if (ret_code == 2)
1933   1        {
1934   2          mmi_dq_sys_lock_correct();
*** WARNING C206 IN LINE 1934 OF mmi_src\mmi_ms.c: 'mmi_dq_sys_lock_correct': missing function-prototype
1935   2          //dq_otp_add_open_log_by_temp(0);
1936   2          //mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_CLR_PWD_SUCESS, SHOW_MESSAGE_DELAY
             -_TIME, BASE_STATUS_M_SAVE_LOG);
1937   2        }
1938   1        else if (ret_code == 5)
1939   1        {
1940   2          mmi_dq_sys_lock_correct();
1941   2          //mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_PWD_FULL, SHOW_MESSAGE_DELAY_TIME,
             - BASE_STATUS_M_IDLE);
1942   2        }
1943   1        else if (ret_code == 6)
1944   1        {
1945   2          //mmi_dq_sys_lock_correct();
1946   2          //mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_APP_SYN, SHOW_MESSAGE_DELAY_TIME, 
             -BASE_STATUS_M_IDLE);
1947   2        }
1948   1        //else if(ret_code == 3)
1949   1        //{
1950   1        //  mmi_dq_sys_lock_correct();
1951   1        //dq_otp_add_open_log_by_temp(0);
1952   1        //  mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD,LOCK_ADMIN,STR_ID_RESET_TIME_SUCESS,SHOW_MESSAGE_DELAY
             -_TIME,BASE_STATUS_M_SAVE_LOG);
1953   1        //}
1954   1        else
C51 COMPILER V9.59.0.0   MMI_MS                                                            04/28/2021 17:03:28 PAGE 33  

1955   1        {
1956   2          mmi_dq_sys_lock_correct();
1957   2          open_mode = mmi_dq_fs_get_open_mode();
1958   2          if (open_mode == MS_OPEN_MODE_DBL)
1959   2          {
1960   3            if (g_dbl_open_mode_fp_flag == 1 || g_dbl_open_mode_rf_flag == 1)
1961   3            {
1962   4              g_dbl_open_mode_fp_flag = 0;
1963   4              g_dbl_open_mode_rf_flag = 0;
1964   4              //dq_otp_add_open_log_by_temp(1);
1965   4              //mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_OPEN_DOOR, OPEN_LOCK_DELAY_TIME,
             - BASE_STATUS_M_SAVE_LOG_WITH_CLOSE);
1966   4            }
1967   3            else
1968   3            {
1969   4              g_dbl_open_mode_pwd_flag = 1;
1970   4              if (mmi_dq_fs_app_init_sucess())
*** WARNING C206 IN LINE 1970 OF mmi_src\mmi_ms.c: 'mmi_dq_fs_app_init_sucess': missing function-prototype
1971   4                ;
1972   4              //dq_otp_add_exchange_temp_open_log(0, 1);
1973   4              //mmi_dq_sys_show_message_with_id(STR_ID_SYSTEM, LOCK_ADMIN, STR_ID_DBL_OPEN_MODE, SHOW_MESSAGE_DELAY_
             -TIME / 2, BASE_STATUS_M_IDLE);
1974   4            }
1975   3          }
1976   2          else
1977   2          {
1978   3            //dq_otp_add_open_log_by_temp(0);
1979   3            //mmi_dq_sys_show_message_with_id(STR_ID_PASSWORD, LOCK_ADMIN, STR_ID_OPEN_DOOR, OPEN_LOCK_DELAY_TIME, 
             -BASE_STATUS_M_SAVE_LOG_WITH_CLOSE);
1980   3          }
1981   2        }
1982   1      }
1983          
1984          #endif //__LOCK_VIRTUAL_PASSWORD__
1985          /************************************************************************************
1986           *                     End function                     *
1987           ************************************************************************************/
1988          
1989          #endif
1990          #endif //__MMI_MS_C__


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3929    ----
   CONSTANT SIZE    =    184    ----
   XDATA SIZE       =     72      69
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
